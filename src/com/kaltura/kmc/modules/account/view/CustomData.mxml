<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
		 implements="com.kaltura.kmc.modules.account.view.interfaces.IUndoable" 
		 xmlns:dataGrid="com.kaltura.kmc.view.dataGrid.*"
		 xmlns:cdw="com.kaltura.kmc.modules.account.view.windows.customdatawindow.*"
		 creationComplete="onInit(event)">

	<mx:Script>
		<![CDATA[
			import com.kaltura.base.types.MetadataCustomFieldTypes;
			import com.kaltura.kmc.business.PermissionManager;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.modules.account.events.AddMetadataFieldEvent;
			import com.kaltura.kmc.modules.account.events.MetadataFieldEvent;
			import com.kaltura.kmc.modules.account.events.MetadataProfileEvent;
			import com.kaltura.kmc.modules.account.model.AccountModelLocator;
			import com.kaltura.kmc.modules.account.view.windows.customdatawindow.popupWindows.CustomDataAddEditPopup;
			import com.kaltura.kmc.modules.account.view.windows.customdatawindow.popupWindows.metadataNotEditablePopup;
			import com.kaltura.vo.KMCMetadataProfileVO;
			import com.kaltura.vo.MetadataFieldVO;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;

			[Bindable]
			private var _model:AccountModelLocator = AccountModelLocator.getInstance();
			private var _originalProfile:KMCMetadataProfileVO;


			/**
			 * This function will be called on every "show" event of this class
			 * it will trigger an event to request the server the most updated metadataProfile to display
			 * */
			public function init():void {
				var getMetadataProfile:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.LIST);
				getMetadataProfile.dispatch();
			}
			
			private function onInit(event:FlexEvent):void
			{
				BindingUtils.bindSetter( disableTab , _model , "customDataDisabled" );
				BindingUtils.bindSetter( metadataLoaded , _model , "metadataProfileLoaded" );
				PermissionManager.getInstance().applyAllAttributes(this, this.id);
			}
			
			private function metadataLoaded(value:Boolean) : void {
				if (value) {
					_originalProfile = new KMCMetadataProfileVO();
					if (_model.metadataProfile.xsd && _model.metadataProfile.metadataFieldVOArray.length) {
						//_originalProfile.profile = _model.metadataProfile.profile;
						_originalProfile.xsd = _model.metadataProfile.xsd.copy();
						_originalProfile.metadataFieldVOArray = new ArrayCollection(_model.metadataProfile.metadataFieldVOArray.source.concat());
					}
					
				}
					
			}
			
			public function disableTab( customDataDisabled : Boolean ) : void {
				if (customDataDisabled) {
					var metadataNotEditable:metadataNotEditablePopup = new metadataNotEditablePopup();
					metadataNotEditable.pid = _model.context.kc.partnerId;
					PopUpManager.addPopUp(metadataNotEditable, (Application.application as DisplayObject), true);
					PopUpManager.centerPopUp(metadataNotEditable);					
					this.enabled = false;
				}
			}


			/**
			 * On click on the "add" button a popup will be opened.
			 * @param event
			 *
			 */
			private function openAddFieldPopup(event:Event):void {
				var addCustomFieldPopup:CustomDataAddEditPopup = new CustomDataAddEditPopup();
				addCustomFieldPopup.addEventListener(AddMetadataFieldEvent.ADD, addNewFieldHandler);
				addCustomFieldPopup.addEventListener(KmcHelpEvent.HELP, dispatchHelp, false, 0, true);
				PopUpManager.addPopUp(addCustomFieldPopup, Application.application as DisplayObject, true);
				PopUpManager.centerPopUp(addCustomFieldPopup);
			}
			
			private function dispatchHelp(e:KmcHelpEvent):void {
				dispatchEvent(e.clone());
			}


			/**
			 * When saving a new field, this handler will be called
			 * @param event
			 *
			 */
			private function addNewFieldHandler(event:AddMetadataFieldEvent):void {
				var fieldsArray:Array = new Array();
				fieldsArray.push(event.metadataField);
				_model.metadataProfile.metadataFieldVOArray.addItem(event.metadataField);
				var addMetadataField:MetadataFieldEvent = new MetadataFieldEvent(MetadataFieldEvent.ADD, fieldsArray);
				addMetadataField.dispatch();

			}


			/**
			 * On click on the "delete" field, the "are you sure" alert will pop up
			 * @param event
			 *
			 */
			private function deleteField(event:Event):void {
				if (!customFieldsTable.selectedItem) {
					Alert.show(resourceManager.getString('account', 'customFieldsDeleteError'), resourceManager.getString('account', 'custonFieldsDeleteErrorTitle'));
					return;
				}

				var delStr:String = '';
				for each (var item:Object in customFieldsTable.selectedItems) {
					delStr += '\n' + (item as MetadataFieldVO).name;
				}

				Alert.show(resourceManager.getString('account', 'metadataFieldDeleteAlert') + delStr, resourceManager.getString('account', 'metadataFieldDeleteTitle'), Alert.YES | Alert.NO, null, deleteResponseFunc);
			}


			/**
			 * This function handles the case of "yes" selection and deletes the selected fields
			 * */
			private function deleteResponseFunc(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					var fieldsArray:Array = new Array();
					for each (var item:Object in customFieldsTable.selectedItems) {
						var indexToRemove:int = _model.metadataProfile.metadataFieldVOArray.getItemIndex(item);
						var fieldToRemove:MetadataFieldVO = MetadataFieldVO(_model.metadataProfile.metadataFieldVOArray.getItemAt(indexToRemove));
						fieldsArray.push(fieldToRemove);
						_model.metadataProfile.metadataFieldVOArray.removeItemAt(indexToRemove);
					}
					var deleteMetadataField:MetadataFieldEvent = new MetadataFieldEvent(MetadataFieldEvent.DELETE, fieldsArray);
					deleteMetadataField.dispatch();
				}
			}


			public function isChanged():Boolean {
				return _model.metadataProfile.metadataProfileChanged;
			}


			public function undo():void {
				if (_originalProfile.xsd && _originalProfile.metadataFieldVOArray.length) {
					_model.metadataProfile.xsd = _originalProfile.xsd.copy();
					_model.metadataProfile.metadataFieldVOArray = new ArrayCollection(_originalProfile.metadataFieldVOArray.source.concat())
				}
				else {
					_model.metadataProfile.xsd = null;
					_model.metadataProfile.metadataFieldVOArray = new ArrayCollection();
				}
			}


			public function resetClonedData():void {
			}
			
			private function onHelp():void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, 'section26' ));
			}
			
			public function saveChanges():void {
				if (!_model.metadataProfile.metadataProfileChanged)
					return;
				
				if (_model.metadataProfile.profile) {
					var updateMetadataProfile:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.UPDATE);
					updateMetadataProfile.dispatch();
				}
				else {
					var addMetadataProfile:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.ADD);
					addMetadataProfile.dispatch();
				}
				
			}
		]]>

	</mx:Script>
	<mx:HBox width="100%">
		<mx:Label styleName="expendableButton" width="100%" text="{resourceManager.getString('account', 'customFieldsTitle')}"/>
		<mx:Spacer width="100%" />
		<mx:Button styleName="help" buttonMode="true" click="{onHelp()}"/>
	</mx:HBox>
	<mx:Spacer height="20"/>
	<mx:HBox id="fieldsTableBox" width="100%" height="100%" styleName="tablePagerAndButtonsBarBox">
		<mx:VBox width="100%" height="100%" id='tableContainer' styleName="tableAndPagerContainerStyle"
				 horizontalAlign="center">
			<mx:HBox width="100%" height="100%">
				<cdw:CustomDataFieldsTable id="customFieldsTable" allowMultipleSelection="true" selectable="true"
										   dataProvider="{_model.metadataProfile.metadataFieldVOArray}"/>
				<mx:VBox id='actionBox' height="100%" styleName="listActionsBox">
					<mx:Button id="addFieldButton" label="{resourceManager.getString('account', 'customFieldsAddField')}" useHandCursor="true"
							   buttonMode="true" click="openAddFieldPopup(event)" styleName="listActionButton"/>
				</mx:VBox>
			</mx:HBox>
			<mx:HBox id='bottomActionBox' width="100%" styleName="DataGridActions">
				<mx:Button id="deleteCustomDataField" label="{resourceManager.getString('account', 'customFieldsDeleteField')}"
						   click="deleteField(event)" useHandCursor="true" buttonMode="true"/>
				<mx:Button id="saveChangesBtn" label="{resourceManager.getString('account', 'saveChanges')}"
						   click="{saveChanges()}" useHandCursor="true" buttonMode="true"/>
			</mx:HBox>
		</mx:VBox>
	</mx:HBox>

</mx:VBox>
