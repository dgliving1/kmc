<?xml version="1.0" encoding="utf-8"?>
<modules:KmcModule xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:modules="com.kaltura.kmc.modules.*"
				   preloader="com.kaltura.preloaders.KmcPreloader" backgroundColor="#034F57" layout="vertical"
				   minHeight="520" minWidth="950" borderThickness="0" borderStyle="solid" paddingLeft="0"
				   paddingRight="0" paddingTop="0" paddingBottom="0" xmlns:view="com.kaltura.kmc.modules.account.view.*"
				   xmlns:business="com.kaltura.kmc.modules.account.business.*"
				   xmlns:control="com.kaltura.kmc.modules.account.control.*">

	<mx:Metadata>
		[ResourceBundle("account")]
	</mx:Metadata>


	<mx:Script>
		<![CDATA[
			import com.google.analytics.AnalyticsTracker;
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.kmc.business.JSGate;
			import com.kaltura.kmc.modules.account.model.AccountModelLocator;
			import com.kaltura.kmc.modules.account.view.CustomData;
			import com.kaltura.kmc.modules.account.view.interfaces.IUndoable;
			import com.kaltura.kmc.modules.account.view.modalWindows.PayPalFormWin;
			import com.kaltura.kmc.modules.account.vo.AdminVO;
			import com.kaltura.kmc.modules.account.vo.PackagesVO;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.utils.KUtils;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.core.Container;
			import mx.events.CloseEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;

			/**
			 * KMC is responsible to use the value of
			 * this const as the id of this module.
			 * */
			public static const NAME:String = "account";

			private static const VERSION:String = "4.0";
			
			[Bindable]
			/**
			 * application data
			 * */
			private var _model:AccountModelLocator = AccountModelLocator.getInstance();

			//TODO never initialized???
			private var _tracker:AnalyticsTracker;

			/**
			 * index of current showing tab
			 * */
			private var _oldSelectedTab:int = 0;
			
			/**
			 * index of tab to go to
			 * */
			private var _newSelectedTab:int = 0;

			/**
			 * urchin number for Google Analytics tracker
			 * */
			public var urchinNumber:String;

			private var _paypalWin:PayPalFormWin;
			
			/**
			 * in case we want to start from a tab other than the
			 * first, name of the initial tab 
			 * */
			private var _initialTab:String;


			override public function getModuleName():String {
				return NAME;
			}
			override public function getModuleVersion():String {
				return VERSION;
			}
			
			override public function showSubtab(subtab:String, data:Object = null):void {
				_initialTab = subtab;
				if (stage) {
					switchToTab(_initialTab);
				}
			}
			
			private function switchToTab(tab:String):void {
				var doc:Container = contentView.getChildByName(tab) as Container;
				if (doc) {
					contentView.selectedChild = doc;
					// init the selected panel
					if (doc == overview) {
						// so far, this is the only panel that might need re-initing 
						// (users may be added in admin module)
						overview.init();
					}
				}
				else {
					// if couldn't find matching tab, show the user settings tab (which is always there).
					contentView.selectedChild = user;
				}
			}


			override protected function start():void {
				Security.allowDomain('*');

				trace("+=============================+");
				trace("|  KMC ACCOUNT VERSION " + VERSION + " |");
				trace("+=============================+");

				ExternalInterface.addCallback("saveAndClose", onExternalTabChange);
				setStyle("backgroundColor", 0xFFFFFF);

				//Binding
				BindingUtils.bindSetter(toggleLoading, _model, "loadingFlag");
				BindingUtils.bindSetter(openPayPalWindow, _model, "openPayPalWindowFlag");
				BindingUtils.bindSetter(onGATrack, _model, "gaTrackUrl");

				urchinNumber = _flashvars.urchinnumber;
				initModelContext(_flashvars);
				_model.adminData.oldEmail = _model.adminData.newEmail = _flashvars.email;

				var adminVo:AdminVO = new AdminVO();
				adminVo.oldEmail = adminVo.newEmail = _flashvars.email;
				_model.adminData = adminVo;
				
			
				/// set Alert locale for all this application
				Alert.yesLabel = resourceManager.getString('account', 'yes');
				Alert.noLabel = resourceManager.getString('account', 'no');
				Alert.okLabel = resourceManager.getString('account', 'ok');
				Alert.cancelLabel = resourceManager.getString('account', 'cancel');

				//// init analytics feature and Google Analytics
				var ka:KAnalyticsTracker = KAnalyticsTracker.getInstance();
				ka.init(_model.context.kc, "Account", VERSION, _model.context.userId);

				
	
				//roles and permissions 
				var tabsToHide:Array = permissionManager.getRelevantSubTabsToHide(NAME);
				for each (var subtabName:String in tabsToHide)
				{
					contentView.removeChild(this[subtabName]);
				}
				secTln.visible = true;
				
				// after we have the client, initialize the different panels
//				if (overview.parent) {
//					overview.init();
//				}
				if (integration.parent) {
					integration.init();
				}
				if (transcoding.parent) {
					transcoding.init();
				}
				if (metadata.parent) {
					metadata.init();
				}
				
				if (stage) {
					onAddedToStage();
				}
				else {
					addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);
				}
			}



			public function onExternalTabChange():void {
				_model.saveAndExitFlag = true;
				if ((contentView.getChildAt(_oldSelectedTab) as IUndoable).isChanged()) {
					Alert.show(resourceManager.getString('account', 'saveChangesQ'), "", Alert.YES | Alert.NO, null, saveChangesQAndExit);
					return;
				}

				JSGate.onTabChange();
			}


			private function onAddedToStage():void {
				if (this.willTrigger(Event.ADDED_TO_STAGE)) {
					removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);
				}
				var ga:GoogleAnalyticsTracker = GoogleAnalyticsTracker.getInstance();
				ga.init(_model.context.kc.partnerId, _model.context.userId, this, "KMC_ANDROMEDA", urchinNumber, "AS3", _flashvars.gaDebug == "true" ? true : false);
				
				if (_initialTab) {
					switchToTab(_initialTab);
				}
			}


			private function onGATrack(gaTrackUrl:String):void {
				if (gaTrackUrl)
					_tracker.trackPageview(gaTrackUrl);
			}


			private function initModelContext(objParam:Object):void {
				_model.context.userId = objParam.uid;
				_model.context.subpId = objParam.subpid;
				if (objParam.protocol) {
					_model.context.rootUrl = objParam.protocol + objParam.host;
				}
				else {
					_model.context.rootUrl = "http://" + objParam.host;
				}

				_model.context.kc = _kc;
				
				if (objParam.metadataprofilename) {
					_model.context.metadataProfileName = objParam.metadataprofilename;
				}
				
			}


			private function openPayPalWindow(isIt:Boolean):void {
				if (isIt) {
					if (!_paypalWin) {
						_paypalWin = new PayPalFormWin();
						_paypalWin.styleName = "TitleWindowType2";
						_paypalWin.paymentDetailsVo = _model.paymentDetailsVo;
						_paypalWin.data = _model.modalWinData;
						if ((_model.modalWinData as PackagesVO).cycleFee == _model.partnerPackage.cycleFee)
							_paypalWin.title = resourceManager.getString('account', 'updatePaymetInfo');
						else if ((_model.modalWinData as PackagesVO).cycleFee > _model.partnerPackage.cycleFee)
							_paypalWin.title = resourceManager.getString('account', 'upgradePackage');
						else {
							_paypalWin.title = resourceManager.getString('account', 'downgradePackage');
							_paypalWin.actionBtnText = resourceManager.getString('account', 'downgradeNow');
						}

						_paypalWin.title += " - " + _model.modalWinData.name;
						PopUpManager.addPopUp(_paypalWin, this, true);
						PopUpManager.centerPopUp(_paypalWin);
						enableHtmlTabs(false);
					}
				}
				else {
					if (_paypalWin) {
						PopUpManager.removePopUp(_paypalWin);
						enableHtmlTabs(true);
						_paypalWin = null;
					}
				}
			}

			/**
			 * when a user asks to change tab (clicks another tab), track that change.
			 * if the current page is changed, pop a "save changes" question,
			 * otherwise switch to the new selected tab.
			 * */
			private function onTabChange(event:ItemClickEvent):void {
				switch (event.index) {
					case 0:
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.ACCOUNT,KalturaStatsKmcEventType.ACCOUNT_ACCOUNT_OVERVIEW, "Account>Account Overview");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.ACCOUNT_CHANGE_PARTNER_INFO,GoogleAnalyticsConsts.ACCOUNT);
						break;
					case 1:
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.ACCOUNT,KalturaStatsKmcEventType.ACCOUNT_UPDATE_SERVER_SETTINGS, "Account>Update Server Settings");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.ACCOUNT_SAVE_TRANSCODING_SETTINGS,GoogleAnalyticsConsts.ACCOUNT);
						break;
					case 2:
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.ACCOUNT,KalturaStatsKmcEventType.ACCOUNT_ACCESS_CONTROL, "Account>Access Control");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.ACCOUNT_ACCESS_CONTROL,GoogleAnalyticsConsts.ACCOUNT);
						break;
					case 3:
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.ACCOUNT,KalturaStatsKmcEventType.ACCOUNT_TRANSCODING_SETTINGS, "Account>Transcoding Settings");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.ACCOUNT_TRANSCODING_SETTINGS,GoogleAnalyticsConsts.ACCOUNT);
						break;
					case 4:
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.ACCOUNT ,KalturaStatsKmcEventType.ACCOUNT_ACCOUNT_UPGRADE, "Account>Account Upgrade");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.ACCOUNT_ACCOUNT_UPGRADE,GoogleAnalyticsConsts.ACCOUNT);
						break;

				}
				if (_tracker)
					_tracker.trackPageview("kmc/account/" + (contentView.getChildAt(event.index) as Container).label + "/pid/" + _model.context.kc.partnerId + "/uid/" + _model.context.userId);

				_newSelectedTab = event.index;

				if ((contentView.getChildAt(_oldSelectedTab) as IUndoable).isChanged()) {
					Alert.show(resourceManager.getString('account', 'saveChangesQ'), "", Alert.YES | Alert.NO, null, saveChangesQ);
					return;
				}


				_oldSelectedTab = _newSelectedTab;
				contentView.selectedIndex = _newSelectedTab;
				
				JSGate.writeUrlHash("account", contentView.selectedChild.id);
			}


			private function saveChangesQAndExit(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					(contentView.getChildAt(_oldSelectedTab) as IUndoable).saveChanges();
				}
				else
					JSGate.onTabChange();
			}


			/**
			 * response handler for "save changes" question when switching subtabs.
			 * */
			private function saveChangesQ(event:CloseEvent):void {
				if (event.detail == Alert.YES)
					(contentView.getChildAt(_oldSelectedTab) as IUndoable).saveChanges();
				else
					(contentView.getChildAt(_oldSelectedTab) as IUndoable).undo();

				(contentView.getChildAt(_newSelectedTab) as IUndoable).resetClonedData();
				_oldSelectedTab = _newSelectedTab;
				//secTln.selectedIndex = _newSelectedTab;
				contentView.selectedIndex = _newSelectedTab;
			}


			public function toggleLoading(isIt:Boolean):void {
				this.enabled = !isIt;
				if (_paypalWin)
					_paypalWin.enabled = !isIt;
			}
		]]>
	</mx:Script>


	<!--- the FrontController, containing Commands specific to this application -->
	<control:AccountController/>

	<mx:VBox id="mainView" width="100%" height="100%" styleName="mainView">

		<mx:HBox width="100%" styleName="tabsContainer">
			<mx:TabBar id="secTln" styleName="tln" itemClick="onTabChange(event)" buttonMode="true"
					   dataProvider="contentView" visible="false">
			</mx:TabBar>
		</mx:HBox>

		<mx:ViewStack id="contentView" width="100%" height="100%" styleName="contentViewStack" minWidth="900"
					  minHeight="500">
			<view:AccountOverview id="overview" width="100%" label="{resourceManager.getString('account','accountOverview')}"
								  styleName="pageStyle" users="{_model.usersList}"
								  partnerData="{_model.partnerData}" adminData="{_model.adminData}"/>
			<view:Integration id="integration" width="100%" label="{resourceManager.getString('account','serverSettings')}"
								 styleName="pageStyle" rootUrl="{_model.context.rootUrl}"
								 partnerData="{_model.partnerData}"/>
			<view:AccessControl id="accessControl" label="{resourceManager.getString('account','accessControl')}"
								rootUrl="{_model.context.rootUrl}" accessControlsList="{_model.accessControlData}"
								styleName="pageStyle"/>
			<view:Transcoding id="transcoding" label="{resourceManager.getString('account','transcodingSettings')}"
							  conversionData="{_model.conversionData}" flavorParamData="{_model.flavorsData}"
							  thumbParamData="{_model.thumbsData}" styleName="pageStyle"/>
			<view:CustomData id="metadata" name="metadata" label="{resourceManager.getString('account', 'customData')}"
							 styleName="pageStyle" width="100%" />
			<view:UserSettings id="user" userInfo="{_userInfo}" width="100%" 
							   label="{resourceManager.getString('account','user_settings')}" />
			<view:Upgrade id="upgrade" width="100%" packagesList="{_model.listPackages}" partnerPackage="{_model.partnerPackage}"
						   label="{resourceManager.getString('account','accountUpgrade')}" styleName="pageStyle"/>
							 
		</mx:ViewStack>

	</mx:VBox>

</modules:KmcModule>
