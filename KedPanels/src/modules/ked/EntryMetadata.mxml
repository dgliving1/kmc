<?xml version="1.0" encoding="utf-8"?>
<mx:Module layout="horizontal" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:utils="com.kaltura.edw.business.*"
		   creationComplete="onCreationComplete()" implements="com.kaltura.edw.business.IDrilldownPanel"
		   xmlns:control="com.kaltura.edw.control.*" label="{resourceManager.getString('drilldown', 'metadata')}">
	<mx:Metadata> 
		[Event(name="validationComplete", type="com.kaltura.edw.events.ValidationResultEvent")] 
		[Event(name="saved", type="com.kaltura.edw.events.InternalKedEvent")] 
	</mx:Metadata>
	
	
	<mx:Script>
		<![CDATA[
			import com.kaltura.KalturaClient;
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.edw.business.KedJSGate;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.constants.PanelConsts;
			import com.kaltura.edw.control.events.KedEntryEvent;
			import com.kaltura.edw.control.events.ModelEvent;
			import com.kaltura.edw.events.InternalKedEvent;
			import com.kaltura.edw.events.ValidationResultEvent;
			import com.kaltura.edw.model.datapacks.ContextDataPack;
			import com.kaltura.edw.model.datapacks.DistributionDataPack;
			import com.kaltura.edw.model.datapacks.EntryDataPack;
			import com.kaltura.edw.model.datapacks.PermissionsDataPack;
			import com.kaltura.edw.vo.FlavorAssetWithParamsVO;
			import com.kaltura.events.KdpEventTypes;
			import com.kaltura.kmvc.control.KMvCEvent;
			import com.kaltura.kmvc.model.IDataPackRepository;
			import com.kaltura.kmvc.model.KMvCModel;
			import com.kaltura.types.KalturaEditorType;
			import com.kaltura.types.KalturaEntryModerationStatus;
			import com.kaltura.types.KalturaEntryStatus;
			import com.kaltura.types.KalturaEntryType;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.utils.KTimeUtil;
			import com.kaltura.utils.ObjectUtil;
			import com.kaltura.utils.SoManager;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaFlavorAsset;
			import com.kaltura.vo.KalturaLiveStreamAdminEntry;
			import com.kaltura.vo.KalturaMediaEntry;
			import com.kaltura.vo.KalturaMixEntry;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Image;
			import mx.events.ResizeEvent;
			import mx.formatters.DateFormatter;
			import mx.resources.ResourceManager;
			import mx.utils.StringUtil;
			
			// =================================================================
			// Events
			// =================================================================
//			public static const OPEN_PREVIEW:String = "openPreview";
			
			// =================================================================
			// Constants
			// =================================================================
			
			/**
			 * image to display when entry doesn't have content
			 * */
			private static const noMediaImage:* = StyleManager.getStyleDeclaration(".imageBank").getStyle("noContentImg");
			
			
			/**
			 * reference to kdp3Loader.
			 * due to performance issue that we fixed, this is static.
			 * */
			private static var kdp3StaticSwfLoader:SWFLoader;
			
			
			/**
			 * landing page replace string
			 * @internal
			 * the landing page is a page on the partner's website where they can view the entry directly.
			 * this is the token that tells KMC where the entry id should appear in the url.
			 * */
			private const ENTRY_PLACEHOLDER:String = '{entryId}';
			
			
			/**
			 * page layout: labels width
			 * */
			private const LABEL_WIDTH:Number = 105;
			
			
			/**
			 * page layout: texts width
			 * */
			private const TEXT_WIDTH:Number = 320;
			
			
			// =================================================================
			// Other Stuff
			// =================================================================
			
			/**
			 * landing page according to partner's data
			 * */
			public var landingPage:String;
			
			// =================================================================
			// Data Model
			// =================================================================
			
			/**
			 * @copy #selectedEntry
			 * */
			private var _selectedEntry:KalturaBaseEntry;
			
			private var _dpModel:IDataPackRepository;
			
			[Bindable]
			/**
			 * the entry to which we apply changes
			 * */
			public function get selectedEntry():KalturaBaseEntry {
				return _selectedEntry;
			}
			
			
			public function set selectedEntry(value:KalturaBaseEntry):void {
				if (value is KalturaLiveStreamAdminEntry) {
					offlineHolder.visible = true;
					offlineHolder.includeInLayout = true;
				}
				else {
					offlineHolder.visible = false;
					offlineHolder.includeInLayout = false;
				}
				
				_selectedEntry = value;
			}
			
			public function get dataPackModel():IDataPackRepository{
				return _dpModel;
			}
			public function set dataPackModel(value:IDataPackRepository):void{
				_dpModel = value;
				context = _dpModel.getDataPack(ContextDataPack) as ContextDataPack;
				distributionData = _dpModel.getDataPack(DistributionDataPack) as DistributionDataPack;
				entryData = _dpModel.getDataPack(EntryDataPack) as EntryDataPack;
				showEmbed = context.showEmbedCode;
				landingPage = context.landingPage;
			}
			
			public function get helpAnchor():String{
				return "entry_metadata";
			}
			
			
			[Bindable]
			private var context:ContextDataPack;
			
			[Bindable]
			private var distributionData:DistributionDataPack;
			
			[Bindable]
			private var entryData:EntryDataPack;
			
			/**
			 * thumbnail for image entries
			 * */
			private var _entryImg:Image;
			
			
			[Bindable]
			private var _entryHasContent:Boolean;
			
			/**
			 * entry's reference id before the user had a chance to change it
			 * */
			private var _originalRefid:String;
			
			
			// =================================================================
			// Methods
			// =================================================================
			
			/**
			 * retrieves the list of categories this entry should be asisgned to
			 * @return array of category names
			 * */
			private function getEntryCategories():Array {
				var catArr:Array = categoriesTextInput.text.split(',');
				var tempArr:Array = [];
				for each (var cat:String in catArr) {
					var sCat:String = StringUtil.trim(cat);
					if (sCat != '') {
						tempArr.push(sCat);
					}
				}
				return tempArr;
			}
			
			/**
			 * ask JS to open the preview player, log the action to analytics
			 * */
			private function openPreview( ):void {
				//TODO eliminate, use the function triggered in Content.mxml
				if (context.openPlayerFunc) {
					var html5Compatible:Boolean = (selectedEntry is KalturaMediaEntry && (selectedEntry as KalturaMediaEntry).mediaType == KalturaMediaType.VIDEO) ? true : false;
					var ddp:DistributionDataPack = _dpModel.getDataPack(DistributionDataPack) as DistributionDataPack;
					KedJSGate.doPreviewEmbed(context.openPlayerFunc, selectedEntry.id, selectedEntry.name, cutTo512Chars(selectedEntry.description), !_showEmbed, false, null, null, allFlavorAssets(ddp.flavorParamsAndAssetsByEntryId),
						html5Compatible);
				}
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_OPEN_PREVIEW_AND_EMBED, GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_OPEN_PREVIEW_AND_EMBED, "content>Open Preview and Embed");
				
				//First time funnel
				if (!SoManager.getInstance().checkOrFlush(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED))
					GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED, GoogleAnalyticsConsts.CONTENT);
			}
			
			/**
			 * Check if a string is longer than 512. if it is it will cut it and add ...
			 */
			private function cutTo512Chars(str:String):String {
				if (!str)
					return "";
				if (str.length >= 509) {
					var tmp:String = str.substr(0, 509);
					var words:Array = tmp.split(" ");
					words.pop();
					tmp = words.join(" ");
					return tmp + "...";
				}
				return str;
			}
			
			/**
			 * extract flavor assets from the given list
			 * @param flavorParamsAndAssetsByEntryId
			 * */
			private function allFlavorAssets(flavorParamsAndAssetsByEntryId:ArrayCollection):Array {
				var fa:KalturaFlavorAsset;
				var result:Array = new Array();
				for each (var kawp:FlavorAssetWithParamsVO in flavorParamsAndAssetsByEntryId) {
					fa = kawp.kalturaFlavorAssetWithParams.flavorAsset;
					if (fa) {
						result.push(fa);
					}
				}
				return result;
			}
			
			
			public function isChanged():Boolean {
				var res:Boolean = false;
				var orig:KalturaBaseEntry = entryData.selectedEntry;
				res ||= selectedEntry.name != orig.name;
				res ||= selectedEntry.description != orig.description;
				res ||= selectedEntry.tags != orig.tags;
				res ||= selectedEntry.categories != orig.categories;
				res ||= selectedEntry.referenceId != orig.referenceId;
				return res;
			}
			
			
			public function save():void {
				// set the categories on the entry
				selectedEntry.categories = getEntryCategories().join(',');
				
				if (selectedEntry is KalturaLiveStreamAdminEntry) {
					(selectedEntry as KalturaLiveStreamAdminEntry).offlineMessage = offlineMessage.text;
				}
				
				dispatchEvent(new InternalKedEvent(InternalKedEvent.SAVED));
			}
			
			
			public function validate():void {
				var success:Boolean = true; // validation result
				var errorMessage:String;
				var errorTitle:String;
				
				// entry name
				if (name_input.text == "") {
					errorMessage = resourceManager.getString('drilldown', 'entryNameIsMandatory');
					errorTitle = resourceManager.getString('drilldown', 'metadataError');
					success = false;
				}
				if (!errorMessage) {
					// categories section
					// auto-complete event isn't full so we need to add this here
					if (getEntryCategories().length > entryData.maxNumCategories) {
						errorMessage = resourceManager.getString('drilldown', 'categoriesLimitErrorMsg', [entryData.maxNumCategories]);
						errorTitle = resourceManager.getString('drilldown', 'categoriesErrorTitle');
						success = false;
					}
				}
				
				var e:ValidationResultEvent = new ValidationResultEvent(ValidationResultEvent.VALIDATION_COMPLETE, success, errorMessage, errorTitle);
				dispatchEvent(e);
			}
			
			
			/**
			 * for trim / clip buttons, decide if the button should be
			 * enabled according to whether entry has source flavor.
			 * @param flavors	the list of flavors associated with this entry
			 * @return whether the button should be enabled or not
			 * */
			private function entryHasSource(flavors:ArrayCollection):Boolean {
				var hasSource:Boolean = false;
				var asset:KalturaFlavorAsset;
				for each (var vo:FlavorAssetWithParamsVO in flavors) {
					asset = vo.kalturaFlavorAssetWithParams.flavorAsset;
					if (asset && asset.isOriginal) {
						hasSource = true;
						break;
					}
				}
				return hasSource;
			}
			
			
			public function initData():void {
				_originalRefid = selectedEntry.referenceId;
				
				if (kdpContainer.getChildAt(0) is Image) {
					// remove previous image
					kdpContainer.removeChildAt(0);
				}
				
				if (selectedEntry.status == KalturaEntryStatus.NO_CONTENT) {
					addImageThumb(noMediaImage);
					_entryHasContent = false;
				}
				else if ((selectedEntry is KalturaMediaEntry) && (selectedEntry as KalturaMediaEntry).mediaType == KalturaMediaType.IMAGE) {
					_entryHasContent = true;
					addImageThumb();
				}
				else {
					loaderContainer.includeInLayout = loaderContainer.visible = true;
					_entryHasContent = true;
					//mix or video
					
					loadKDP();
				}
				
				// set landing page string:
				if (landingPage) {
					var replaceIndex:int = landingPage.indexOf(ENTRY_PLACEHOLDER);
					if (replaceIndex > -1)
						landingPageLabel.text = landingPage.replace(ENTRY_PLACEHOLDER, selectedEntry.id);
					else
						landingPageLabel.text = landingPage + selectedEntry.id;
				}
			}
			
			
			public function destroy():void {
				
			}
			
			
			/**
			 * remove any playing entry from the preview player
			 * */
			public function clear():void {
				if (kdp3StaticSwfLoader && kdp3StaticSwfLoader.content) {
					kdp3StaticSwfLoader.content['sendNotification'](KdpEventTypes.DO_STOP);
					kdp3StaticSwfLoader.content['sendNotification'](KdpEventTypes.CLEAN_MEDIA); //clear the entry from the kdp
				}
				
			}
			
			
			//			/**
			//			 * see all data on the panel is legal and save data
			//			 * @return an object with error code
			//			 * */
			//			public function old_save():EntryDetailsValidationError {
			//				var result:EntryDetailsValidationError = new EntryDetailsValidationError();
			//				// entry name
			//				if (name_input.text == "") {
			//					result.error = EntryDetailsValidationError.ENTRY_NAME_MISSING;
			//				}
			//				if (result.error == null) {
			//					// categories section
			//					// auto-complete event isn't full so we need to add this here
			//					var catArr:Array = categoriesTextInput.text.split(',');
			//					var tempArr:Array = [];
			//					for each (var cat:String in catArr) {
			//						var sCat:String = StringUtil.trim(cat);
			//						if (sCat != '') {
			//							tempArr.push(sCat);
			//						}
			//					}
			//					if (tempArr.length > entryData.maxNumCategories) {
			//						result.error = EntryDetailsValidationError.CATEGORIES_LIMIT;
			//					}
			//					else {
			//						// set the categories on the entry
			//						selectedEntry.categories = tempArr.join(',');
			//					}
			//				}
			//				if (_isLiveStream)
			//					(selectedEntry as KalturaLiveStreamAdminEntry).offlineMessage = offlineMessage.text;
			//				return result;
			//			}
			
			
			
			/**
			 * Format the creation date
			 */
			private function formatDate(date:Number):String {
				var df:DateFormatter = new DateFormatter();
				df.formatString = resourceManager.getString('drilldown', 'drilldowndateformat');
				var dt:Date = new Date();
				dt.setTime(date * 1000);
				return df.format(dt);
			};
			
			
			public function init():void {
				Security.allowDomain("*");
				// bind to the REAL entry, not the copy, so the thumbnail  
				// image will be updated when a new thumbnail is uploaded.
				// this can't be done on creationComplete because selectedEntry is
				// only set at the parent's creationComplete, which comes later. so
				// the parent has to manualy initialize this panel.
				//				BindingUtils.bindSetter(updateUndoEntryThumbnail, entryData.selectedEntry, "thumbnailUrl");
				PermissionManager.getInstance().applyAllAttributes(this, PanelConsts.METADATA_PANEL);
			}
			
			
			protected function onCreationComplete():void {
				name_input.setFocus();
			}
			
			
			/**
			 * Load KDP.
			 * if we already have a loaded KDP, we add it to the parent of the new (instance) kdploader
			 * instead of loading a new kdp.
			 */
			private function loadKDP():void {
				//if this is the second time we open the content
				if (kdp3StaticSwfLoader && kdp3StaticSwfLoader.content) {
					// parent of instance loader
					var kdp3LoaderParent:DisplayObjectContainer = kdp3Loader.parent;
					// add the static loader instead of the instance loader: (if kdp3Loader has content it means we are in the same 
					// drill down session)
					if (kdp3LoaderParent && !kdp3Loader.content) {
						kdp3LoaderParent.addChildAt(kdp3StaticSwfLoader, kdp3LoaderParent.getChildIndex(kdp3Loader));
						kdp3LoaderParent.removeChild(kdp3Loader);
					}
					// listen to kdp ready to show it because on the second time if we won't do that we will see the prev thumb
					// because this is static KDP (due to performance issue)
					kdp3StaticSwfLoader.visible = false;
					kdp3StaticSwfLoader.content.addEventListener(KdpEventTypes.ENTRY_READY, showKDP);
					kdp3StaticSwfLoader.content["sendNotification"](KdpEventTypes.CHANGE_MEDIA, {entryId: entryData.selectedEntry.id});
				}
				else {
					var newUrl:String = "http://" + context.cdnHost + "/kwidget/wid/_" + context.kc.partnerId + "/ui_conf_id/" + context.drilldownUiconf + "/nowrapper/1";
					kdp3Loader.scaleContent = false;
					kdp3Loader.loaderContext = new LoaderContext(true, new ApplicationDomain(), SecurityDomain.currentDomain);
					kdp3Loader.load(newUrl);
				}
			}
			
			
//			private function stopEvent(e:Event):void {
//				var cl:String = getQualifiedClassName(e);
//				if (e.type == "resize" && cl == "fl.events::ComponentEvent") {
//					e.stopImmediatePropagation();
//					e.preventDefault();
//				}
//			}
			
			
			private function showKDP(event:Event = null):void {
				kdp3StaticSwfLoader.visible = true;
				kdpContainer.validateNow();
			}
			
			
			//			/**
			//			 * save and load new image
			//			 * */
			//			private function updateUndoEntryThumbnail(thumbnailUrl:String):void {
			//				if (selectedEntry) {
			//					selectedEntry.thumbnailUrl = thumbnailUrl;
			//				}
			//			}
			
			
			/**
			 * pause the preview player
			 * */
			public function pausePreview():void {
				if (kdp3StaticSwfLoader && kdp3StaticSwfLoader.content) {
					kdp3StaticSwfLoader.content['sendNotification'](KdpEventTypes.DO_PAUSE);
				}
			}
			
			
			private function addImageThumb(imgSource:Object = null):void {
				loaderContainer.includeInLayout = loaderContainer.visible = false;
				_entryImg = new Image();
				_entryImg.width = 300;
				_entryImg.height = 255;
				_entryImg.maintainAspectRatio = true;
				_entryImg.setStyle("horizontalAlign", "center");
				_entryImg.setStyle("verticalAlign", "middle");
				if (imgSource) {
					_entryImg.source = imgSource;
				}
				else {
					if ((KMvCModel.getInstance().getDataPack(PermissionsDataPack) as PermissionsDataPack).enableThumbResize) {
						_entryImg.source = selectedEntry.thumbnailUrl + "/width/240/height/180/bgcolor/F7F7F7/type/2";
					}
					else {
						_entryImg.source = selectedEntry.thumbnailUrl;
					}
				}
				kdpContainer.addChildAt(_entryImg, 0);
			}
			
			
			
			/**
			 * Check if this entry is a mix and if it was made in advanced editor
			 * if it is
			 */
			private function checkIfNotAdvanced(undoToEntry:*):Boolean {
				// editorType.toString();
				if (((undoToEntry is KalturaMixEntry) && (undoToEntry as KalturaMixEntry).editorType == KalturaEditorType.ADVANCED) || selectedEntry.status != KalturaEntryStatus.READY)
					return false;
				return true;
			}
			
			
			private function onPreviewClick():void {
				//stop the player from playing 
				if (kdp3StaticSwfLoader) {
					kdp3StaticSwfLoader.content['sendNotification'](KdpEventTypes.DO_STOP);
				}
//				dispatchEvent(new Event(EntryMetadata.OPEN_PREVIEW));
				openPreview();
			}
			
			
			private function uncaughtErrorHandler(event:Event):void {
				event.preventDefault();
				trace("uncaughtErrorHandler in Entry Metadata: ");
				trace(event, event["error"]);
			}
			
			
			/**
			 * Kdp loaded, initialize it.
			 */
			private function onKDP3Loaded(event:Event):void {
				kdp3Loader.tabChildren = false;
				kdp3Loader.tabEnabled = false;
				name_input.setFocus();
				kdp3StaticSwfLoader = kdp3Loader;
				if (kdp3Loader.loaderInfo.hasOwnProperty("uncaughtErrorEvents"))
					IEventDispatcher(kdp3Loader.loaderInfo["uncaughtErrorEvents"]).addEventListener("uncaughtError", uncaughtErrorHandler, false, 1, true);
				
				//set kdp params
				var params:Object = new Object();
				params.widgetId = "_" + context.kc.partnerId;
				params.cdnHost = context.cdnHost;
				params.host = context.rootUrl;
				params.autoPlay = "false";
				params.loop = "false";
				params.autoRewind = "false";
				params.sourceType = "entryId";
				params.entryId = entryData.selectedEntry.id;
				//				if (context.rootUrl)
				//					params.host = context.rootUrl;
				if (context.drilldownUiconf)
					params.uiConfId = context.drilldownUiconf;
				params.ks = context.kc.ks;
				params.partnerId = context.kc.partnerId;
				params.subpId = context.kc.partnerId + "00";
				
				//				params.cdnUrl = context.rootUrl;
				params.debugMode = context.debugMode;
				
				kdp3StaticSwfLoader.content["flashvars"] = params;
				//start the loading sqeunce of the kdp	
				kdp3StaticSwfLoader.content["init"]();
			}
			
			
			private function getModeration(moderationCode:int):String {
				switch (moderationCode) {
					case KalturaEntryModerationStatus.APPROVED:  {
						return resourceManager.getString('drilldown', 'approved');
					}
					case KalturaEntryModerationStatus.FLAGGED_FOR_REVIEW:  {
						return resourceManager.getString('drilldown', 'pending');
					}
					case KalturaEntryModerationStatus.REJECTED:  {
						return resourceManager.getString('drilldown', 'rejected');
					}
					case KalturaEntryModerationStatus.AUTO_APPROVED:  {
						return resourceManager.getString('drilldown', 'autoApproved');
					}
					case KalturaEntryModerationStatus.PENDING_MODERATION:  {
						return resourceManager.getString('drilldown', 'pendingModeration');
					}
						
					default:  {
						return ' -- ';
					}
				}
			}
			
			
			/**
			 * The function translate media type enum to the matching locale string
			 * @param mediaType
			 * @param type - special param for mix since mix is type 2 and other types are type 1 with different mediaTypes
			 */
			private function getMediaTypes(mediaType:int, type:String):String {
				if (type == KalturaEntryType.MIX) {
					return resourceManager.getString('drilldown', 'videoMix');
				}
				switch (mediaType) {
					case KalturaMediaType.VIDEO:
						return resourceManager.getString('drilldown', 'video');
						break;
					case KalturaMediaType.IMAGE:
						return resourceManager.getString('drilldown', 'image');
						break;
					case KalturaMediaType.AUDIO:
						return resourceManager.getString('drilldown', 'audio');
						break;
					case "6":
						return resourceManager.getString('drilldown', 'videoMix');
						break;
					case "10":
						return resourceManager.getString('drilldown', 'xml');
						break;
					case KalturaMediaType.LIVE_STREAM_FLASH:
						return resourceManager.getString('drilldown', 'liveStream');
						break;
				}
				
				return "";
			}
			
			
			/**
			 * open drilldown window wit the parent entry
			 * (the entry this clip was made from)
			 * */
			protected function showParentEntry(event:MouseEvent):void {
				// create the new model 
				var cg:KMvCEvent = new ModelEvent(ModelEvent.DUPLICATE_ENTRY_DETAILS_MODEL);
				controller.dispatch(cg);
				cg = new KedEntryEvent(KedEntryEvent.GET_ENTRY_AND_DRILLDOWN, null, selectedEntry.rootEntryId);
				controller.dispatch(cg);
			}
			
			
			/**
			 * request JS to open the clipApp in clipping mode
			 * */
			protected function openClipping(event:MouseEvent):void {
				pausePreview();
				KedJSGate.openClipApp(selectedEntry.id, "clip");
			}
			
			
			/**
			 * request JS to open the clipApp in trimming mode
			 * */
			protected function openTrimming(event:MouseEvent):void {
				pausePreview();
				KedJSGate.openClipApp(selectedEntry.id, "trim");
			}
			
			
			private function getRefid(refid:String):String {
				if (refid == KalturaClient.NULL_STRING) {
					return '';
				}
				else
					return refid;
			}
			
			
			protected function referenceId_changeHandler(event:Event):void {
				if (event.target.text == '') {
					if (_originalRefid == null) {
						// no change from original empty value
						selectedEntry.referenceId = null;
					}
					else {
						// used to have value, delete it
						selectedEntry.referenceId = KalturaClient.NULL_STRING;
					}
				}
				else {
					selectedEntry.referenceId = event.target.text;
				}
			}
			
			// =================================================================
			// Preview and Embed Stuff
			// =================================================================
			
			[Bindable]
			/**
			 * @copy #previewOnly
			 * */
			private var _showEmbed:Boolean = false;
			
			[Bindable]
			private var _previewEnable:Boolean = true;
			
			
			public function get previewEnable():Boolean {
				return _previewEnable;
			}
			
			
			public function set previewEnable(value:Boolean):void {
				_previewEnable = value;
			}
			
			[Bindable]
			public var previewLabel:String = ResourceManager.getInstance().getString('drilldown', 'previewAndEmbed');
			
			
			/**
			 * show only "preview" and not "preview & embed"
			 */
			public function set showEmbed(value:Boolean):void {
				if (value)
					previewLabel = resourceManager.getString('drilldown', 'previewAndEmbed');
				else {
					previewLabel = resourceManager.getString('drilldown', 'previewOnly');
				}
				_showEmbed = value;
			}
			
			
			public function get showEmbed():Boolean {
				return _showEmbed;
			}
			// =================================================================
		]]>
	</mx:Script>
	<control:MetadataTabController id="controller"/>
	<mx:StringValidator id='nameListValidator' source="{name_input}" property="text" triggerEvent="change"
						required="true"
						requiredFieldError="{resourceManager.getString('drilldown', 'entryNameIsMandatory')}"/>
	<mx:VBox width="100%" verticalGap="3">
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','name')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:TextInput id="name_input" width="{TEXT_WIDTH}" text="{selectedEntry.name}"
						  change="{selectedEntry.name = event.target.text}" styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','description')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:TextArea id="descriptionTi" width="{TEXT_WIDTH}" text="{selectedEntry.description}"
						 change="{selectedEntry.description = event.target.text}" styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label id="tagsLbl" text="{resourceManager.getString('drilldown','tags')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:TextInput id="tagsTi" width="{TEXT_WIDTH}" text="{selectedEntry.tags}"
						  change="{selectedEntry.tags = event.target.text}" styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','drillDownCategories')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<utils:AutoComplete id='categoriesTextInput' width="{TEXT_WIDTH}" height="{tagsTi.height}"
								text="{selectedEntry.categories}" styleName="autoComplete"
								dataProvider="{entryData.categoriesFullNameList}"/>
		</mx:HBox>
		<mx:HBox id="offlineHolder" width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','offlineMessage')}" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:TextArea id="offlineMessage" width="{TEXT_WIDTH}" text="{selectedEntry.offlineMessage}"
						 styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label htmlText="{resourceManager.getString('drilldown','referenceId')}" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:TextInput id="referenceId" width="{TEXT_WIDTH}" text="{getRefid(selectedEntry.referenceId)}"
						  change="referenceId_changeHandler(event)" styleName="drillDownSubLabel"/>
		</mx:HBox>
		
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','entryId')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:Label text="{selectedEntry.id}" selectable="true" styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','landingPage')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:Label id="landingPageLabel" selectable="true" styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','type')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:Label text="{getMediaTypes(int(selectedEntry.mediaType),selectedEntry.type)}"
					  styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','moderation')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:Label text="{getModeration(selectedEntry.moderationStatus)}" styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','flags')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:Label text="{selectedEntry.flags}" styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','duration')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:Label text="{KTimeUtil.formatTime(selectedEntry.duration)}" styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','createdDate')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:Label text="{formatDate(selectedEntry.createdAt)}" styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','creator')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:Label text="{selectedEntry.userId}" styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox width="100%" visible="{selectedEntry.rootEntryId != selectedEntry.id}"
				 includeInLayout="{selectedEntry.rootEntryId != selectedEntry.id}">
			<mx:Label text="{resourceManager.getString('drilldown','clippedFrom')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:LinkButton label="{selectedEntry.rootEntryId}" click="showParentEntry(event)"/>
		</mx:HBox>
		<!--</mx:VBox>-->
	</mx:VBox>
	<mx:VBox id="kdpContainer" width="100%" height="100%" styleName="noVGap" horizontalAlign="center">
		<mx:HBox width="100%" paddingTop="5">
			<mx:VBox width="100%" horizontalAlign="center">
				<mx:HBox id="loaderContainer" width="100%" paddingLeft="0">
					<mx:SWFLoader id="kdp3Loader" width="300" height="255" complete="{onKDP3Loaded(event)}"/>
				</mx:HBox>
				<mx:VBox visible="{_entryHasContent}" includeInLayout="{_entryHasContent}" horizontalAlign="center">
					<mx:Button id="previewAndEmbed" label="{previewLabel}" buttonMode="{previewAndEmbed.enabled}"
							   click="{onPreviewClick()}" width="135" styleName="dataGridBtn"
							   enabled="{(selectedEntry.status == KalturaEntryStatus.READY) &amp;&amp; _previewEnable}"/>
					
					<mx:HBox width="100%" id="editorsBox" horizontalAlign="center"
							 includeInLayout="{editorsBox.visible}"
							 visible="{(selectedEntry as KalturaMediaEntry).mediaType != KalturaMediaType.IMAGE &amp;&amp; selectedEntry.status == KalturaEntryStatus.READY}">
						<mx:LinkButton id="btnClipping" click="openClipping(event)"
									   enabled="{entryHasSource(distributionData.flavorParamsAndAssetsByEntryId)}"
									   label="{resourceManager.getString('drilldown','openClipping')}"/>
						<mx:LinkButton id="btnTrimming" click="openTrimming(event)"
									   enabled="{entryHasSource(distributionData.flavorParamsAndAssetsByEntryId)}"
									   label="{resourceManager.getString('drilldown','openTrimming')}"/>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Label text="{resourceManager.getString('drilldown','rating')}:" styleName="drillDownLabel"/>
						<mx:Label text="{selectedEntry.rank}" styleName="drillDownSubLabel"/>
						
						<mx:Label text="{resourceManager.getString('drilldown','votesCount')}:"
								  styleName="drillDownLabel"/>
						<mx:Label text="{selectedEntry.votes}" styleName="drillDownSubLabel"/>
						
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Label text="{resourceManager.getString('drilldown','plays')}:" styleName="drillDownLabel"/>
						<mx:Label text="{selectedEntry.plays}" styleName="drillDownSubLabel"/>
					</mx:HBox>
				</mx:VBox>
				<mx:Label visible="{!_entryHasContent}" includeInLayout="{!_entryHasContent}"
						  text="{resourceManager.getString('drilldown','noContentMessage')}" styleName="noContentLabel"/>
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
</mx:Module>
