<?xml version="1.0" encoding="utf-8"?>
<mx:Module layout="vertical" xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.kaltura.edw.business.IDrilldownPanel" 
		   verticalGap="{customDataVerticalGap}" label="{resourceManager.getString('drilldown', 'customData')}">
	<mx:Metadata>
		[Event(name="validationComplete", type="com.kaltura.edw.events.ValidationResultEvent")] 
		[Event(name="saved", type="com.kaltura.edw.events.InternalKedEvent")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.edw.business.FormBuilder;
			import com.kaltura.edw.business.MetadataDataParser;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.constants.PanelConsts;
			import com.kaltura.edw.control.DataTabController;
			import com.kaltura.edw.control.events.MetadataDataEvent;
			import com.kaltura.edw.events.InternalKedEvent;
			import com.kaltura.edw.events.ValidationResultEvent;
			import com.kaltura.edw.model.datapacks.CustomDataDataPack;
			import com.kaltura.edw.model.datapacks.FilterDataPack;
			import com.kaltura.edw.view.customData.SingleCustomData;
			import com.kaltura.edw.vo.EntryMetadataDataVO;
			import com.kaltura.kmvc.model.IDataPackRepository;
			import com.kaltura.vo.KMCMetadataProfileVO;
			import com.kaltura.vo.KalturaBaseEntry;
			
			import mx.collections.ArrayCollection;
			
			
			
			private static const customDataVerticalGap:int = 5;
			
			private var controller:DataTabController = DataTabController.getInstance();
			
			
			[Bindable]
			/**
			 * list of profiles presented by the tab.
			 * <code>KMCMetadataProfileVO</code> objects
			 * */
			private var _profilesAC:ArrayCollection;
			
			private var _dpModel:IDataPackRepository;
			
			/**
			 * @private
			 * this panel doesn't care about the current entry, so the implementation is empty. 
			 * */
			public function get selectedEntry():KalturaBaseEntry {
				return null;
			}
			public function set selectedEntry(value:KalturaBaseEntry):void {
			}
			
			public function get dataPackModel():IDataPackRepository{
				return _dpModel;
			}
			public function set dataPackModel(value:IDataPackRepository):void{
				_dpModel = value;
			}
			
			public function get helpAnchor():String{
				return "entry_customdata";
			}
			
			public function init():void {
				//TODO all these should be loaded here, not when content first loads!!
				
				//get default metadata view if needed
				//				var customDataDataPack:CustomDataDataPack = model.getDataPack(CustomDataDataPack) as CustomDataDataPack;
				//				if (!customDataDataPack.metadataDefaultUiconfXML) {
				//					var getMetadataUiconf:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.GET_METADATA_UICONF);
				//					controller.dispatch(getMetadataUiconf);
				//				}
				// loaded with filter data
				//				var listMetadataProfiles:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.LIST);
				//				controller.dispatch(listMetadataProfiles);
				var filterData:FilterDataPack = _dpModel.getDataPack(FilterDataPack) as FilterDataPack;
				
				buildProfiles(filterData.filterModel.metadataProfiles, filterData.filterModel.formBuilders);
				
				PermissionManager.getInstance().applyAllAttributes(this, PanelConsts.CUSTOM_DATA_PANEL);
			}
			
			/**
			 * loads required data from server
			 * */
			public function initData():void {
				var listCustomData:MetadataDataEvent = new MetadataDataEvent(MetadataDataEvent.LIST);
				controller.dispatch(listCustomData);
			}
			
			public function isChanged():Boolean {
				var metadataChanged:Boolean = false;
				var customDataDataPack:CustomDataDataPack = _dpModel.getDataPack(CustomDataDataPack) as CustomDataDataPack;
				if (_profilesAC.length && customDataDataPack.metadataInfoArray && customDataDataPack.metadataInfoArray.length) {
					for (var i:int = 0; i < _profilesAC.length; i++) {
						var metadataInfo:EntryMetadataDataVO = customDataDataPack.metadataInfoArray.getItemAt(i) as EntryMetadataDataVO;
						var metadataProfile:KMCMetadataProfileVO = _profilesAC.getItemAt(i) as KMCMetadataProfileVO;
						if (metadataProfile && metadataProfile.profile && metadataInfo) {
							var newMetadataXML:XML = MetadataDataParser.toMetadataXML(metadataInfo, metadataProfile);
							if (metadataInfo.metadata) {
								var originalMetadataXML:XML = new XML(metadataInfo.metadata.xml);
								if (!(MetadataDataParser.compareMetadata(newMetadataXML, originalMetadataXML))) {
									metadataChanged = true;
								}
							}
								//new metadata was inserted
							else if (newMetadataXML.children().length() > 0) {
								metadataChanged = true;
							}
						}
					}
				}
				return metadataChanged;
			}
			
			public function validate():void {
				var e:ValidationResultEvent = new ValidationResultEvent(ValidationResultEvent.VALIDATION_COMPLETE, true);
				dispatchEvent(e);
			}
			
			public function save():void {
				//TODO think if we really want to move the save here
				dispatchEvent(new InternalKedEvent(InternalKedEvent.SAVED));
			}
			
			public function clear():void {
			}
			
			
			public function destroy():void {
				var curCustomData:SingleCustomData;
				for (var i:int = profilesVBox.numChildren-1; i>=0; i--) {
					curCustomData = profilesVBox.getChildAt(i) as SingleCustomData; 
					curCustomData.removeEventListener(SingleCustomData.SCROLL_TO_TOP, scrollToTop);
					curCustomData.destroy();
				}
			}
			
			
			/**
			 * create the visual representation of each profile
			 * @param profilesAC list of custom data profiles (<code>KMCMetadataProfileVO</code>)
			 * @param formBuildersAC	list of matching form builders (<code>FormBuilder</code>)
			 * */
			private function buildProfiles(profilesAC:ArrayCollection, formBuildersAC:ArrayCollection):void {
				_profilesAC = new ArrayCollection();
				//remove old data and old binding
				destroy();
				profilesVBox.removeAllChildren();
				
				for (var i:int = 0; i < profilesAC.length; i++) {
					var curProfile:KMCMetadataProfileVO = profilesAC.getItemAt(i) as KMCMetadataProfileVO;
					
					if (curProfile.profile && curProfile.metadataFieldVOArray && curProfile.metadataFieldVOArray.length > 0) {
						var curCustomData:SingleCustomData = new SingleCustomData();
						curCustomData.formBuilder = formBuildersAC.getItemAt(i) as FormBuilder;
						curCustomData.controller = controller;
						curCustomData.addEventListener(SingleCustomData.SCROLL_TO_TOP, scrollToTop, false, 0, true);
						
						_profilesAC.addItem(curProfile);
						profilesVBox.addChild(curCustomData);
					}
				}
				
				profilesVBox.verticalScrollPosition = 0;
			}
			
			
			private function scrollToTop(event:Event):void {
				profilesVBox.verticalScrollPosition = 0;
			}
			
			
			
			
			private function jumpToProfile():void {
				var scrollPos:int = 0;
				var childIndex:int = profilesCB.selectedIndex;
				if (childIndex != -1) {
					//sums up all heights before the desired profile
					for (var i:int = 0; i < childIndex; i++) {
						scrollPos += profilesVBox.getChildAt(i).height + customDataVerticalGap;
					}
					profilesVBox.verticalScrollPosition = scrollPos;
				}
				profilesCB.selectedIndex = -1;
			}
			
			private function getProfileName(data:Object):String {
				return (data as KMCMetadataProfileVO).profile.name;
			}
		]]>
	</mx:Script>
	
	<mx:HBox id="navigationHbox" verticalAlign="middle">
		<mx:ComboBox id="profilesCB" dataProvider="{_profilesAC}" change="jumpToProfile()" labelFunction="getProfileName"
					 prompt="{resourceManager.getString('drilldown','jumpToPrompt')}" selectedIndex="-1"
					 fontWeight="bold" visible="{_profilesAC.length > 1}" includeInLayout="{_profilesAC.length > 1}"/>
	</mx:HBox>
	<mx:VBox id="profilesVBox" verticalGap="{customDataVerticalGap}"
			 height="{this.height - navigationHbox.height - customDataVerticalGap}" styleName="profilesVBox"
			 width="100%"/>
</mx:Module>
