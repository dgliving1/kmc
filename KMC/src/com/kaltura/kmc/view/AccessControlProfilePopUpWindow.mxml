<?xml version="1.0" encoding="utf-8"?>
<!-- asdoc\AccessControlProfilePopUpWindow.mxml -->

<!---

	 This popup window is used to add or edit an Access Control Profile VO.
	 Use the 'newProfileState' state for the 'Add New..' action

-->

<containers:HelpTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
							title="{rm.getString('windows', 'editAccessControlTitle')}" showCloseButton="true"
							close="closeWindow(event)" layout="vertical" creationComplete="onCreationComplete(event)"
							width="700" height="550" xmlns:containers="com.kaltura.containers.*"
							xmlns:controllers="com.adobe.controllers.*" xmlns:controls="com.kaltura.controls.*"
							verticalScrollPolicy="off"
							help="onHelp(event)">
	<containers:states>
		<mx:State name="newProfileState">
			<mx:SetProperty name="title" value="{rm.getString('windows', 'newAccessControlTitle')}"/>
			<mx:SetProperty target="{submitBtn}" name="label" value="{rm.getString('windows', 'submitNewBtn')}"/>
			<mx:SetProperty target="{profileNameTi}" name="text"/>
			<mx:SetProperty target="{descriptionTa}" name="text"/>
		</mx:State>
	</containers:states>

	<mx:Script>
		<![CDATA[
			import com.kaltura.kmc.business.PermissionManager;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.types.KalturaCountryRestrictionType;
			import com.kaltura.types.KalturaNullableBoolean;
			import com.kaltura.types.KalturaSiteRestrictionType;
			import com.kaltura.utils.KArrayUtil;
			import com.kaltura.utils.KCountriesUtil;
			import com.kaltura.vo.AccessControlProfileVO;
			import com.kaltura.vo.KalturaBaseRestriction;
			import com.kaltura.vo.KalturaCountryRestriction;
			import com.kaltura.vo.KalturaPreviewRestriction;
			import com.kaltura.vo.KalturaSessionRestriction;
			import com.kaltura.vo.KalturaSiteRestriction;
			import com.kaltura.windows.popUpWindows.AddNewDomainPopUpWindow;
			import com.kaltura.windows.popUpWindows.AddRemoveCountriesPopUpWindow;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.LinkButton;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.resources.IResourceManager;
			import mx.resources.ResourceBundle;
			import mx.resources.ResourceManager;

			[ResourceBundle("windows")]
			private static var rb:ResourceBundle;


			// events const
			public static const SAVE_UPDATED_PROFILE:String = "saveUpdatedProfile";
			public static const SAVE_NEW_PROFILE:String = "saveNewProfile";


			[Bindable]
			private var rm:IResourceManager = ResourceManager.getInstance();

			/**
			 * @copy #editable
			 * */
			private var _editable:Boolean;


			/**
			 * is data in the popup editable
			 * */
			public function get editable():Boolean {
				return _editable;
			}


			/**
			 * @private
			 */
			public function set editable(value:Boolean):void {
				_editable = value;
				
				profileNameTi.editable = false;
				descriptionTa.editable = false;
				anySiteRaddioBtn.enabled = false;
				approvedSitesRadioBtn.enabled = false;
				addAuthorisedBtn.visible = false;
				removeAuthorisedBtn.visible = false;
				notApprovedSitesRadioBtn.enabled = false;
				addUnauthorisedBtn.visible = false;
				removeUnauthorisedBtn.visible = false;
				allCountriesRaddioBtn.enabled = false;
				approvedCountriesRadioBtn.enabled = false;
				addRemoveCountriesBtn.visible = false;
				notApprovedCountriesRadioBtn.enabled = false;
				restrictCountriesLinkButton.visible = false;
				secureKSCBBtn.enabled = false;
				freePerviewCBBtn.enabled = false;
				freePreviewDuration.enabled = false;
				submitBtn.visible = false;
			}



			/**
			 *  the accessControlProfile(acp) to add ot edit
			 */
			[Bindable]
			private var _accessControlProfile:AccessControlProfileVO;


			/**
			 * get the accessControlProfile(acp)
			 */
			[Bindable]
			public function get accessControlProfile():AccessControlProfileVO {
				return _accessControlProfile;
			}


			/**
			 * set the accessControlProfile(acp)
			 */
			public function set accessControlProfile(accessControlProfile:AccessControlProfileVO):void {
				_accessControlProfile = accessControlProfile;
			}


			/**
			 * creation complete of the main window, for edit we clone 
			 * the acp. For add new one we create a new acp
			 */
			private function onCreationComplete(event:Event):void {
				if (currentState == null) {
					_accessControlProfile = _accessControlProfile.clone();
					setAccessControlProfileData();
				}
				else {
					_accessControlProfile = new AccessControlProfileVO();
				}

				validateInput();
				if (currentState == "newProfileState") {
					PermissionManager.getInstance().applyAllAttributes(this, "acDrilldown_add");
				}
				else {
					PermissionManager.getInstance().applyAllAttributes(this, "acDrilldown_edit");
				}
			}


			/**
			 * seting all the data when editing an acp
			 */
			private function setAccessControlProfileData():void {
				setDefaultProfileSettings();
				setSiteRestrictions();
				setCountriesRestrictions();
				setSessionRestriction();
				//			setDirectoryRestrictions();
				setPreviewRestrictions();
			}


			public var rootUrl:String;


			private function setDefaultProfileSettings():void {
				profileNameTi.enabled = !(_accessControlProfile.profile.isDefault == KalturaNullableBoolean.TRUE_VALUE);
			}

			/**
			 *
			 */
			[Bindable]
			private var allowedSitesArr:ArrayCollection = new ArrayCollection();

			/**
			 *
			 */
			[Bindable]
			private var notAllowedSitesArr:ArrayCollection = new ArrayCollection();


			/**
			 *
			 */
			private function setSiteRestrictions():void {
				var restrictionFound:Boolean = false;
				for each (var restriction:KalturaBaseRestriction in _accessControlProfile.profile.restrictions) {
					if (restriction is KalturaSiteRestriction) {
						restrictionFound = true;
						var arr:ArrayCollection;
						if ((restriction as KalturaSiteRestriction).siteRestrictionType == KalturaSiteRestrictionType.ALLOW_SITE_LIST) {
							approvedSitesRadioBtn.selected = true;
							arr = allowedSitesArr;
						}
						else {
							notApprovedSitesRadioBtn.selected = true;
							arr = notAllowedSitesArr;
						}

						setSitesFromString(arr, (restriction as KalturaSiteRestriction).siteList);
						break;
					}
				}

				anySiteRaddioBtn.selected = !restrictionFound;
			}

			/**
			 *
			 */
			[Bindable]
			private var allowedCountriesArr:ArrayCollection = new ArrayCollection();

			/**
			 *
			 */
			[Bindable]
			private var notAllowedCountriesArr:ArrayCollection = new ArrayCollection();


			/**
			 *
			 */
			private function setCountriesRestrictions():void {
				var restrictionFound:Boolean = false;
				for each (var restriction:KalturaBaseRestriction in _accessControlProfile.profile.restrictions) {
					if (restriction is KalturaCountryRestriction) {
						restrictionFound = true;
						var arr:ArrayCollection;
						if ((restriction as KalturaCountryRestriction).countryRestrictionType == KalturaCountryRestrictionType.ALLOW_COUNTRY_LIST) {
							approvedCountriesRadioBtn.selected = true;
							arr = allowedCountriesArr;
						}
						else {
							notApprovedCountriesRadioBtn.selected = true;
							arr = notAllowedCountriesArr;
						}

						setCountriesFromString(arr, (restriction as KalturaCountryRestriction).countryList);
						break;
					}
				}

				allCountriesRaddioBtn.selected = !restrictionFound;
			}


			/**
			 *
			 */
			private function setSessionRestriction():void {
				var restrictionFound:Boolean = false;
				for each (var restriction:KalturaBaseRestriction in _accessControlProfile.profile.restrictions) {
					if (restriction is KalturaSessionRestriction) {
						secureKSCBBtn.selected = true;
						break;
					}
				}
			}


			

			/**
			 *
			 */
			private function setPreviewRestrictions():void {
				var restrictionFound:Boolean = false;
				for each (var restriction:KalturaBaseRestriction in _accessControlProfile.profile.restrictions) {
					if (restriction is KalturaPreviewRestriction) {
						freePerviewCBBtn.selected = true;
						var len:int = (restriction as KalturaPreviewRestriction).previewLength;
						freePreviewDuration.minute = Math.floor(len / 60);
						freePreviewDuration.second = len % 60;
						break;
					}
				}
			}


			/**
			 *
			 */
			private function setSitesFromString(ac:ArrayCollection, itemStr:String):void {
				var arr:Array = itemStr.split(',');
				for each (var item:String in arr) {
					ac.addItem(item);
				}
			}


			/**
			 *
			 */
			private function setCountriesFromString(ac:ArrayCollection, itemStr:String):void {
				var arr:Array = itemStr.split(',');
				for each (var countryCode:String in arr) {
					ac.addItem({name: KCountriesUtil.instance.getCountryName(countryCode), code: countryCode});
				}
			}


			/**
			 * close window event - when pressing the X button, cancel button or after saving the data
			 */
			private function closeWindow(event:Event = null):void {
				PopUpManager.removePopUp(this);
			}


			/**
			 *
			 */
			private function and(p1:Boolean, p2:Boolean):Boolean {
				return p1 && p2;
			}


			/**
			 *
			 */
			private function showAddRemoveCountriesPopUp(event:Event, list:List):void {
				var addRmvCountriesPopUp:AddRemoveCountriesPopUpWindow = new AddRemoveCountriesPopUpWindow();
				if ((event.target as LinkButton).id == "restrictCountriesLinkButton") {
					addRmvCountriesPopUp.currentState = AddRemoveCountriesPopUpWindow.RESTRICT_STATE;
				}
				addRmvCountriesPopUp.selectedData = list.dataProvider as ArrayCollection;

				PopUpManager.addPopUp(addRmvCountriesPopUp, this as DisplayObject, true);
				PopUpManager.centerPopUp(addRmvCountriesPopUp);
			}



			/**
			 *
			 */
			private function showNewDomainPopUpWindow(event:Event, list:List):void {
				var addNewDomainPopUp:AddNewDomainPopUpWindow = new AddNewDomainPopUpWindow();
				addNewDomainPopUp.domainsListData = list.dataProvider as ArrayCollection;
				PopUpManager.addPopUp(addNewDomainPopUp, this as DisplayObject, true);
				PopUpManager.centerPopUp(addNewDomainPopUp);
			}

			private var selectedList:List;


			/**
			 *
			 */
			private function showRemoveDomainsPopUpWindow(event:Event, list:List):void {
				/* var removeDomainPopUp:RemoveDomainsPopUpWindow = new RemoveDomainsPopUpWindow();
				   removeDomainPopUp.domainsListData = list.dataProvider as ArrayCollection;
				   PopUpManager.addPopUp(removeDomainPopUp, this as DisplayObject, true);
				 PopUpManager.centerPopUp(removeDomainPopUp); */
				if (list.selectedItems.length == 0) {
					Alert.show(rm.getString('windows', 'noSelectedDomainToDelete'));
				}
				else {
					selectedList = list;
					var domainsStrings:String = '';
					for each (var domain:String in list.selectedItems) {
						domainsStrings += '\t\t' + domain + '\n';
					}
					Alert.show(rm.getString('windows', 'areYouSureToRemove') + domainsStrings, rm.getString('windows', 'removeDomainTitle'), Alert.YES | Alert.NO, this, alertHandler, null, Alert.NO);
				}
			}


			private function alertHandler(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					for each (var domain:String in selectedList.selectedItems) {
						KArrayUtil.removeItemFromArray(domain, selectedList.dataProvider.source);
					}
					selectedList.dataProvider.refresh();
				}
			}


			/**
			 *
			 */
			private function saveProfile(event:Event):void {
				// update
				updateProperties();
				// validate
				if (_isCountriesOk && _isSitesOk) {
					// save
					saveAndClose();
				}
				else {
					var msg:String = '';
					msg += _isSitesOk ? msg : rm.getString('windows', 'noSitesWereSelected');
					msg = _isCountriesOk ? msg : msg + "\n" + rm.getString('windows', 'noCountriesWereSelected');

					msg = msg + "\n\n\t" + rm.getString('windows', 'noSelectionQuestion');
					Alert.show(msg, rm.getString('windows', 'alertTitle'), Alert.YES | Alert.NO, null, alertResponseHandler);
				}

			}


			private function alertResponseHandler(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					saveAndClose();
				}
			}


			private function saveAndClose():void {
				if (this.currentState == null) {
					saveUpdatedProfileFunc();
				}
				else {
					saveNewProfileFunc();
				}

				closeWindow();
			}


			/**
			 *
			 */
			private function updateProperties():void {
				updateName();
				updateDescription();
				clearRestrictions();
				updateSiteRestrictions();
				updateCountriesRestrictions();
				updateSessionRestrictions();
				UpdatePreviewRestrictions();
				//				UpdateDirectoryRestrictions();
			}


			/**
			 *
			 */
			private function updateName():void {
				_accessControlProfile.profile.name = profileNameTi.text;
			}


			/**
			 *
			 */
			private function updateDescription():void {
				_accessControlProfile.profile.description = descriptionTa.text;
			}


			/**
			 *
			 */
			private function clearRestrictions():void {
				_accessControlProfile.profile.restrictions = new Array();
			}


			private var _isSitesOk:Boolean = true;


			/**
			 *
			 */
			private function updateSiteRestrictions():void {
				if (anySiteRaddioBtn.selected != true) {
					var siteRestriction:KalturaSiteRestriction = new KalturaSiteRestriction();
					siteRestriction.siteRestrictionType = (approvedSitesRadioBtn.selected == true) ? KalturaSiteRestrictionType.ALLOW_SITE_LIST : KalturaSiteRestrictionType.RESTRICT_SITE_LIST;

					var list:List = (approvedSitesRadioBtn.selected == true) ? approvedDomainsList : notApprovedDomainsList;
					siteRestriction.siteList = getSitesList(list.dataProvider as ArrayCollection);

					if ((list.dataProvider as ArrayCollection).length > 0) {
						_isSitesOk = true;
						_accessControlProfile.profile.restrictions.push(siteRestriction);
					}
					else {
						_isSitesOk = false;
					}
				}
				else {
					_isSitesOk = true;
				}
			}


			/**
			 *
			 */
			private function getSitesList(ac:ArrayCollection):String {
				var sitesList:String = "";
				for each (var item:String in ac) {
					sitesList += item + ',';
				}
				if (sitesList.length > 0) {
					sitesList = sitesList.substr(0, sitesList.length - 1)
				}
				return sitesList;
			}


			private var _isCountriesOk:Boolean = true;


			/**
			 *
			 */
			private function updateCountriesRestrictions():void {
				if (allCountriesRaddioBtn.selected != true) {
					var countryRestriction:KalturaCountryRestriction = new KalturaCountryRestriction();
					countryRestriction.countryRestrictionType = (approvedCountriesRadioBtn.selected == true) ? KalturaCountryRestrictionType.ALLOW_COUNTRY_LIST : KalturaCountryRestrictionType.RESTRICT_COUNTRY_LIST;

					var list:List = (approvedCountriesRadioBtn.selected == true) ? approvedCountriesList : notApprovedCountriesList;
					countryRestriction.countryList = getCountriesList(list.dataProvider as ArrayCollection);

					if ((list.dataProvider as ArrayCollection).length > 0) {
						_isCountriesOk = true;
						_accessControlProfile.profile.restrictions.push(countryRestriction);
					}
					else {
						_isCountriesOk = false;
					}
				}
				else {
					_isCountriesOk = true;
				}
			}


			/**
			 *
			 */
			private function getCountriesList(ac:ArrayCollection):String {
				var countriesList:String = "";
				for each (var item:Object in ac) {
					countriesList += item.code + ',';
				}
				if (countriesList.length > 0) {
					countriesList = countriesList.substr(0, countriesList.length - 1)
				}
				return countriesList;
			}


			/**
			 *
			 */
			private function updateSessionRestrictions():void {
				if (secureKSCBBtn.selected == true) {
					var sessionRestriction:KalturaSessionRestriction = new KalturaSessionRestriction();
					_accessControlProfile.profile.restrictions.push(sessionRestriction);
				}
			}


			/**
			 *
			 */
			private function UpdatePreviewRestrictions():void {
				if (freePerviewCBBtn.selected == true) {
					var previewRestriction:KalturaPreviewRestriction = new KalturaPreviewRestriction();
					previewRestriction.previewLength = (freePreviewDuration.minute * 60) + freePreviewDuration.second;

					_accessControlProfile.profile.restrictions.push(previewRestriction);
				}
			}


			/**
			 * ask to save the updated profile
			 */
			private function saveUpdatedProfileFunc():void {
				/*    				var saveProfileChangesEvent:AccessControlProfileEvent = new AccessControlProfileEvent(AccessControlProfileEvent.UPDATE_ACCESS_CONTROL_PROFILE);
				   saveProfileChangesEvent.data = accessControlProfile;
				 saveProfileChangesEvent.dispatch(); */
				dispatchEvent(new Event(SAVE_UPDATED_PROFILE));
			}


			/**
			 *
			 */
			private function saveNewProfileFunc():void {
				/*    			var addNewProfileEvent:AccessControlProfileEvent = new AccessControlProfileEvent(AccessControlProfileEvent.ADD_NEW_ACCESS_CONTROL_PROFILE);
				   addNewProfileEvent.data = accessControlProfile;
				 addNewProfileEvent.dispatch(); */
				dispatchEvent(new Event(SAVE_NEW_PROFILE));
			}


			/**
			 *
			 */
			private function validateInput(event:Event = null):void {
				var isValid:Boolean = true
				var name:String = profileNameTi.text;
				name = name.replace(new RegExp(' ', 'g'), '');
				isValid = (name != '');

				submitBtn.enabled = isValid;
			}

			protected function onHelp(event:Event):void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, 'section231'));
			}

		]]>
	</mx:Script>

	<mx:Metadata>
		[Event(name="saveUpdatedProfile", type="mx.events.Event")]
		[Event(name="saveNewProfile", type="mx.events.Event")]
	</mx:Metadata>

	<mx:StringValidator source="{profileNameTi}" property="text" trigger="{profileNameTi}" triggerEvent="change"
						required="true" requiredFieldError="{rm.getString('windows', 'profileNameErrorMsg')}"/>


	<mx:VBox verticalScrollPolicy="on" horizontalScrollPolicy="off" height="450" width="100%"
			 styleName="acpPopUpMainVBox">
		<mx:VBox width="100%" styleName="acpPopUpSectionBox">
			<mx:VBox width="100%" >
				<mx:Label text="{rm.getString('windows', 'profileTitle')}" styleName="acpPopUpTitleLabel"/>
			</mx:VBox>
			<mx:Form width="100%" textAlign="left" paddingLeft="0">
				<mx:FormItem label="{rm.getString('windows', 'nameLabel')}" width="100%">
					<mx:TextInput id='profileNameTi' width="100%" change='validateInput(event)'
								  text="{accessControlProfile.profile.name}"/>
				</mx:FormItem>
				<mx:FormItem label="{rm.getString('windows', 'descriptionLabel')}" width="100%">
					<mx:TextArea id='descriptionTa' width="100%" text="{accessControlProfile.profile.description}"/>
				</mx:FormItem>
			</mx:Form>
		</mx:VBox>
		<mx:VBox width="100%" styleName="acpPopUpSectionBox">
			<mx:VBox width="100%">
				<mx:Label text="{rm.getString('windows', 'authoSiteBigLabel')}" styleName="acpPopUpTitleLabel"/>
			</mx:VBox>
			<mx:Spacer height="10"/>
			<mx:RadioButtonGroup id='authoSitesGroup'/>
			<mx:Form width="100%" paddingTop="0">
				<mx:Label text="{rm.getString('windows', 'authoSiteSmallLabel')}" styleName="acpPopUpSmallTitleLabel"/>
				<mx:FormItem>
					<mx:RadioButton label="{rm.getString('windows', 'anySiteRadioBtn')}" groupName="authoSitesGroup"
									id="anySiteRaddioBtn" selected="true" styleName="acpRadioButton"/>
				</mx:FormItem>
				<mx:FormItem width="100%">
					<mx:VBox width="100%" height="100%">
						<mx:RadioButton label="{rm.getString('windows', 'authoSitesRaddioBtn')}"
										groupName="authoSitesGroup" id="approvedSitesRadioBtn"
										styleName="acpRadioButton"/>
						<mx:HBox width="100%">
							<mx:Label text="{rm.getString('windows', 'domains')}"
									  enabled="{approvedSitesRadioBtn.selected}"/>
							<mx:List width="100%" id="approvedDomainsList" enabled="{approvedSitesRadioBtn.selected}"
									 allowMultipleSelection="true" rowCount="5" dataProvider="{allowedSitesArr}"/>
						</mx:HBox>
					</mx:VBox>
					<mx:HBox>
						<mx:LinkButton label="{rm.getString('windows', 'addDomainBtn')}"
									   enabled="{approvedSitesRadioBtn.selected}"
									   click='showNewDomainPopUpWindow(event, approvedDomainsList)'
									   id="addAuthorisedBtn" styleName="acpLinkButton"/>
						<mx:LinkButton label="{rm.getString('windows', 'removeDomainBtn')}"
									   enabled="{approvedSitesRadioBtn.selected}"
									   click='showRemoveDomainsPopUpWindow(event, approvedDomainsList)'
									   id="removeAuthorisedBtn" styleName="acpLinkButton"/>
					</mx:HBox>
				</mx:FormItem>
				<mx:FormItem width="100%">
					<mx:VBox width="100%" height="100%">
						<mx:RadioButton label="{rm.getString('windows', 'noAuthoSitesRadioBtn')}"
										groupName="authoSitesGroup" id="notApprovedSitesRadioBtn"
										styleName="acpRadioButton"/>
						<mx:HBox width="100%">
							<mx:Label text="{rm.getString('windows', 'domains')}"
									  enabled="{notApprovedSitesRadioBtn.selected}"/>
							<mx:List width="100%" id="notApprovedDomainsList"
									 enabled="{notApprovedSitesRadioBtn.selected}" rowCount="5"
									 dataProvider="{notAllowedSitesArr}" allowMultipleSelection="true"/>
						</mx:HBox>
					</mx:VBox>
					<mx:HBox>
						<mx:LinkButton label="{rm.getString('windows', 'addDomainBtn')}"
									   enabled="{notApprovedSitesRadioBtn.selected}"
									   click='showNewDomainPopUpWindow(event, notApprovedDomainsList)'
									   id="addUnauthorisedBtn" styleName="acpLinkButton"/>
						<mx:LinkButton label="{rm.getString('windows', 'removeDomainBtn')}"
									   enabled="{notApprovedSitesRadioBtn.selected}"
									   click='showRemoveDomainsPopUpWindow(event, notApprovedDomainsList)'
									   id="removeUnauthorisedBtn" styleName="acpLinkButton"/>
					</mx:HBox>
				</mx:FormItem>
			</mx:Form>
		</mx:VBox>
		<mx:VBox width="100%" styleName="acpPopUpSectionBox">
			<mx:VBox width="100%">
				<mx:Label text="{rm.getString('windows', 'authoCountriesBigLabel')}" styleName="acpPopUpTitleLabel"/>
			</mx:VBox>
			<mx:Spacer height="10"/>
			<mx:RadioButtonGroup id='authoCountriesGroup'/>
			<mx:Form width="100%">
				<mx:Label text="{rm.getString('windows', 'authoCountriesSmallLabel')}"
						  styleName="acpPopUpSmallTitleLabel"/>
				<mx:FormItem>
					<mx:RadioButton label="{rm.getString('windows', 'anyCountryRadioBtn')}"
									groupName="authoCountriesGroup" id='allCountriesRaddioBtn' selected="true"
									styleName="acpRadioButton"/>
				</mx:FormItem>
				<mx:FormItem width="100%">
					<mx:VBox width="100%" height="100%">
						<mx:RadioButton label="{rm.getString('windows', 'authoCountriesRadioBtn')}"
										groupName="authoCountriesGroup" id="approvedCountriesRadioBtn"
										styleName="acpRadioButton"/>
						<mx:HBox width="100%">
							<mx:Label text="{rm.getString('windows', 'countriesLabel')}"
									  enabled="{approvedCountriesRadioBtn.selected}"/>
							<mx:List width="100%" id="approvedCountriesList"
									 enabled="{approvedCountriesRadioBtn.selected}" dataProvider="{allowedCountriesArr}"
									 rowCount="5" itemRenderer="com.kaltura.renderers.CountryListItemRenderer"
									 selectable="false"/>
						</mx:HBox>
					</mx:VBox>
					<mx:HBox>
						<mx:LinkButton id="addRemoveCountriesBtn" 
							label="{rm.getString('windows', 'addRemoveCountriesBtn')}"
									   enabled="{approvedCountriesRadioBtn.selected}"
									   click="showAddRemoveCountriesPopUp(event, approvedCountriesList)"
									   styleName="acpLinkButton"/>
					</mx:HBox>
				</mx:FormItem>

				<mx:FormItem width="100%">
					<mx:VBox width="100%" height="100%">
						<mx:RadioButton label="{rm.getString('windows', 'noAuthoCountriesRadioBtn')}"
										groupName="authoCountriesGroup" id="notApprovedCountriesRadioBtn"
										styleName="acpRadioButton"/>
						<!--<mx:Text enabled="false" styleName="acpText">
							 <mx:text>{rm.getString('windows', 'noAuthoCountriesDescription')}</mx:text>
							 </mx:Text>-->
						<mx:HBox width="100%">
							<mx:Label text="{rm.getString('windows', 'countriesLabel')}"
									  enabled="{notApprovedCountriesRadioBtn.selected}"/>
							<mx:List width="100%" id="notApprovedCountriesList" dataProvider="{notAllowedCountriesArr}"
									 enabled="{notApprovedCountriesRadioBtn.selected}" rowCount="5"
									 itemRenderer="com.kaltura.renderers.CountryListItemRenderer" selectable="false"/>
						</mx:HBox>
					</mx:VBox>
					<mx:HBox>
						<mx:LinkButton id="restrictCountriesLinkButton"
									   label="{rm.getString('windows', 'addRemoveCountriesBtn')}"
									   enabled="{notApprovedCountriesRadioBtn.selected}"
									   click="showAddRemoveCountriesPopUp(event, notApprovedCountriesList)"
									   styleName="acpLinkButton"/>
					</mx:HBox>
				</mx:FormItem>
			</mx:Form>
		</mx:VBox>

		<mx:VBox width="100%" styleName="acpPopUpSectionBox">
			<mx:VBox width="100%" >
				<mx:Label text="{rm.getString('windows', 'advanceSecLabel')}" styleName="acpPopUpTitleLabel"/>
			</mx:VBox>
			<mx:Form width="100%">
				<mx:FormItem>
					<mx:VBox width="100%" height="100%">
						<mx:CheckBox label="{rm.getString('windows', 'secKSCheckBoxBtn')}" id='secureKSCBBtn'
									 styleName="acpCheckButton"
									 change="{if(!secureKSCBBtn.selected) freePerviewCBBtn.selected=false;}"/>
						<mx:Text width="100%" enabled="false" styleName="acpText">
							<mx:text>{rm.getString('windows', 'secKSDescription')}</mx:text>
						</mx:Text>
					</mx:VBox>
				</mx:FormItem>

				<mx:FormItem enabled="{secureKSCBBtn.selected}">
					<mx:CheckBox label="{rm.getString('windows', 'freePreviewCheckBoxBtn')}" id='freePerviewCBBtn'
								 styleName="acpCheckButton"/>
					<mx:HBox verticalAlign="bottom">
						<mx:Label text="{rm.getString('windows', 'freePreviewLabel1')}"
								  enabled="{and(secureKSCBBtn.selected, freePerviewCBBtn.selected)}"/>
						<controls:SM_TimeEntry height="25" id='freePreviewDuration' showSeconds="true" showHours="false"
											   is24Hour="false" showAMPMLabel="false" styleName="timeEntry"
											   enabled="{and(secureKSCBBtn.selected, freePerviewCBBtn.selected)}"/>
						<mx:Label text="{rm.getString('windows', 'previewTimeLabel')}"
								  enabled="{and(secureKSCBBtn.selected, freePerviewCBBtn.selected)}"/>
					</mx:HBox>
					<mx:Label text="{rm.getString('windows', 'freePreviewLabel2')}"
							  enabled="{and(secureKSCBBtn.selected, freePerviewCBBtn.selected)}"/>
				</mx:FormItem>
			</mx:Form>
		</mx:VBox>
	</mx:VBox>
	<mx:ControlBar width="100%" horizontalAlign="center" paddingBottom="2" paddingLeft="2" paddingRight="2"
				   paddingTop="2">
		<mx:Button label="Save Changes" useHandCursor="true" buttonMode="true" click="saveProfile(event)" id="submitBtn"/>
		<!--<mx:Button label="Cancel" click="closeWindow(event)" useHandCursor="true" buttonMode="true"/>-->
	</mx:ControlBar>
</containers:HelpTitleWindow>
