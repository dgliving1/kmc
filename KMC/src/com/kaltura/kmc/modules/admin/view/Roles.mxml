<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:view="com.kaltura.kmc.modules.admin.view.*"
		 xmlns:controls="com.kaltura.controls.*" width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)" styleName="adminPanel"
		 implements="com.kaltura.kmc.modules.admin.view.IAdminSubtab">
	<mx:Metadata >
		[Event(name="enableHeader",type="com.kaltura.kmc.modules.admin.control.events.GeneralEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.kaltura.kmc.business.PermissionManager;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.events.KmcNavigationEvent;
			import com.kaltura.kmc.modules.admin.control.events.DrilldownEvent;
			import com.kaltura.kmc.modules.admin.control.events.GeneralEvent;
			import com.kaltura.kmc.modules.admin.control.events.ListItemsEvent;
			import com.kaltura.kmc.modules.admin.control.events.RoleEvent;
			import com.kaltura.kmc.modules.admin.model.DrilldownMode;
			import com.kaltura.kmc.modules.admin.model.RolesModel;
			import com.kaltura.vo.KalturaFilterPager;
			import com.kaltura.vo.KalturaUserRole;
			
			import mx.binding.utils.BindingUtils;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			
			[Bindable]
			public var model:RolesModel;

			/**
			 * a popup window with role details
			 * */
			protected var _roleDrilldown:RoleDrilldown;
			
			
			/**
			 * bind setters and apply permissions
			 * */
			protected function creationCompleteHandler(event:FlexEvent):void {
				BindingUtils.bindSetter(onDrilldownStateChange, model, "drilldownMode");
				BindingUtils.bindSetter(onNewRoleChanged, model, "newRole");
				PermissionManager.getInstance().applyAllAttributes(this,id);
			}

			private function onNavigate(event:KmcNavigationEvent):void
			{
				// close drilldown 
				closeRoleDrilldown(null);
				// navigate
				dispatchEvent(new KmcNavigationEvent(event.type, event.module, event.subtab, event.data, event.bubbles, event.cancelable));
			}
			
			/**
			 * refresh subtab data
			 * */
			public function refreshData():void {
				listRoles(0);
				// reset selected user
				var ce:RoleEvent;
				ce = new RoleEvent(RoleEvent.SELECT_ROLE, null);
				ce.dispatch();
			}
			
			/**
			 * dispatch Cairngorm event to raise a list roles command 
			 * */
			protected function listRoles(pageNumber:int):void {
				// set table size
				if (paging) {
					if (paging.pageSize == 10) {
						superTanker.height = (table.rowHeight * 10) + table.headerHeight + paging.height;
						table.rowCount = 10;
					}
					else {
						superTanker.percentHeight = 100;
						table.percentHeight = 100;
					}
				}
				// list
				var kfp:KalturaFilterPager = new KalturaFilterPager();
				if (paging && paging.kalturaFilterPager.pageSize != int.MIN_VALUE) {
					kfp.pageSize = paging.kalturaFilterPager.pageSize;
				}
				else {
					kfp.pageSize = 10;
				}
				if (pageNumber) {
					kfp.pageIndex = pageNumber;
				}
				else if (paging) {
					kfp.pageIndex = paging.kalturaFilterPager.pageIndex;
				}
				else {
					kfp.pageIndex = 0;
				}
				
				var ce:ListItemsEvent;
				ce = new ListItemsEvent(ListItemsEvent.LIST_ROLES, model.rolesFilter, kfp);
				ce.dispatch();
			}
			
			
			/**
			 * load users according to paging component value
			 * */
			protected function gotoPage():void {
				listRoles(paging.selectedPage);
			}
			
			
			/**
			 * get the edited user and update server
			 * */
			protected function saveRoleData(e:Event):void {
				var ue:RoleEvent;
				// need to know if new user or update user.
				if (model.drilldownMode == DrilldownMode.ADD) {
					// add user
					ue = new RoleEvent(RoleEvent.ADD_ROLE, _roleDrilldown.role);
				}
				else if (model.drilldownMode == DrilldownMode.EDIT) {
					// edit user
					ue = new RoleEvent(RoleEvent.UPDATE_ROLE, _roleDrilldown.role);
				}
				ue.dispatch();
			}
			
			/**
			 * re-load data, close popup, etc.
			 * */
			protected function onDrilldownStateChange(value:String):void {
				switch (value) {
					case DrilldownMode.ADD:
					case DrilldownMode.EDIT:
						// do nothing
						break;
					case DrilldownMode.NONE:
						// if we got here, data save completed successfuly
						closeRoleDrilldown(null);
						refreshData();
						break;
				}
			}
			
			
			/**
			 * hides and destroys the role drilldown window
			 * */
			protected function closeRoleDrilldown(e:Event):void {
				if (_roleDrilldown) {
					PopUpManager.removePopUp(_roleDrilldown);
					_roleDrilldown.removeEventListener(UserDrilldown.SAVE, saveRoleData);
					_roleDrilldown.removeEventListener(UserDrilldown.CLOSE, closeRoleDrilldown);
					_roleDrilldown.removeEventListener(KmcNavigationEvent.NAVIGATE, onNavigate);
					_roleDrilldown = null;
					var de:DrilldownEvent = new DrilldownEvent(DrilldownEvent.ROLES_SET_STATE, DrilldownMode.NONE);
					de.dispatch();
					dispatchEvent(new GeneralEvent("enableHeader", true));
				}
			}
			
			
			/**
			 * open drilldown window with data of currently selected user
			 * @return the newly created popup window
			 * */
			protected function drillToSelectedRole():RoleDrilldown {
				var ud:RoleDrilldown = new RoleDrilldown();
				ud.init(model.selectedRole, model.drilldownMode, model.partnerPermissionsUiconf, model.partnerPermissions, model.roles);
				ud.addEventListener(RoleDrilldown.SAVE, saveRoleData);
				ud.addEventListener(RoleDrilldown.CLOSE, closeRoleDrilldown);
				ud.addEventListener(KmcNavigationEvent.NAVIGATE, onNavigate);
				PopUpManager.addPopUp(ud, this, true);
				PopUpManager.centerPopUp(ud);
				dispatchEvent(new GeneralEvent("enableHeader", false));
				return ud;
			}
			
			
			/**
			 * show the "add user" dialog
			 * */
			protected function openAddRoleDialog(event:MouseEvent):void {
				// set the selected user to a new KalturaUser.
				var kur:KalturaUserRole = new KalturaUserRole();
				kur.tags = 'kmc';
				kur.permissionNames = 'KMC_ACCESS';
				var ce:CairngormEvent = new RoleEvent(RoleEvent.SELECT_ROLE, kur);
				ce.dispatch();
				
				ce = new DrilldownEvent(DrilldownEvent.ROLES_SET_STATE, DrilldownMode.ADD);
				ce.dispatch();
				
				// open drilldown for this role
				_roleDrilldown = drillToSelectedRole();
			}
			
			
			/**
			 * show the "edit user" dialog
			 * */
			protected function openEditRoleDialog(event:Event):void {
				var ce:DrilldownEvent = new DrilldownEvent(DrilldownEvent.ROLES_SET_STATE, DrilldownMode.EDIT);
				ce.dispatch();
				_roleDrilldown = drillToSelectedRole();
			}
			
			
			/**
			 * duplicate selected role
			 * */
			protected function duplicateRole(event:Event):void {
				var ce:RoleEvent = new RoleEvent(RoleEvent.DUPLICATE_ROLE, model.selectedRole);
				ce.dispatch();
			}
			
			/**
			 * delete selected role
			 * */
			protected function deleteRole(event:Event):void {
				var ce:RoleEvent = new RoleEvent(RoleEvent.DELETE_ROLE, model.selectedRole);
				ce.dispatch();
			}
			
			
			/**
			 * select a role
			 * */
			protected function setSelectedRole(event:Event):void {
				var ce:RoleEvent = new RoleEvent(RoleEvent.SELECT_ROLE, table.selectedRole);
				ce.dispatch();
			}
			
			/**
			 * open drilldown for the selected role.
			 * 
			 * */
			protected function onNewRoleChanged(value:KalturaUserRole):void {
				if (value) {
					openEditRoleDialog(null);
				}
			}
			
			protected function onHelp():void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, 'section45'));
			}
			

		]]>
	</mx:Script>
	<mx:HBox width="100%" >
		<mx:Label text="{ResourceManager.getInstance().getString('admin', 'roles_tab')}" styleName="pageTitle"/>
		<mx:Spacer width="100%" />
		<mx:Button styleName="help" buttonMode="true" click="{onHelp()}"/>
	</mx:HBox>
	<mx:Label text="{ResourceManager.getInstance().getString('admin', 'roles_page_description')}" />
	
	<mx:HBox width="100%" id="superTanker">
		<mx:VBox id="tableContainer" width="100%" styleName="noVGap" height="100%">
			<view:RolesTable id="table" width="100%" dataProvider="{model.roles}" rowCount="10"
							 drillDown="openEditRoleDialog(event)" deleteRole="deleteRole(event)" 
							 duplicateRole="duplicateRole(event)" selectRole="setSelectedRole(event)" sortableColumns="{false}"/>
			<controls:Paging id="paging" width="{table.width}" styleName="paging" nextPage="gotoPage()"
							 prvPage="gotoPage()" getPageNum="gotoPage()" rowsInPageChange="gotoPage()"
							 showRowsInPage="true" totalCount="{model.totalRoles}" />
		</mx:VBox>
		
		<mx:VBox id="actionButtonsContainer" styleName="blueBox" height="100%" horizontalAlign="left">
			<mx:Button id="addBtn" label="{resourceManager.getString('admin','add_role')}" styleName="addPlst" width="100%"
					   height="30" buttonMode="true" click="openAddRoleDialog(event)"/>
		</mx:VBox>
	</mx:HBox>
</mx:VBox>
