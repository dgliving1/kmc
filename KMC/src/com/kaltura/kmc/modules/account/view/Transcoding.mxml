<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 implements="com.kaltura.kmc.modules.account.view.interfaces.IUndoable" width="100%" height="100%"
		 xmlns:csw="com.kaltura.kmc.modules.account.view.windows.conversionsettingswindow.*"
		 creationComplete="creationCompleteHandler(event)">
	<mx:states>
		<mx:State name="advanceModeState">
			<mx:SetProperty target="{titleText}" name="htmlText"
							value="{resourceManager.getString('account', 'transcodingProfiles')}"/>
			<mx:SetProperty target="{introText}" name="text"
							value="{resourceManager.getString('account', 'transcodingSettingsAdvancedModeIntroText')}"/>
		</mx:State>
	</mx:states>

	<mx:Script>
		<![CDATA[
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.kmc.business.PermissionManager;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.modules.account.events.ConversionSettingsEvent;
			import com.kaltura.kmc.modules.account.view.windows.conversionsettingswindow.popupwindows.ConversionProfilePopUpWindow;
			import com.kaltura.kmc.modules.account.vo.ConversionProfileVO;
			import com.kaltura.kmc.modules.account.vo.FlavorVO;
			import com.kaltura.types.KalturaStatsKmcEventType;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;

			[Bindable]
			private var _conversionData:ArrayCollection;

			private var _flavorParamData:ArrayCollection;
			private var _thumbParamData:ArrayCollection;


			public function get thumbParamData():ArrayCollection {
				return _thumbParamData;
			}


			[Bindable]
			public function set thumbParamData(value:ArrayCollection):void {
				_thumbParamData = value;
			}


			[Bindable]
			public function set flavorParamData(value:ArrayCollection):void {
				_flavorParamData = value;
			}


			public function get flavorParamData():ArrayCollection {
				return _flavorParamData;
			}

			[Bindable]
			public var allFlavorsSelected:Boolean = false;


			[Bindable][ArrayElementType("com.kaltura.kmc.modules.account.vo.ConversionProfileVO")]
			public function get conversionData():ArrayCollection {
				return _conversionData;
			}


			public function set conversionData(conversionData:ArrayCollection):void {
				_conversionData = conversionData;
				setData();
			}



			/**
			 * get data
			 * */
			public function init():void {
				var getAllData:ConversionSettingsEvent = new ConversionSettingsEvent(ConversionSettingsEvent.LIST_CONVERSION_PROFILES_AND_FLAVOR_PARAMS);
				getAllData.dispatch();
			}



			private function setData():void {
				for each (var profile:ConversionProfileVO in _conversionData) {
					if (profile.profile.isDefault) {
						simpleTable.cProfile = profile.clone();
					}

					for each (var flavor:FlavorVO in _flavorParamData) {
						flavor.addEventListener(FlavorVO.SELECTED_CHANGED_EVENT, updateFlavorsStatus);
					}
				}

				_flavorParamData.refresh();
			}



			private function updateFlavorsStatus(event:Event):void {
				var numSelected:int = 0;
				for each (var flavor:FlavorVO in _flavorParamData) {
					numSelected += flavor.selected ? 1 : 0;
				}

				allFlavorsSelected = (_flavorParamData.length == numSelected);
			}



			private function onChangeState(event:Event):void {
				currentState = (currentState == null) ? 'advanceModeState' : null;
				viewStack.selectedIndex = (currentState == null) ? 0 : 1;
			}


			private function onOpenNewConversionProfilePopUp(event:Event):void {
				var addNewConversionProfileWindow:ConversionProfilePopUpWindow = new ConversionProfilePopUpWindow();
				addNewConversionProfileWindow.addEventListener(KmcHelpEvent.HELP, dispatchHelp, false, 0, true);
				PopUpManager.addPopUp(addNewConversionProfileWindow, Application.application as DisplayObject, true);
				PopUpManager.centerPopUp(addNewConversionProfileWindow);
			}
			
			private function dispatchHelp(e:KmcHelpEvent):void {
				dispatchEvent(e.clone());
			}


			private function onDeleteConversionProfiles(event:Event):void {
				var selItems:Array = conversionProfilesTable.selectedItems;
				if (selItems.length == 0) {
					Alert.show(resourceManager.getString('account', 'noProfilesSelected'));
				}
				else {
					var delStr:String = "";
					for each (var cp:ConversionProfileVO in selItems) {
						if (!cp.profile.isDefault) {
							delStr += '\n' + cp.profile.name;
						}
					}

					var msg:String = "";
					var title:String = "";
					if (selItems.length == conversionData.length) {
						msg = resourceManager.getString('account', 'deleteAllAlertMsg');
						title = resourceManager.getString('account', 'deleteAllAlertTitle');
					}
					else {
						msg = resourceManager.getString('account', 'deleteAlertMsg') + delStr + " ?";
						title = resourceManager.getString('account', 'deleteAlertTitle');
					}

					Alert.show(msg, title, Alert.YES | Alert.NO, null, responeFnc);
				}
			}


			private function responeFnc(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					var selItems:Array = conversionProfilesTable.selectedItems;
					var ids:Array = new Array();
					for each (var cp:ConversionProfileVO in selItems) {
						if (!cp.profile.isDefault) {
							ids.push(cp.profile.id);
						}
					}

					var deletetProfilesEvent:ConversionSettingsEvent = new ConversionSettingsEvent(ConversionSettingsEvent.DELETE_CONVERSION_PROFILE);
					deletetProfilesEvent.data = ids;
					deletetProfilesEvent.dispatch();
				}
			}


			private function onSaveProfileClick(event:Event):void {
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.ACCOUNT, KalturaStatsKmcEventType.ACCOUNT_SAVE_TRANSCODING_SETTINGS, "Account>Save transcoding Settings");
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.ACCOUNT_SAVE_TRANSCODING_SETTINGS, GoogleAnalyticsConsts.ACCOUNT);

				if (simpleTable.isFlavorsSelected() && (simpleTable.cProfile.profile.flavorParamsIds != null)) {
					var updateProfileEvent:ConversionSettingsEvent = new ConversionSettingsEvent(ConversionSettingsEvent.UPDATE_CONVERSION_PROFILE, false, simpleTable.cProfile);
					updateProfileEvent.dispatch();
				}
				else {
					Alert.show(resourceManager.getString('account', 'oneFlvorSelection'), resourceManager.getString('account', 'missingFlavorTitle'));
				}
			}


			private function help():void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, 'section24'));
			}


			public function isChanged():Boolean {
				return false;
			}


			public function undo():void {
			}


			public function saveChanges():void {
			}


			public function resetClonedData():void {
			}


			protected function creationCompleteHandler(event:FlexEvent):void {
				PermissionManager.getInstance().applyAllAttributes(this, this.id);
			}
		]]>
	</mx:Script>
	<mx:Label styleName="expendableButton" width="100%" id="titleText"
			  htmlText="{resourceManager.getString('account','defaultTranscodingFlavors')}"/>
	<mx:HBox id="hbox1" width="100%" styleName="featureDescriptionTitleBox" verticalAlign="middle" paddingRight="10"
			 horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:Text width="100%" selectable="false" id="introText"
				 htmlText="{resourceManager.getString('account','transcodingSettingsSimpleModeIntroText')}" styleName="pageDescription"/>
	</mx:HBox>

	<mx:ViewStack id="viewStack" width="100%" height="100%" creationPolicy="all">
		<!-- simple mode -->
		<mx:VBox width="100%" verticalGap="0">
			<csw:ConversionSettingsTable id="simpleTable" height="100%"
										 allSelected="{allFlavorsSelected}"
										 dataProvider="{flavorParamData}" thumbParamsData="{thumbParamData}"
										 creationComplete="setData()"/>
			<mx:HBox width="100%" styleName="DataGridActions">
				<mx:VBox width="40%" height="100%" verticalAlign="middle">
					<mx:LinkButton id="advancedModeBtn"
								   label="{resourceManager.getString('account','switchToAdvanceMode')}"
								   click="onChangeState(event)" styleName="switchModesLinkButtonStyle"/>
				</mx:VBox>
				<mx:VBox width="60%" height="100%" verticalAlign="middle">
					<mx:Button id="saveButton" label="{resourceManager.getString('account','saveChangesButton')}"
							   useHandCursor="true" buttonMode="true" click="onSaveProfileClick(event)"/>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>

		<!-- advanced mode -->
		<mx:HBox width="100%" height="100%">
			<mx:VBox id="subVbox" width="100%" height="100%" verticalGap="0" >
				<csw:AdvancedConversionSettingsTable id="conversionProfilesTable" width="100%" height="100%"
													 selectable="true" allowMultipleSelection="true"
													 dataProvider="{conversionData}" />
				<mx:HBox width="100%" styleName="DataGridActions">
					<mx:VBox width="40%" height="100%" verticalAlign="middle">
						<mx:LinkButton id="simpleModeBtn"
									   label="{resourceManager.getString('account','switchToSimpleMode')}"
									   click="onChangeState(event)" styleName="switchModesLinkButtonStyle"/>
					</mx:VBox>
					<mx:VBox width="60%" height="100%" verticalAlign="middle">
						<mx:Button id="deleteProfileBtn" click="onDeleteConversionProfiles(event)"
								   label="{resourceManager.getString('account', 'disabledDeleteButton')}"
								   useHandCursor="true" buttonMode="true"/>
					</mx:VBox>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox id="actionBox" styleName="listActionsBox" height="100%">
				<mx:Button id="addNewProfileBtn"
						   label="{resourceManager.getString('account', 'addNewTranscodingProfileButton')}"
						   useHandCursor="true" buttonMode="true" click='onOpenNewConversionProfilePopUp(event)'
						   styleName="listActionButton"/>
			</mx:VBox>
		</mx:HBox>
	</mx:ViewStack>
</mx:VBox>
