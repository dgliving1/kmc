<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	implements="com.kaltura.kmc.modules.account.view.interfaces.IUndoable" 
	xmlns:charts="com.kaltura.kmc.view.charts.*" xmlns:charts1="com.kaltura.charts.*">
	<mx:Script>
		<![CDATA[
			import com.kaltura.dataStructures.HashMap;
			import com.kaltura.kmc.modules.account.model.AccountModelLocator;
			import com.kaltura.kmc.modules.account.events.UsageGraphEvent;
			import mx.collections.ArrayCollection;
			import com.kaltura.kmc.modules.account.vo.AccountUsageVO;
			import com.kaltura.kmc.modules.account.vo.PackagesVO;
			import mx.controls.Text;
			import mx.effects.easing.Back;
			import com.kaltura.kmc.modules.account.model.types.PartnerStatusType;
			import com.kaltura.kmc.modules.account.model.types.PackageType;
			import mx.events.ItemClickEvent;
			import mx.binding.utils.BindingUtils;
			import com.kaltura.kmc.modules.account.vo.PartnerVO;
			import com.kaltura.kmc.modules.account.events.PartnerEvent;
			
			public static const INT2MONTHS_MAP : Object = { 1:"January", 
												   			2:"February",
															3:"March",
															4:"April",
															5:"May",
															6:"June",
															7:"July",
															8:"August",
															9:"September",
															10:"October",
															11:"November",
															12:"December"
													  };	
													  
			public static const MONTHS2INT_MAP : Object = { "January":1, 
												   			"February":2,
															"March":3,
															"April":4,
															"May":5,
															"June":6,
															"July":7,
															"August":8,
															"September":9,
															"October":10,
															"November":11,
															"December":12
													  };	
													  
			public static const Y_UNITS : String = "mb";
			public static const YEARS : String = "years";
			public static const DAYS : String = "days";
			public static const MONTHS : String = "months";
			
			[Bindable] public var partnerPackage : PackagesVO;
			[Bindable] public var partnerData : PartnerVO;
			[Bindable] public var accountUsageData : AccountUsageVO;
			[Bindable] public var srvParams : Object = null;
			[Bindable] public var getPartnerUsageURL : String = null;
			[Bindable] public var rootUrl : String = "www.kaltura.com";
			
			[Bindable] public var createdYear : uint;
			[Bindable] public var createdMonth : uint;
			[Bindable] public var createdDay : uint;
			
			private var _currentTimeFrame : String = MONTHS;
			private var _currentResolution : String = DAYS;
			
			private var _today : Date = new Date();
			
			private var _selectedYear : String = _today.fullYear.toString();
			private var _selectedMonth : String = String(_today.month + 1);
			
			private var _mText : Text;
			private var _srvParams : Object = null;
			
			private var monthsMap:HashMap = new HashMap();
			
			public function init() : void
			{
				BindingUtils.bindSetter(onPartnerDataLoaded, this, "partnerData");
				BindingUtils.bindSetter(onPackageChange, this, "partnerPackage"); 
				BindingUtils.bindSetter(onAccountUsageDataChanged, this, 'accountUsageData'); 
				
				var partnerEvent : PartnerEvent = new PartnerEvent( PartnerEvent.GET_PARTNER_INFO );
				partnerEvent.dispatch();
			}
			
						
			private function onAccountUsageDataChanged(usageData:AccountUsageVO):void
			{
				onPercentSoFarChange();
				setChartData();
			}
			
			private function setChartData():void
			{
				var points:ArrayCollection = new ArrayCollection();//
			/* 	
		 	    var arr:ArrayCollection = (timeFrameTBB.selectedIndex == 1) ? new ArrayCollection(String("1,123;2,432;3,333;4,44;5,0;6,0;7,443;8,987;9,543;10,0;11,0;12,456;").split(';')) :
					new ArrayCollection(String("1,33;2,566;3,777;4,0;5,546;6,456;7,888;8,0;9,0;10,0;11,0;12,456;13,0;14,11;15,11;16,0;17,555;18,0;19,0;20,0;21,0;22,456;23,0;24,456;25,456;26,0;27,456;28,888;29,456;30,0;31,0;").split(';'));
				  */
		 		var arr:ArrayCollection = new ArrayCollection(accountUsageData.usageSeries.split(';'));
				
				for each(var p:String in arr)
				{
					if(p != '')
					{
						var point:Array = p.split(',');
						points.addItem({Time: ((timeFrameTBB.selectedIndex == 1) ? getMonth(point[0]) : point[0]), Usage: point[1]});
					}
				}
				
				usageCharts.xLabel = cb.selectedLabel;
				usageCharts.chartPoints = points;
			}
			
			private function getMonth(monthCode:String):String
			{
				return INT2MONTHS_MAP[int(monthCode)];
			}
			
			private function onPackageChange( partnerPackage : PackagesVO ) : void
			{
				if(partnerPackage)
				{
					loadData();
				}
			}
			
			private function onPartnerDataLoaded( pvo : PartnerVO ) : void
			{
				if(pvo.pId)
				{
					setCBDataProvider();
					loadData();					
				}
			}
			
			private function onPercentSoFarChange() : void
			{
				//pb.setProgress( kdc.totalPercentSoFar , 100);
				
				if( partnerData.partnerPackage == PackageType.FREE )
				{
					
					totalBWSoFar.text = resourceManager.getString('account','totalUsageSoFar') + ": "+ accountUsageData.totalBWSoFar + " " + resourceManager.getString('account','gb')+ " "  +resourceManager.getString('account','including') + " " + accountUsageData.hostingGB + " " + resourceManager.getString('account','gb') + " "+resourceManager.getString('account','spaceUsed');
					//pb.label = resourceManager.getString('account','usedFreeUsageText',[kdc.totalPercentSoFar]);

					/*if(partnerData.status == PartnerStatusType.LOCKED)
						addMessege( resourceManager.getString('account','locked100FreeHtmlText') );	
					else if( kdc.totalPercentSoFar >= 100) 
						addMessege( resourceManager.getString('account','free100HtmlText') );
					else if( kdc.totalPercentSoFar > 80 )
						addMessege( resourceManager.getString('account','free80HtmlText') );	*/
				}
				else
				{
					
					totalBWSoFar.text = resourceManager.getString('account','totalMonthlyBW')+": "+ accountUsageData.totalBWSoFar + " "+resourceManager.getString('account','gb')+" "+resourceManager.getString('account','including')+" " + accountUsageData.hostingGB + " "+resourceManager.getString('account','gb')+" "+resourceManager.getString('account','spaceUsed');
					//pb.label = resourceManager.getString('account','usedUsageText',[kdc.totalPercentSoFar]);
					
					/*if( kdc.totalPercentSoFar >= 120 )
						addMessege( resourceManager.getString('account','fit120PayingHtmlText', [kdc.totalBWSoFar]) );*/
				}
				
				/*if( kdc.totalPercentSoFar >= 80)
			pb.setStyle('themeColor','red');
				else if(kdc.totalPercentSoFar >= 70)
					pb.setStyle('themeColor','yellow');
				else
					pb.setStyle('themeColor','green');
					
				pb.visible = true;*/
			}
			
			/*private function addMessege( str : String ) : void
			{
				if(!_mText)
				{
					_mText = new Text();
					_mText.addEventListener( TextEvent.LINK , linkHandler );
				}
				
				_mText.percentWidth = 100;
				_mText.htmlText = str;
				
				if( ! this.contains( _mText ) && mainCanvas.contains(totalStats))
					this.addChildAt(_mText , mainCanvas.getChildIndex(totalStats)+1);
			}	*/
			
			 private function linkHandler(linkEvent:TextEvent):void
	        {
	            switch(linkEvent.text)
	            {
	            	case "package": dispatchEvent( new ItemClickEvent(ItemClickEvent.ITEM_CLICK , false , false , null, 2) ); break;
	            }
	        }
			
			public function undo() : void
			{
				
			}
					
			public function isChanged() : Boolean
			{
				return false;
			}
			
			public function saveChanges() : void
			{
				
			}
			
			public function resetClonedData() : void
			{
				
			}
			
			private function onTimeFrameChange() : void
	     	{
	     		switch(timeFrameTBB.selectedIndex)
	     		{
	     			case 0: 
	  //   				this.title = resourceManager.getString('account','monthlyBW');
 						_currentTimeFrame = MONTHS;
	     				_currentResolution = DAYS;
	     			break;
	     			case 1: 
	//     				this.title = resourceManager.getString('account','yearlyBW');
	     				_currentTimeFrame = YEARS;
	     				_currentResolution = MONTHS;
	     			break;
	     		}
	     		
	     		setCBDataProvider();
	     		onCBChange()
	     		loadData();
	     	}
	     	
	     	private function setCBDataProvider() : void
	     	{
	     		var arrColl : ArrayCollection = new ArrayCollection();
		
	     		var years : int = _today.fullYear - partnerData.createdYear; 
		     	var months : int = _today.month + 1 - partnerData.createdMonth; 
		     	var totalMonth : int = months + years * 12; 
		     	
		     	var i:int=0;
		     	
	     		if( _currentTimeFrame == YEARS )
	     		{
		     		for( i=0 ; i <= years ; i++)
		     		{
		     			arrColl.addItem( _today.fullYear - i );
		     		}
	     		}
	     		else if( _currentTimeFrame == MONTHS )
	     		{
	     			var year : uint = _today.fullYear;
	     			var month : uint = _today.month + 1;
		     		
		     		for( i=0 ; i <= totalMonth ; i++)
		     		{
		     			arrColl.addItem( INT2MONTHS_MAP[month] +" "+  year );
		     			if(month>1)
		     				--month;
		     			else
		     			{
		     				month = 12;
		     				--year;
		     			}	
		     		}
	     		}
	     		
	     		cb.dataProvider = arrColl;
	     	}
	     	
	     	private function onCBChange() : void
	     	{
	     		if(cb.selectedItem)
	     		{
		     		if(_currentTimeFrame == MONTHS)
		     		{
			     		var dateArr : Array = cb.selectedItem.split(" ");
			     		_selectedYear = dateArr[1];
				    	_selectedMonth = MONTHS2INT_MAP[dateArr[0]];
		     		}
		     		else if( _currentTimeFrame == YEARS)
		     		{
		     			_selectedYear = cb.selectedItem.toString();
		     		} 
	     		}
	     		
	     		loadData();
	     	}
			
			private function help():void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, resourceManager.getString('account', 'helpUsage') ));
			}
	     	
	     	public function loadData() : void
		    {
		    	_srvParams = new Object();
		        _srvParams.month = _selectedMonth ;
		    	_srvParams.year = _selectedYear;
		    	_srvParams.resolution = _currentResolution;
		    		    	
		    	var usageGraphEvent:UsageGraphEvent = new UsageGraphEvent(UsageGraphEvent.USAGE_GRAPH);
		    	usageGraphEvent.data = _srvParams;
				usageGraphEvent.dispatch();
		    } 
			
		]]>
	</mx:Script> 
	
	<mx:Metadata>
		 [Event(name="itemClick", type="mx.events.ItemClickEvent")]
	</mx:Metadata>
	<mx:Canvas id="mainCanvas" width="100%">
		<mx:Label id="totalBWSoFar" styleName="boldLabel" />
		<mx:Button styleName="help" buttonMode="true" right="5"
			click="{help()}"/>
	</mx:Canvas>	
	
	<mx:HBox width="100%" paddingLeft="20">
		<mx:ToggleButtonBar id="timeFrameTBB" itemClick="onTimeFrameChange()" selectedIndex="0" buttonMode="true">
			<mx:dataProvider>
	            <mx:String>{resourceManager.getString('account','viewMonthly')}</mx:String>
	            <mx:String>{resourceManager.getString('account','viewYearly')}</mx:String>
	        </mx:dataProvider>
		</mx:ToggleButtonBar>
		<mx:ComboBox id="cb" width="140" change="onCBChange()"/>
	</mx:HBox>
	
	<charts:UsageCharts id='usageCharts'/>
		
	
</mx:VBox>
