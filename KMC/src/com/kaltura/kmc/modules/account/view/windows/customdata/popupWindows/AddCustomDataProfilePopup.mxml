<?xml version="1.0" encoding="utf-8"?>


<!---

This popup window is used to add or edit an Custom Data Profile.
Use the 'newProfileState' state for the 'Add New..' action

-->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"		
				xmlns:dataGrid="com.kaltura.kmc.view.dataGrid.*"
				xmlns:customdata="com.kaltura.kmc.modules.account.view.windows.customdata.*"
				title="{resourceManager.getString('account', 'editMetadataSchema')}" showCloseButton="true"
				close="{onCloseBtn()}" layout="vertical" creationComplete="{onCreationComplete()}"
				width="950" height="550"
				styleName="TitleWindowType2"
				backgroundColor="#f7f7f7"
				verticalScrollPolicy="off">
	
	<mx:states>
		
		<mx:State name="newProfileState">
			<mx:SetProperty name="title" value="{resourceManager.getString('account', 'newMetadataSchema')}"/>
		</mx:State>
	</mx:states>


	
	<mx:Script>
		<![CDATA[
			import com.kaltura.kmc.business.PermissionManager;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.modules.account.events.AddMetadataFieldEvent;
			import com.kaltura.kmc.modules.account.events.MetadataFieldEvent;
			import com.kaltura.kmc.modules.account.events.MetadataProfileEvent;
			import com.kaltura.vo.KMCMetadataProfileVO;
			import com.kaltura.vo.MetadataFieldVO;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.validators.ValidationResult;
			
			import org.flexunit.internals.namespaces.classInternal;
			
			
			// events const
			public static const SAVE_UPDATED_PROFILE:String = "saveUpdatedProfile";
			public static const SAVE_NEW_PROFILE:String = "saveNewProfile";

			private const maxNameLength:int = 31;
			
			/**
			 *  the metadataProfile to add ot edit
			 */
			[Bindable]
			private var _metadataProfile:KMCMetadataProfileVO;
			private var _originalProfile:KMCMetadataProfileVO;
			
			/**
			 * get the accessControlProfile(acp)
			 */
			[Bindable]
			public function get metadataProfile():KMCMetadataProfileVO {
				return _metadataProfile
			}
			
			
			/**
			 * set the metadataProfile
			 */
			public function set metadataProfile(metadataProfile:KMCMetadataProfileVO):void {
				_metadataProfile = metadataProfile;
				//saves original metadata
				_originalProfile = new KMCMetadataProfileVO();
				if (_metadataProfile.xsd && _metadataProfile.metadataFieldVOArray.length) {
					_originalProfile.xsd = _metadataProfile.xsd.copy();
					_originalProfile.metadataFieldVOArray = new ArrayCollection();
					for each (var field:MetadataFieldVO in _metadataProfile.metadataFieldVOArray) {
						var newField:MetadataFieldVO = field.Clone();
						_originalProfile.metadataFieldVOArray.addItem(newField);
					}	
				}
			}
			
			
			/**
			 * creation complete of the main window
			 */
			private function onCreationComplete():void {
				this.mx_internal::closeButton.buttonMode = true;
				//edit state
				if (currentState == null)
					PermissionManager.getInstance().applyAllAttributes(this, "addCustomDataProfilePopup_edit");
				//add new state
				else
					PermissionManager.getInstance().applyAllAttributes(this, "addCustomDataProfilePopup_add");
			}
	
			/**
			 * close window event - when pressing the X button, or after saving the data
			 */
			private function closeWindow():void {	
				PopUpManager.removePopUp(this);
			}
			
			private function onCloseBtn():void {
				if (_metadataProfile && _metadataProfile.metadataProfileChanged) {
					Alert.show(resourceManager.getString('account','discardChanges'),resourceManager.getString('account','discardChangesTitle'),Alert.YES | Alert.NO,null,handleCloseEvent);
				}
				else
					closeWindow();
			}
			
			private function handleCloseEvent(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					undoChanges();
					closeWindow();
				}
				
			}
			
			public function saveChanges():void {
				nameValidator.source = profileNameTi;
				var vre:ValidationResultEvent = nameValidator.validate();
				if (vre.results != null && vre.results.length > 0) {
					if ((vre.results[0] as ValidationResult).isError)
						return;
				}
				
				if (!_metadataProfile.xsd) {
					Alert.show(resourceManager.getString('account','metadataAtLeastOneField'), resourceManager.getString('account','metadataInvalidInput'));
					return;
				}
				
				if (! metadataProfile.isNewProfile) {
//					var updateMetadataProfile:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.UPDATE);
//					updateMetadataProfile.dispatch();
					if (metadataProfile.metadataProfileReordered){
						Alert.show(resourceManager.getString('account', 'metadataReorderWarning'), resourceManager.getString('account', 'metadataReorderWarningTitle'),  Alert.YES | Alert.NO, null, updateSchemaAfterApproval);
					} else {
						updateSchemaAfterApproval();
					}
				}
				else {
					var addMetadataProfile:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.ADD);
					addMetadataProfile.dispatch();
					closeWindow();
				}
			}
			
			private function updateSchemaAfterApproval(evt:CloseEvent = null):void{
				if (evt == null || evt.detail == Alert.YES){
					var updateMetadataProfile:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.UPDATE);
					updateMetadataProfile.dispatch();
					closeWindow();
				}
			}
			
			
			private function undoChanges():void {
				if (_originalProfile.xsd && _originalProfile.metadataFieldVOArray.length) {
					_metadataProfile.xsd = _originalProfile.xsd.copy();
					_metadataProfile.metadataFieldVOArray = new ArrayCollection();
					for each (var field:MetadataFieldVO in _originalProfile.metadataFieldVOArray) {
						var newField:MetadataFieldVO = field.Clone();
						_metadataProfile.metadataFieldVOArray.addItem(newField);
					}
				}
				else {
					_metadataProfile.xsd = null;
					_metadataProfile.metadataFieldVOArray = new ArrayCollection();
				}
				
				_metadataProfile.metadataProfileChanged = false;
			}
			
			/**
			 * On click on the "add" button a popup will be opened.
			 * @param event
			 *
			 */
			private function openAddFieldPopup(event:Event):void {
				var addCustomFieldPopup:CustomDataAddEditPopup = new CustomDataAddEditPopup();
				addCustomFieldPopup.metadataProfile = _metadataProfile;
				addCustomFieldPopup.addEventListener(AddMetadataFieldEvent.ADD, addNewFieldHandler);
				addCustomFieldPopup.addEventListener(KmcHelpEvent.HELP, dispatchHelp, false, 0, true);
				PopUpManager.addPopUp(addCustomFieldPopup, Application.application as DisplayObject, true);
				PopUpManager.centerPopUp(addCustomFieldPopup);
			}
			
			private function dispatchHelp(e:KmcHelpEvent):void {
				dispatchEvent(e.clone());
			}
			
			/**
			 * When saving a new field, this handler will be called
			 * @param event
			 *
			 */
			private function addNewFieldHandler(event:AddMetadataFieldEvent):void {
				_metadataProfile.metadataFieldVOArray.addItem(event.metadataField);
				var addMetadataField:MetadataFieldEvent = new MetadataFieldEvent(MetadataFieldEvent.ADD, event.metadataField);
				addMetadataField.dispatch();
				
			}
			
			private function onNameChanged(event:Event) : void {
				_metadataProfile.profile.name = profileNameTi.text;
				_metadataProfile.metadataProfileChanged = true;
			}
			
			private function onDescriptionChanged(event:Event) : void {
				_metadataProfile.profile.description = descriptionTi.text;
				_metadataProfile.metadataProfileChanged = true;
			}
			
			private function downloadXSD():void {
				var urlRequest:URLRequest = new URLRequest(metadataProfile.downloadUrl);
				navigateToURL(urlRequest , '_self');
			}
			
			
			
			
		]]>
	</mx:Script>
	
	<mx:Metadata>
		[Event(name="saveUpdatedProfile", type="mx.events.Event")]
		[Event(name="saveNewProfile", type="mx.events.Event")]
	</mx:Metadata>
	
	<mx:StringValidator id="nameValidator" property="text"
						required="true" requiredFieldError="{resourceManager.getString('account', 'profileNameErrorMsg')}"
						maxLength="{maxNameLength}" tooLongError="{resourceManager.getString('account','metadataProfileTooLongName')}"/>
	
	
	<mx:VBox verticalScrollPolicy="off" horizontalScrollPolicy="off" height="100%" width="100%"
			 styleName="acpPopUpMainVBox">
		<mx:HBox width="100%">
				<mx:Label text="{resourceManager.getString('account', 'profileName')}" width="80"/>
				<mx:TextInput id='profileNameTi' width="100%" change="{onNameChanged(event)}"
							  text="{metadataProfile.profile.name}"/>		
		</mx:HBox>
		<mx:HBox width="100%">
				<mx:Label text="{resourceManager.getString('account', 'profileDescription')}" width="80"/>
				<mx:TextInput id='descriptionTi' width="100%" text="{metadataProfile.profile.description}"
							  change="{onDescriptionChanged(event)}"/>		
		</mx:HBox>
		<mx:LinkButton id="downloadXSDBtn" paddingLeft="0" label="{resourceManager.getString('account', 'downloadSchema')}" click="downloadXSD()"/>
		<mx:HBox id="fieldsTableBox" width="100%" height="100%" styleName="tablePagerAndButtonsBarBox">
			<mx:VBox width="100%" height="100%" id='tableContainer' styleName="tableAndPagerContainerStyle"
					 horizontalAlign="center">
				<mx:HBox width="100%" height="100%">
					<customdata:CustomDataFieldsTable id="customFieldsTable"
											   dataProvider="{_metadataProfile.metadataFieldVOArray}" metadataProfile="{_metadataProfile}"/>
					<mx:VBox id='actionBox' 
							 height="100%" styleName="listActionsBox">
						<mx:Button id="addFieldButton" label="{resourceManager.getString('account', 'customFieldsAddField')}" useHandCursor="true"
								   buttonMode="true" click="openAddFieldPopup(event)" styleName="listActionButton"/>
					</mx:VBox>
				</mx:HBox>
			</mx:VBox>
		</mx:HBox>
	
		
	</mx:VBox>
	<mx:ControlBar>
		<mx:Button id="saveChangesBtn" label="{resourceManager.getString('account','saveChanges')}" 
				   useHandCursor="true" buttonMode="true" click="saveChanges()"/>
	</mx:ControlBar>
</mx:TitleWindow>
