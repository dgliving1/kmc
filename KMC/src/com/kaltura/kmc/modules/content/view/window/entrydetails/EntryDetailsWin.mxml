<?xml version="1.0" encoding="utf-8"?>
<!---
	 entry drill-down screen.
-->
<containers:HelpTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:containers="com.kaltura.containers.*" 
			height="545" width="930" layout="horizontal" horizontalScrollPolicy="off" paddingTop="18"
			showCloseButton="true" close="{onClose()}" help="{onHelp()}"
			xmlns:view="com.kaltura.kmc.modules.content.view.*" xmlns:controls="com.kaltura.controls.*"
			xmlns:navigation="com.kaltura.kmc.modules.content.view.navigation.*"
			xmlns:ed="com.kaltura.kmc.modules.content.view.window.entrydetails.*"
			xmlns:adobe="http://www.adobe.com/2006/fc" 
			creationComplete="{onWindowCreationComplete()}">
	<!--enabled="{!entryDetailsModel.loadingFlag}"-->
	<mx:Script>
		<![CDATA[
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.kmc.business.JSGate;
			import com.kaltura.kmc.business.PermissionManager;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.modules.content.business.Cloner;
			import com.kaltura.kmc.modules.content.business.IDrilldownPanel;
			import com.kaltura.kmc.modules.content.events.EntriesEvent;
			import com.kaltura.kmc.modules.content.events.EntryEvent;
			import com.kaltura.kmc.modules.content.events.MediaEvent;
			import com.kaltura.kmc.modules.content.events.ScrollToProfileEvent;
			import com.kaltura.kmc.modules.content.events.SetRefreshRequiredEvent;
			import com.kaltura.kmc.modules.content.events.WindowEvent;
			import com.kaltura.kmc.modules.content.model.Context;
			import com.kaltura.kmc.modules.content.model.DropFolderModel;
			import com.kaltura.kmc.modules.content.model.EntryDetailsModel;
			import com.kaltura.kmc.modules.content.model.FilterModel;
			import com.kaltura.kmc.modules.content.utils.FormBuilder;
			import com.kaltura.kmc.modules.content.utils.MetadataDataParser;
			import com.kaltura.kmc.modules.content.view.window.entrydetails.customDataComponents.SingleCustomData;
			import com.kaltura.kmc.modules.content.vo.EntryDetailsValidationError;
			import com.kaltura.kmc.modules.content.vo.EntryMetadataDataVO;
			import com.kaltura.kmc.modules.content.vo.FlavorAssetWithParamsVO;
			import com.kaltura.types.KalturaEntryStatus;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.utils.ObjectUtil;
			import com.kaltura.utils.SoManager;
			import com.kaltura.vo.KMCMetadataProfileVO;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaFlavorAsset;
			import com.kaltura.vo.KalturaLiveStreamAdminEntry;
			import com.kaltura.vo.KalturaMediaEntry;
			import com.kaltura.vo.KalturaMixEntry;
			import com.kaltura.vo.KalturaPlaylist;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.containers.HBox;
			import mx.controls.Alert;
			import mx.controls.LinkButton;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.resources.ResourceManager;
			
			
			private var _entryWatcher:ChangeWatcher;

			[Bindable]
			/**
			 * copy of the selected entry.
			 * we work on this instead of the actual selected entry
			 * (model.selectedEntry) so we can easily revert if needed.
			 * */
			private var _undoToEntry:KalturaBaseEntry;
			
			private var _selectedEntry:KalturaBaseEntry;
			
			[Bindable]
			/**
			 * indicates the current entry is a livestream entry
			 * */
			private var _isLiveStream:Boolean;

			private var _maxNumCategories : int;
			
			[Bindable]
			/**
			 * landingPage of current partner
			 * */
			public var landingPage:String;
			
			/**
			 * if somthing that we can't track changes happen
			 * (like mix created) we need to refresh entires table after save.
			 * */
			private var _untrackableChangeFlag:Boolean = false;


			[Bindable]
			/**
			 * entry details window data
			 * */
			public var entryDetailsModel:EntryDetailsModel;
			[Bindable]
			/**
			 * drop folders data
			 * */
			public var dropFolderModel:DropFolderModel;

			[Bindable]
			/**
			 * filter data
			 * */
			public var filterModel:FilterModel;

			[Bindable]
			/**
			 * application context
			 * */
			public var context:Context;

			/**
			 * this js function will be triggered to show preview
			 * */
			public var openPlayerFunc:String;
			
			
			[Bindable]
			/**
			 * show embed option on drilldown
			 * */
			public var showEmbedCode:Boolean = true;
			
			/**
			 * creation of new entry / edit of existing one
			 * */
			public var isNewEntry:Boolean = true;
			
			/**
			 * a watcher for binding this.enabled to model.loadingFlag
			 * once only.
			 * */
			private var _enabledWatcher:ChangeWatcher;
			
			[Bindable]
			/**
			 * whether there was first navigation: meaning init data was loaded, so we can enable tln
			 * */
			private var _hadFirstNavigation:Boolean = false;
			
			/**
			 * contains list of the tabs that will be visible
			 * */
			private var _visibleTabsAC:ArrayCollection;
			
			/**
			 * whether we should load roughcuts
			 * */
			public var loadRoughcuts:Boolean = true;
			
			private var _isReady:Boolean = false;
			private var _dataInitialized:Boolean = false;

			/**
			 * The entry to refer to in the current window. if not send, will refer to entryDetailsModel.selectedEntry
			 * */
			public function get selectedEntry():KalturaBaseEntry
			{
				return _selectedEntry;
			}

			[Bindable]
			/**
			 * @private
			 */
			public function set selectedEntry(value:KalturaBaseEntry):void
			{
				_selectedEntry = value;
				_undoToEntry = createWorkingCopy(_selectedEntry);
				setWindowTitle();
			}

			public function get visibleTabsAC():ArrayCollection
			{
				return _visibleTabsAC;
			}

			public function set visibleTabsAC(value:ArrayCollection):void
			{
				_visibleTabsAC = value;
				if (_isReady)
					setVisibleTabs();
			}

			private function onHelp():void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, 'section12'));
			}
			


			/**
			 * reorder tabs and show only relevant tabs for normal (not mix) entries
			 * */
			private function showNormalSetup():void {
				viewStack.removeChild(liveStream);
			
				// for mix/content tab, show "mixesTab" header
				contentTab.label = ResourceManager.getInstance().getString('cms', 'mixesTab');
				
			}
			
			/**
			 * removes given tabs
			 * */
			private function setViewPerEntryType(tabsToRemove:Array):void {
				for each (var tab:DisplayObject in tabsToRemove) {
					if (tab.parent is ViewStack)
						viewStack.removeChild(tab);
				}
			}


			/**
			 * reorder tabs and show only relevant tabs for mix entries
			 * */
			private function showMixSetup():void {
				viewStack.removeChild(entryAssets);
				viewStack.removeChild(liveStream);
		
				// for mix/content tab, show "mixesTab" header
				contentTab.label = ResourceManager.getInstance().getString('cms', 'content');
			}


			/**
			 * reorder tabs and show only relevant tabs for live Entries
			 * */
			private function showLiveStreamSetup():void {
				viewStack.removeChild(entryAssets);
				viewStack.removeChild(contentTab);

			}


			/**
			 * save a working copy of the selected entry
			 * @return a copy entry
			 * */
			private function createWorkingCopy(entry:KalturaBaseEntry):KalturaBaseEntry {
				var copy:KalturaBaseEntry;

				if (entry is KalturaPlaylist) {
					copy = Cloner.cloneKalturaPlaylist(entry as KalturaPlaylist);
				}
				else if (entry is KalturaMixEntry) {
					copy = Cloner.cloneKalturaMixEntry(entry as KalturaMixEntry);
					// mixes:
					//partsTable.text = resourceManager.getString('cms', 'parts');
				}
				else if (entry is KalturaLiveStreamAdminEntry) {
					copy = Cloner.cloneKalturaStreamAdminEntry(entry as KalturaLiveStreamAdminEntry);
				}
				else if (entry is KalturaMediaEntry) {
					copy = Cloner.cloneKalturaMediaEntry(entry as KalturaMediaEntry);
				}
				return copy;
			}
			
			/**
			 * sets the window title, if entry doesn't have content and title yet,
			 * will set the title according to its type
			 * */
			private function setWindowTitle():void {
				if (_undoToEntry.status == KalturaEntryStatus.NO_CONTENT) {
					if (_undoToEntry.name) {
						 title = _undoToEntry.name;
					}
					else {
						var mediaType:int = parseInt(_undoToEntry.mediaType);
						switch (mediaType) {
							case KalturaMediaType.IMAGE:
								title = resourceManager.getString('cms', 'newImageEntry');
								break;
							case KalturaMediaType.AUDIO:
								title = resourceManager.getString('cms', 'newAudioEntry');
								break;
							case KalturaMediaType.VIDEO:
								title = resourceManager.getString('cms', 'newVideoEntry');
								break;
						}
					}
				}
				else {
					title = resourceManager.getString('cms','editEntry') +  ' - ' ;
					if (_undoToEntry.replacedEntryId) 
						title += entryDetailsModel.replacedEntryName + ' (' + resourceManager.getString('cms','assetReplacement') + ')';
					else
						title +=  _undoToEntry.name;
				}
			}

			private function onWindowCreationComplete():void {
			
				if (!selectedEntry) {
					if (!_entryWatcher)
						_entryWatcher = BindingUtils.bindProperty(this, "selectedEntry", entryDetailsModel, "selectedEntry");
				}
					// selectedEntry = entryDetailsModel.selectedEntry;

				
				if (_undoToEntry is KalturaLiveStreamAdminEntry) {
					_isLiveStream = true;
				}
				
				// mixes:
				/* if (!_undoToEntry is KalturaMixEntry) {
				partsTable.text = resourceManager.getString('cms', 'usageInMixes');
				} */
				
				
				// show correct panels according to entry type
				// live entry
				if (_isLiveStream) {
					showLiveStreamSetup();
				}
				else if (selectedEntry is KalturaMixEntry) {
					//this is a mix
					showMixSetup();
				}
				else {
					// this entry is a regular video/image/audio
					showNormalSetup();
					//remove redundant tabs in image and audio cases
					if (int(selectedEntry.mediaType) == KalturaMediaType.IMAGE) {
						setViewPerEntryType(new Array(entryThumbnails, entryAssets, entryDistribution));
					}
					else if (int(selectedEntry.mediaType) == KalturaMediaType.AUDIO) {
						setViewPerEntryType(new Array(entryDistribution));
					}
				}
				
				loadEntries();
				
				// roles and permissions 
				PermissionManager.getInstance().applyAllAttributes(this, "entryDrilldown");
				var tabsToHide:Array = PermissionManager.getInstance().getRelevantSubTabsToHide("entryDrilldown");
				for each (var subtabName:String in tabsToHide) {
					if (viewStack.getChildByName(subtabName)) {
						viewStack.removeChild(this[subtabName]);
					}
				}
				//adds custom data profiles
				if (customData.parent is ViewStack) {			
					if (filterModel.enableCustomData) {
						if (filterModel.metadataProfiles && filterModel.metadataProfiles.length>0) {
							entryDetailsModel.metadataInfoArray = new ArrayCollection();
							customData.buildProfiles(filterModel.metadataProfiles, filterModel.formBuilders);					
						}
					}
					//if none of the profiles contain fields (the only child is the navigation hbox)
					if (customData.numChildren < 2)
						viewStack.removeChild(customData);
				}
					
				_isReady = true;
				if (_visibleTabsAC)
					setVisibleTabs();
				else
					initTabs();
				
				if (viewStack.getChildByName('entryMetaData'))
					entryMetaData.init();
			}

			/**
			 * set screen contents according to data
			 * */
			public function init():void {
//				loadEntries();
//				PopUpManager.centerPopUp(this);
				
//				dtn.visible = true;
//				visible = true;
			}


			/**
			 * ask JS to open the preview player, log the action to analytics
			 * */
			private function openPreview(e:Event):void {
				if (openPlayerFunc) {
					
					var html5Compatible : Boolean = (_undoToEntry is KalturaMediaEntry && (_undoToEntry as KalturaMediaEntry).mediaType == KalturaMediaType.VIDEO) ? true: false;
					JSGate.doPreviewEmbed(openPlayerFunc, _undoToEntry.id, _undoToEntry.name, cutTo512Chars(_undoToEntry.description), !showEmbedCode, false, null, null, hasMobileFlavors(), html5Compatible );
				}
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_OPEN_PREVIEW_AND_EMBED, GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_OPEN_PREVIEW_AND_EMBED, "content>Open Preview and Embed");

				//First time funnel
				if (!SoManager.getInstance().checkOrFlush(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED))
					GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED, GoogleAnalyticsConsts.CONTENT);
			}
			
			/**
			 * does the current entry have mobile flavors?
			 * */
			private function hasMobileFlavors():Boolean {
				var result:Boolean = false;
				var fa:KalturaFlavorAsset;
				if(entryDetailsModel.flavorParamsAndAssetsByEntryId && entryDetailsModel.flavorParamsAndAssetsByEntryId.length)
				{
					for each (var kawp:FlavorAssetWithParamsVO in entryDetailsModel.flavorParamsAndAssetsByEntryId) {
						fa = kawp.kalturaFlavorAssetWithParams.flavorAsset; 
						if (fa && fa.tags)
						{
							if(fa.tags.indexOf('iphone') > -1 ){
								result = true;
								break;
							};
							if(fa.tags.indexOf('ipad') > -1 ){
								result = true; 
								break;
							};
							if(fa.fileExt == 'ogg' || fa.fileExt == 'ogv' || fa.fileExt == 'oga'){
								result = true;
								break;
							};
							if(fa.fileExt == '3gp') {
								result = true;
								break;
							};
							if(fa.tags.indexOf('applembr') > -1 ){
								result = true;
								break;
							};
						}
					}
				}
				return result;

			}


			/**
			 * load all mix entries or load mixes that uses this entry if it is not a mix
			 */
			private function loadEntries():void {
				if (_undoToEntry is KalturaMixEntry) {
					//get all mix entries
					var cgEvent:EntryEvent = new EntryEvent(EntryEvent.GET_ALL_ENTRIES, selectedEntry);
					cgEvent.dispatch();
				}
				else if (loadRoughcuts && !_isLiveStream) {
					//get all entries that uses this mix 
					var getRoughcuts:EntryEvent = new EntryEvent(EntryEvent.GET_ENTRY_ROUGHCUTS, selectedEntry);
					getRoughcuts.dispatch();
				}

			}


			private function onPaging():void {
				loadEntries();
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_GO_TO_PAGE, GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE, "content>Show Rows");
			}

			/**
			 * will save the entry if needed, or delete it if user selected not to save
			 * */
			private function newEntryQuestionHandler(event:CloseEvent) : void {
				if (event.detail == Alert.YES) {
					if (checkDataChanged())
						save();
					//a new entry was added so we should refresh
					var setRefresh:SetRefreshRequiredEvent = new SetRefreshRequiredEvent(SetRefreshRequiredEvent.SET_REFRESH_REQUIRED, true);
					setRefresh.dispatch();
				}
				else {
					var deleteEntryEvent:EntryEvent = new EntryEvent(EntryEvent.DELETE_ENTRY, _undoToEntry, _undoToEntry.id);
					deleteEntryEvent.dispatch();
				}
				
				removeMe();
			}

			/**
			 * "x" button clicked - see if need save or just close.
			 * */
			private function onClose():void {
				if (isNewEntry) {
					Alert.show(resourceManager.getString('cms','saveNoMediaEntryQ'), resourceManager.getString('cms','save'), Alert.YES | Alert.NO, null, newEntryQuestionHandler);
				}
				else {
					if (checkDataChanged()) {
						// had change, ask for save
						Alert.show(resourceManager.getString('cms', 'undoEntryDetails'), resourceManager.getString('cms', 'undoEntryDetailsTitle'), Alert.YES | Alert.NO, null, removeMe);
					}
					else {
						
						// remove window
						removeMe();
					}
				}
		
			}


			/**
			 * checks if any data has changed. returns true if entry was changed, otherwise false
			 * */
			private function checkDataChanged():Boolean {
				var metadataChanged:Boolean = false;
				if (filterModel.enableCustomData && filterModel.metadataProfiles && entryDetailsModel.metadataInfoArray && entryDetailsModel.metadataInfoArray.length) {
					for (var i:int = 0; i< filterModel.metadataProfiles.length; i++) {
						var metadataInfo:EntryMetadataDataVO = entryDetailsModel.metadataInfoArray.getItemAt(i) as EntryMetadataDataVO;
						var metadataProfile:KMCMetadataProfileVO = filterModel.metadataProfiles.getItemAt(i) as KMCMetadataProfileVO;
						
						if (metadataProfile && metadataProfile.profile && metadataInfo) {
							var newMetadataXML:XML = MetadataDataParser.toMetadataXML(metadataInfo.metadataDataObject, metadataProfile);
							if (metadataInfo.metadata) {
								var originalMetadataXML:XML = new XML(metadataInfo.metadata.xml);
								if (!(MetadataDataParser.compareMetadata(newMetadataXML, originalMetadataXML))) {
									metadataChanged = true;
								}
							}
								//new metadata was inserted
							else if (newMetadataXML.children().length() > 0) {
								metadataChanged = true;
							}
						}
					}
				}
				
				return (!ObjectUtil.compareObjects(selectedEntry, _undoToEntry) || metadataChanged)
			}
			
			/**
			 * 
			 * */
			private function removeMe(event:CloseEvent = null):void {
				//if a mix was created or anything that isn't trackable do save so it
				//will be refreshed
				if (_untrackableChangeFlag) {
					//so we won't have infinate loop
					_untrackableChangeFlag = false;
					save();
					//TODO why save? we just need to refresh the entries list.
					return;
				}
				///////////////////////////////////////////////////////////

				if ((event == null || event.detail == Alert.YES)) {
					_undoToEntry = null;
					entryMetaData.clearPlayer();
					removeWatchers();
	
					var cgEvent:WindowEvent = new WindowEvent(WindowEvent.CLOSE);
					cgEvent.dispatch();
				}
			}

			/**
			 * to fix performance bug: remove all metadata view watchers
			 * */
			private function removeWatchers():void {
				if (customData) {
					//first child is navigation hbox
					for (var i:int = 1; i<customData.numChildren; i++) {
						var innerCustomData:SingleCustomData = customData.getChildAt(i) as SingleCustomData;
						if (innerCustomData && innerCustomData.metadataViewWatcher)
							innerCustomData.metadataViewWatcher.unwatch();
					}
				}
				//flavors watchers
				if (entryAssets && entryAssets.flavorsWatcher) {
						entryAssets.flavorsWatcher.unwatch();
				}
				
				if (_enabledWatcher) {
					_enabledWatcher.unwatch();
				}
				if (_entryWatcher) {
					_entryWatcher.unwatch();
				}
			}


			/**
			 * validate all panels, if validation is ok update server.
			 * */
			private function save():void {
				// validation:
				var validationResult:EntryDetailsValidationError = entryMetaData.save();
				if (validationResult.error == null) {
					// metadata validation passed.
					validationResult = entrySch.save();
					if (validationResult.error == null) {
						// scheduling validation passed.
						if (_isLiveStream) {
							validationResult = liveStream.save();
						}
					}
				}

				if (validationResult.error == EntryDetailsValidationError.ENTRY_NAME_MISSING) {
					// Atar: need to alert no name? there's validation on the TF itself 
				}
				else if (validationResult.error == EntryDetailsValidationError.CATEGORIES_LIMIT) {
					Alert.show(resourceManager.getString('cms', 'categoriesLimitErrorMsg',[]), resourceManager.getString('cms', 'categoriesErrorTitle'));
				}
				// scheduling validation:
				else if (validationResult.error == EntryDetailsValidationError.SCHEDULING_START_DATE) {
					Alert.show(resourceManager.getString('cms', 'scedualingStartDateError'), resourceManager.getString('cms', 'scedualingErrorTitle'));
				}
				else if (validationResult.error == EntryDetailsValidationError.SCHEDULING_END_DATE) {
					Alert.show(resourceManager.getString('cms', 'scedualingEndDateError'), resourceManager.getString('cms', 'scedualingErrorTitle'));
				}
				// livestream validation:
				else if (validationResult.error == EntryDetailsValidationError.BITRATE) {
					Alert.show(ResourceManager.getInstance().getString('cms', 'bitrateValidation'));
				}
				else {
					// if we got here, all panels validation passed ok, the error was null.	
					var cgEvent:EntriesEvent = new EntriesEvent(EntriesEvent.UPDATE_ENTRIES, new ArrayCollection([_undoToEntry]));
					cgEvent.dispatch();	

					removeWatchers();
					
					KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_EDIT_ENTRY, "EditedtDrillDown", _undoToEntry.id);
					GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_EDIT_ENTRY + ">entryID>" + _undoToEntry.id, GoogleAnalyticsConsts.CONTENT);
//					removeMe();

				}
			}


			private function removeColums(event:Event):void {
				event.target.removeColumn(resourceManager.getString('cms', 'preview'));
				event.target.removeColumn(resourceManager.getString('cms', 'idHeader'));
				event.target.removeColumn(resourceManager.getString('cms', 'mediaType'));
				event.target.removeColumn(resourceManager.getString('cms', 'playlistType'));
				event.target.removeColumn(resourceManager.getString('cms', 'flags'));
				event.target.removeColumn(resourceManager.getString('cms', 'moderationStatus'));
				event.target.removeColumn(resourceManager.getString('cms', 'creator'));
				event.target.removeColumn(resourceManager.getString('cms', 'rating'));
				event.target.removeColumn(resourceManager.getString('cms', 'playerLoads'));
			}


			/**
			 * Check if a string is longer than 512. if it is it will cut it and add ...
			 */
			private function cutTo512Chars(str:String):String {
				if (!str)
					return "";
				if (str.length >= 509) {
					var tmp:String = str.substr(0, 509);
					var words:Array = tmp.split(" ");
					words.pop();
					tmp = words.join(" ");
					return tmp + "...";
				}
				return str;
			}


			/**
			 * Translate the status enum type to matching status string
			 */
			public function getStatusString(str:String):String {
				var result:String;
				switch (str) {
					case KalturaEntryStatus.MODERATE:
						result = resourceManager.getString('cms', 'metadata');
						break;
					case KalturaEntryStatus.BLOCKED:
						result = resourceManager.getString('cms', 'metadata');
						break;
					case KalturaEntryStatus.DELETED:
						result = resourceManager.getString('cms', 'metadata');
						break;
					case KalturaEntryStatus.ERROR_CONVERTING:
						result = resourceManager.getString('cms', 'statuserrorconverting');
						break;
					case KalturaEntryStatus.IMPORT:
						result = resourceManager.getString('cms', 'import');
						break;
					case KalturaEntryStatus.PENDING:
						result = resourceManager.getString('cms', 'metadata');
						break;
					case KalturaEntryStatus.PRECONVERT:
						result = resourceManager.getString('cms', 'metadata');
						break;
					case KalturaEntryStatus.READY:
						result = resourceManager.getString('cms', 'metadata');
						break;
				}
				return result;
			};


			/**
			 * sets the untrackable change flag to true
			 * */
			private function setUntrackableChange():void {
				_untrackableChangeFlag = true;
			}
			
			
			private function onChangeView():void {
				entryMetaData.pausePreview();
				_hadFirstNavigation = true;
				// all data for entry metadata is loaded before the window opens.
				// other panels need data that is loaded when the panel opens, so 
				// we disable them until data is loaded.
				if (viewStack.selectedChild != entryMetaData) {
					if (entryDetailsModel.loadingFlag) {
						this.enabled = false;
						if (!_enabledWatcher) {
							_enabledWatcher = BindingUtils.bindSetter(setEnabledByLoadingFlag, entryDetailsModel, "loadingFlag");
						}
					}
				}
			}
			
			private function setEnabledByLoadingFlag(val:Boolean):void {
				this.enabled = !val;
			}
			
			
			/**
			 * list of tabs to remove from the drilldown window, separated by ",".
			 * */
			public function set hideTabs(tabs:String):void {
				var tabsList:Array = tabs.split(",");
				var l:int = tabsList.length;
				var tab:DisplayObject;
				for (var i:int = 0; i<l; i++) {
					tab = viewStack.getChildByName(tabsList[i]);
					if (tab) {
						viewStack.removeChild(tab);
					}
				}
			}
			
			
			/**
			 * @private
			 * need the getter because applyPermission reads 
			 * the hideTabs value before it sets it.
			 * */
			public function get hideTabs():String {
				return '';
			}
	
			[Bindable]
			public function get maxNumCategories():int
			{
				return _maxNumCategories;
			}

			public function set maxNumCategories(value:int):void
			{
				_maxNumCategories = value;
			}
			
			/**
			 * removes all tabs that their ID doesn't appear in the given array collection
			 * */
			private function setVisibleTabs():void {
				for (var i:int = viewStack.numChildren-1; i>=0; i--)
				{
					var child:UIComponent = viewStack.getChildAt(i) as UIComponent;
					if (!_visibleTabsAC.contains(child.id))
						viewStack.removeChild(child);
				}
				initTabs();
			}
			
			/**
			 * loads the data of the visible tabs only
			 * */
			private function initTabs():void {
				//we should load only once
				if (_dataInitialized)
					return;
			
				for (var i:int = 0; i<viewStack.numChildren; i++) {
					if (viewStack.getChildAt(i) is IDrilldownPanel)
						(viewStack.getChildAt(i) as IDrilldownPanel).initData();
				} 

				//distribution panel requires the data flavors and thumbnails tab are loading,
				//so if they aren't exist, will still call their initData func
				if (viewStack.getChildByName('entryDistribution')) {
					if (!viewStack.getChildByName('entryAssets'))
						entryAssets.initData();
					if (!viewStack.getChildByName('entryThumbnails'))
						entryThumbnails.initData();					
				}
				
				_dataInitialized = true;
			}

			
		]]>
	</mx:Script>
	<mx:TabBar id="dtn" width="140" dataProvider="{viewStack}" direction="vertical" styleName="dtn"
			   useHandCursor="true" buttonMode="true" tabHeight="25" enabled="{!entryDetailsModel.loadingFlag || _hadFirstNavigation}" />

	<mx:ViewStack id="viewStack" width="100%" height="100%" change="{onChangeView()}" creationPolicy="all"
				  selectedIndex="{dtn.selectedIndex}" styleName="sectionViewStack" >
		<!-- Metadata Tab -->
		<ed:EntryMetadata id="entryMetaData" width="100%" height="100%" styleName="metaDataHbox"
						  label="{ResourceManager.getInstance().getString('cms', 'metadata')}"
						  selectedEntry="{_undoToEntry}" isLiveStream="{_isLiveStream}" context="{context}"
						  entryDetailsModel="{entryDetailsModel}" untrackableChange="{setUntrackableChange()}"
						  openPreview="{openPreview(event)}" viewStack="{viewStack}" showEmbed="{showEmbedCode}" maxNumCategories="{maxNumCategories}"
						  landingPage="{landingPage}"/>
		<!-- Thumbnails Tab -->
		<ed:EntryThumbnails id="entryThumbnails" label="{ResourceManager.getInstance().getString('cms', 'thumbnails')}"
							selectedEntry="{_undoToEntry}" entryDetailsModel="{entryDetailsModel}" 
							context="{context}" enableDistribution="{filterModel.enableDistribution}"/>

		<!-- Access Control Tab -->
		<ed:EntryAccessControl id='entryAcp' styleName="accessControlVbox"
							   label="{ResourceManager.getInstance().getString('cms', 'accessControl')}"
							   selectedEntry="{_undoToEntry}" filterModel="{filterModel}"
							   accessControlData="{filterModel.accessControlProfiles}"/>

		<!-- Scheduling Tab -->
		<ed:EntryScheduling id='entrySch' label="{ResourceManager.getInstance().getString('cms', 'scheduling')}"
							selectedEntry="{_undoToEntry}"/>

		<!-- Flavor Assets Tab -->
		<ed:EntryFlavors id="entryAssets" styleName="flavorsVbox"
						 label="{ResourceManager.getInstance().getString('cms', 'videoFiles')}"
						 selectedEntry="{_undoToEntry}" entryDetailsModel="{entryDetailsModel}" dropFolderModel="{dropFolderModel}"/>

		<!-- content Tab -->
		<mx:VBox id="contentTab" width="100%" height="100%" styleName="contentVbox"
				 label="{ResourceManager.getInstance().getString('cms', 'mixesTab')}">
			<!--<mx:Label id="partsTable" styleName="drillDownTitleLabel"/>-->
			<view:EntryTable width="100%" height="100%" dataProvider="{selectedEntry.parts}"
							 creationComplete="{removeColums(event)}" sortableColumns="false"/>
			<controls:Paging id="paging" width="100%" nextPage="onPaging()" prvPage="onPaging()" getPageNum="onPaging()"
							 showRowsInPage="false" />
		</mx:VBox>

		<!-- Live stream -->
		<ed:EntryLiveStreaming id="liveStream" rootUrl="{context.rootUrl}"
							   label="{ResourceManager.getInstance().getString('cms', 'liveStream')}"
							   selectedEntry="{_undoToEntry}"/>

		<!-- Custom Data -->
		<ed:EntryCustomData id="customData" label="{ResourceManager.getInstance().getString('cms', 'customData')}"/>
		
		<!-- Distribution Tab -->
		<ed:EntryDistribution id="entryDistribution" label="{ResourceManager.getInstance().getString('cms', 'distribution')}"
							  selectedEntry="{_undoToEntry}" entryDetailsModel="{entryDetailsModel}" viewStack="{viewStack}"/>

	</mx:ViewStack>
	<mx:ControlBar>
		<mx:Button id="saveBtn" label="{resourceManager.getString('cms', 'saveChanges')}" click="save()"
				   buttonMode="true"/>
	</mx:ControlBar>
</containers:HelpTitleWindow>
