<?xml version="1.0" encoding="utf-8"?>
<!---
	 "Moderate" section of the content viewstack.
	 allows moderating flagged entries.
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" hide="{stopPlayer()}"
		 xmlns:view="com.kaltura.kmc.modules.content.view.*" verticalScrollPolicy="off"
		 xmlns:controls="com.kaltura.controls.*" xmlns:loader="com.kaltura.kmc.modules.content.view.loader.*"
		 xmlns:filter="com.kaltura.kmc.modules.content.view.filter.*"
		 implements="com.kaltura.kmc.modules.content.view.content.IContentPanel,com.kaltura.kmc.modules.content.business.IDataOwner"
		 creationComplete="init()">

	<mx:Script>
		<![CDATA[
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.events.AccessControlProfileEvent;
			import com.kaltura.kmc.business.PermissionManager;
			import com.kaltura.kmc.modules.content.events.CategoryEvent;
			import com.kaltura.kmc.modules.content.events.ConversionSettingsEvent;
			import com.kaltura.kmc.modules.content.events.DistributionProfileEvent;
			import com.kaltura.kmc.modules.content.events.EntryEvent;
			import com.kaltura.kmc.modules.content.events.FilterEvent;
			import com.kaltura.kmc.modules.content.events.LoadEvent;
			import com.kaltura.kmc.modules.content.events.MetadataProfileEvent;
			import com.kaltura.kmc.modules.content.events.ModerationsEvent;
			import com.kaltura.kmc.modules.content.events.SearchEvent;
			import com.kaltura.kmc.modules.content.events.SetCurrentListableEvent;
			import com.kaltura.kmc.modules.content.events.UserEvent;
			import com.kaltura.kmc.modules.content.model.Context;
			import com.kaltura.kmc.modules.content.model.EntryDetailsModel;
			import com.kaltura.kmc.modules.content.model.FilterModel;
			import com.kaltura.kmc.modules.content.model.ModerationModel;
			import com.kaltura.kmc.modules.content.model.types.KDPEventTypes;
			import com.kaltura.kmc.modules.content.vo.ListableVo;
			import com.kaltura.kmc.modules.content.vo.UserVO;
			import com.kaltura.types.KalturaMediaEntryOrderBy;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.utils.pager.Pager;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaBaseEntryFilter;
			import com.kaltura.vo.KalturaMediaEntryFilter;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;


			// ===============================================
			// fields
			// ===============================================

			/**
			 * saves the loaded KDP across window opening
			 * and closing to improve performance
			 * */
			private static var _kdp3SwfLoader:SWFLoader;


			[Bindable]
			/**
			 * last selected entry
			 * */
			public var selectedEntry:KalturaBaseEntry;

			[Bindable]
			/**
			 * filtering parameters
			 * */
			public var filterModel:FilterModel;

			/**
			 * application context
			 * */
			public var context:Context;


			[Bindable]
			private var _listableVo:ListableVo;

			/**
			 * save the status of the player
			 */
			private var _playerHasMedia:Boolean;



			/**
			 * moderation tab data
			 * */
			private var _moderationModel:ModerationModel;

			/**
			 * the field on which to order results
			 * */
			private var _orderBy:String = KalturaMediaEntryOrderBy.CREATED_AT_ASC;

			/**
			 * used to initialize after both external data is ready and creationComplete
			 * */
			private var _ready:Boolean = false;
			
			
			[Bindable]
			/**
			 * Distribution profiles
			 * */
			public var distributionProfilesArray : Array;
			
			private var _initialFilter:KalturaMediaEntryFilter;


			// ===============================================
			// methods
			// ===============================================
			
			public function onRequestedDataLoaded():void {
				filter.init();
				loadEntries();
			}

			/**
			 * this is the old creationComplete handler, it needs to be triggered
			 * only after all data is present, and also after creationComplete,
			 * so we trigger it manualy (through init())
			 * */
			public function init(entryFilter:KalturaBaseEntryFilter = null):void {
				if (entryFilter && entryFilter is KalturaMediaEntryFilter) {
					_initialFilter = entryFilter as KalturaMediaEntryFilter;
				}
				if (_ready) {
					setEntriesToolbar();

					toolBar.approveSelected.addEventListener(MouseEvent.CLICK, clearKdp);
					toolBar.rejectSelected.addEventListener(MouseEvent.CLICK, clearKdp);
					//TODO clean up.. ?
					toolBar.removeCombos();

					// setting defaults to view only pending and flagged and Status Ready.
					//TODO (filter) remove hardcoded references
					filter.moderationStatus.allModerationStatus.selected = false;
					filter.moderationStatus.rejected.selected = false;
					filter.moderationStatus.approved.selected = false;
					filter.moderationStatus.pending.selected = true;
					filter.moderationStatus.pendingModeration.selected = true;
					
					filter.conversionStatus.allConversionStatusBtn.selected = false;
					filter.conversionStatus.convReadyBtn.selected = true;
					filter.conversionStatus.convConvertingBtn.selected = false;
					filter.conversionStatus.convErrorBtn.selected = false;
					filter.conversionStatus.convUploadingBtn.selected = false;

					///////////////////////////////////////

					paging.kalturaFilterPager.pageIndex = 0;
					paging.kalturaFilterPager.pageSize = paging.rowInPageCb.value as int;
					
					if (_initialFilter) {
						filter.ps3filter = _initialFilter;
					}
					
					filter.validateNow();
					
					loadFilterData();
					loadKDP();

					paging.selectedPage = 1;
					paging.kalturaFilterPager.pageIndex = 0;
					paging.kalturaFilterPager.pageSize = paging.rowInPageCb.value as int;

					PermissionManager.getInstance().applyAllAttributes(this, this.id);
				}
				else {
					_ready = true;
				}
			}
			
			
			/**
			 * load all the data the filter needs
			 * */
			private function loadFilterData():void {
//				// distribution
//				if (filterModel.enableDistribution) {
//					var listDistribution:DistributionProfileEvent = new DistributionProfileEvent(DistributionProfileEvent.LIST);
//					listDistribution.dispatch();
//				}
//				// flavor params
//				var getAllFlavorParams:ConversionSettingsEvent = new ConversionSettingsEvent(ConversionSettingsEvent.LIST_FLAVOR_PARAMS);
//				getAllFlavorParams.dispatch();
//				// metadata profile
//				if (filterModel.enableCustomData) {
//					var listMetadataProfile:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.LIST);
//					listMetadataProfile.dispatch();
//				}
//				// access control
//				var getAllProfilesEvent:AccessControlProfileEvent = new AccessControlProfileEvent(AccessControlProfileEvent.LIST_ACCESS_CONTROLS_PROFILES);
//				getAllProfilesEvent.dispatch();
//				//categories
//				var getCategoriesList:CategoryEvent = new CategoryEvent(CategoryEvent.LIST_CATEGORIES);
//				getCategoriesList.dispatch();
				var fe:LoadEvent = new LoadEvent(LoadEvent.LOAD_FILTER_DATA, this);
				fe.dispatch();
			}


			/**
			 * When the moderation is hidden by moving to another tab, stop the player from playin
			 * if it is playing
			 */
			private function stopPlayer():void {
				if (_kdp3SwfLoader && _kdp3SwfLoader.content && _kdp3SwfLoader.content.hasOwnProperty("sendNotification")) {
					_kdp3SwfLoader.content["sendNotification"]("doPause");
					_kdp3SwfLoader.content["sendNotification"]("doSeek", "0");
				}
			}


			private function loadEntries():void {
				if (paging.pageSize == 10) {
					entryTableContainer.height = (entryTable.rowHeight * 10.5) + entryTable.headerHeight + paging.height + toolBar.height;
					entryTable.height = entryTableContainer.height - (paging.height + toolBar.height); //entryTable.rowHeight*11+entryTable.headerHeight;
					kdpContainer.height = entryTable.height;
					entryTable.rowCount = 10;
					filterContainer.height = entryTableContainer.height;
					topContainer.height = entryTableContainer.height;
				}
				else {
					topContainer.percentHeight = 100;
					entryTableContainer.percentHeight = 100;
					entryTable.percentHeight = 100;
					entryTable.rowCount = -1;
					filterContainer.percentHeight = 100;
				}

				clearKdp();
				_listableVo = new ListableVo(filter.ps3filter, paging, null);
				// set the order-by to the filter
				if (_orderBy) {
					_listableVo.filterVo.orderBy = _orderBy;
				}
				var cgEvent:SetCurrentListableEvent = new SetCurrentListableEvent(SetCurrentListableEvent.SET_NEW_LIST_TO_MODEL, _listableVo);
				cgEvent.dispatch();
				var searchEvent:SearchEvent = new SearchEvent(SearchEvent.SEARCH_ENTRIES, _listableVo);
				searchEvent.dispatch();
				updateExpenderLabel();
			}


			private function clearKdp(event:MouseEvent = null):void {
				entryTable.selectedIndex = -1;
				if (_kdp3SwfLoader && _kdp3SwfLoader.content)
				{
					_kdp3SwfLoader.content["sendNotification"]("cleanMedia");
					moderationModel.moderationsArray.source = [];					
				}
			}


			private function setEntriesToolbar():void {
				toolBar.removeController(toolBar.deleteBtn);

				toolBar.removeController(toolBar.addTags);
				toolBar.removeController(toolBar.removeTags);

				toolBar.removeController(toolBar.download);
				toolBar.removeController(toolBar.setAccessControlProfile);
				toolBar.removeController(toolBar.setScheduling);

				toolBar.removeController(toolBar.manualPlaylistBtn);
				toolBar.removeController(toolBar.ruleBasedPlaylistBtn);
				
				toolBar.removeController(toolBar.newEntryBtn);
			}


			private function removeColums(event:Event):void {
				event.target.removeColumn(resourceManager.getString('cms', 'rating'));
				event.target.removeColumn(resourceManager.getString('cms', 'creator'));
				event.target.removeColumn(resourceManager.getString('cms', 'duration'));
				event.target.removeColumn(resourceManager.getString('cms', 'playlistType'));
				event.target.removeColumn(resourceManager.getString('cms', 'preview'));
				event.target.removeColumn(resourceManager.getString('cms', 'idHeader'));

				for each (var col:DataGridColumn in event.target.columns) {
					col.minWidth = 45;
				}

				event.target.updateDefaultSortColumn();

				percentWidth = 100;
				topContainer.percentWidth = 100;
				entryTableContainer.percentWidth = 100;
				mainCont.percentWidth = 100;
//				entryTable.percentWidth = 75;
//				kdpContainer.percentWidth = 25;
				paging.percentWidth = 100;
				toolBar.percentWidth = 100;
				filterContainer.width = 245;
				filter.percentWidth = 100;
				validateNow();
				validateDisplayList()
			}


			//paging
			private function gotoPage():void {
				loadEntries();
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_GO_TO_PAGE,GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE, "content>Show Rows");
			}


			private function getModeration(event:ListEvent):void {
				var entry:KalturaBaseEntry = (event.itemRenderer.data as KalturaBaseEntry);
				if (entry.moderationCount > 0) {
					entry.moderations = new ArrayCollection();
					var cgEvent:EntryEvent = new EntryEvent(EntryEvent.LIST_ENTRY_MODERATION, entry);
					cgEvent.dispatch();
				}
				if (kdp3Loader && _kdp3SwfLoader.content) {
					kdp3Loader.content["sendNotification"](KDPEventTypes.DO_PAUSE);
					_playerHasMedia = false;
					_kdp3SwfLoader.content["sendNotification"](KDPEventTypes.CHANGE_MEDIA, {entryId: entry.id});
					_kdp3SwfLoader.content.addEventListener(KDPEventTypes.MEDIA_LOADED, onKdpMediaLoaded);
				}
			}



			private function onKdpMediaLoaded(evt:Event = null):void {
				_playerHasMedia = true;
			}


			private function banUser():void {
				if (entryTable.selectedItem) {
					var user:UserVO = new UserVO();
					user.puserId = (entryTable.selectedItem as KalturaBaseEntry).userId;
					var userEvent:UserEvent = new UserEvent(UserEvent.BAN_USER, user);
					userEvent.dispatch();
				}
				else
					Alert.show(resourceManager.getString('cms', 'selectUsersEntryFirst'));
			}



			/**
			 * controller has selected all entries
			 */
			private function onSelectAllEntries(evt:Event):void {
				entryTable.selectAll();
			}


			private function onDeselectAllEntries(evt:Event):void {
				entryTable.deselectAll();
			}


			/**
			 * approve button was clicked
			 */
			private function onApprove(evt:Event):void {

				var entriesToApprove:Array = entryTable.selectedItems;
				var cgEvent:ModerationsEvent = new ModerationsEvent(ModerationsEvent.UPDATE_ENTRY_MODERATION, ModerationsEvent.APPROVE, entriesToApprove)
				cgEvent.dispatch();
			}


			/**
			 * reject button was clicked
			 */
			private function onReject(evt:Event):void {
				var entriesToReject:Array = entryTable.selectedItems;
				var cgEvent:ModerationsEvent = new ModerationsEvent(ModerationsEvent.UPDATE_ENTRY_MODERATION, ModerationsEvent.REJECT, entriesToReject)
				cgEvent.dispatch();
			}


			/**
			 * fold / unfold filter
			 */
			private function foldFilter():void {
				var flag:Boolean = !filterContainer.visible;
				filterContainer.visible = flag;
				filterContainer.includeInLayout = flag;
				filterLabel.visible = flag;
				filterLabel.includeInLayout = flag;

//				foldBtn.setStyle('icon', flag ? closeFilterImage : openFilterImage);
//				foldBtn.styleName = flag ? "expendableButtonWithCloseIcon" : "expendableButtonWithOpenIcon";
				
				
				foldBtn.labelPlacement = flag ? 'right' : 'left';
			}


			/**
			 * Entry table dispatched an order-by changing
			 */
			private function onOrderByChanged():void {
				_orderBy = entryTable.orderBy;
				loadEntries();
			}


			private function updateExpenderLabel():void {
				if (!filter.isFilterOn) {
					filteredLabel.visible = false;
				}
				else {
					filteredLabel.visible = true;
				}
			}


			/**
			 * Kdp loaded
			 */
			private function onKDP3Loaded(event:Event):void {
				//set it to later be used as static
				_kdp3SwfLoader = kdp3Loader;

				var params:Object = new Object();
				params.host = context.rootUrl;
				params.widgetId = "_" + context.kc.partnerId;
				params.autoPlay = "false";
				params.loop = "false";
				params.autoRewind = "false";
				params.sourceType = "entryId";
				params.entryId = "-1";
				if (context.rootUrl)
					params.host = context.rootUrl;
				if (context.moderationUiconf)
					params.uiConfId = context.moderationUiconf;
				//if(_model.context.widgetId) params.widgetId=_model.context.widgetId;
				params.ks = context.kc.ks;
				params.partnerId = context.kc.partnerId;

				params.subpId = context.kc.partnerId + "00";
				params.cdnHost = context.cdnHost;
				params.debugMode = context.debugMode;

				_kdp3SwfLoader.content["flashvars"] = params; //set flashvars
				_kdp3SwfLoader.content["init"](); //start the loading sqeunce of the kdp
			}


			/**
			 * Load KDP function
			 *
			 */
			private function loadKDP():void {
				if (_kdp3SwfLoader && _kdp3SwfLoader.content) {
					var kdp3LoaderParent:DisplayObjectContainer = kdp3Loader.parent;
					kdp3LoaderParent.addChildAt(_kdp3SwfLoader, kdp3LoaderParent.getChildIndex(kdp3Loader));
					//kdp3LoaderParent.removeChild(kdp3Loader);
					//Change media
					if (data && data is KalturaBaseEntry) {
						_kdp3SwfLoader.content["sendNotification"]('changeMedia', {entryId: (data as KalturaBaseEntry).id});
					}
				}
				else {
					// default
					var moderationUiconf:String = "48503";
					// dynamic uiconf from flashvar 
					if (context.moderationUiconf)
						moderationUiconf = context.moderationUiconf;

					var newUrl:String = "http://" + context.rootUrl + "/kwidget/wid/_" + context.kc.partnerId + "/ui_conf_id/" + moderationUiconf + "/nowrapper/1";
					kdp3Loader.scaleContent = false;
					kdp3Loader.loaderContext = new LoaderContext(true, new ApplicationDomain());
					kdp3Loader.load(newUrl);
				}
			}


			/**
			 * In case a user clicked on a drill down, pause the current playing video on 0.5 sec
			 */
			private function onDrillDown(evt:Event = null):void {
				if (_kdp3SwfLoader)
					_kdp3SwfLoader.content["sendNotification"]("doPause");
			}


			// ===============================================
			// getters / setters
			// ===============================================

			[Bindable]
			public function get moderationModel():ModerationModel {
				return _moderationModel;
			}


			public function set moderationModel(value:ModerationModel):void {
				_moderationModel = value;
			}

			protected function paging_creationCompleteHandler(event:FlexEvent):void
			{
				paging.pageSize = 25;
			}

		]]>
	</mx:Script>
	<mx:WipeLeft id="wipeLeft" duration="400"/>
	<mx:WipeRight id="wipeRight" duration="500"/>
	<mx:HBox>
		<mx:Label id="filterLabel" width="{filter.width}" text="{resourceManager.getString('cms', 'filters')}"
				  styleName="filterTitleHeader"/>
		<mx:LinkButton id="foldBtn"  toggle="true" label="{resourceManager.getString('cms', 'moderationEntriesTable')}"
					   click="{foldFilter()}" styleName="expendableButtonWithCloseIcon" />
		<mx:Label id="filteredLabel" text="{resourceManager.getString('cms', 'filtered')}" styleName="filtered"
				  visible="false"/>
	</mx:HBox>
	<mx:HDividedBox id="topContainer">
		<mx:VBox id='filterContainer'>
			<filter:Filter id="filter" showEffect="{wipeLeft}" categories="{filterModel.categories}" width="245"
						   enableCustomData="{filterModel.enableCustomData}" metadataProfilesArray="{filterModel.metadataProfiles}"
						   flavorParams="{filterModel.flavorParams}"
						   catMap="{filterModel.categoriesMap}"
						   accessControlProfiles="{filterModel.accessControlProfiles}"
						   newSearch="{paging.selectedPage=1;loadEntries()}"
						   enableDistribution="{filterModel.enableDistribution}"
						   distributionProfileArr="{distributionProfilesArray}"/>
		</mx:VBox>
		<mx:VBox id='entryTableContainer' styleName="entriesTablePagerAndButtonsVbox" width="100%" height="100%">
			<mx:HBox id="mainCont" height="100%" width="100%" styleName="moderationHBox" paddingTop="0">
				<view:EntryTable id="entryTable" width="100%" openEntry="{onDrillDown()}"
								 sortDirection="{EntryTable.ASCENDING}" dataProvider="{_listableVo.arrayCollection}"
								 selectedEntry="{selectedEntry}" orderByChanged="{onOrderByChanged()}"
								 creationComplete="removeColums( event )" change="getModeration( event )"
								 dragEnabled="false" dragMoveEnabled="false" dropEnabled="false"
								 usedForModeration="true"/>
				<mx:Panel id="kdpContainer" height="100%" minWidth="290"
						  styleName="modPrev" toolTip="{entryTable.selectedItem.name}" layout="vertical" 
						  title="{resourceManager.getString('cms', 'preview')} - {entryTable.selectedItem.name}">
					<mx:SWFLoader id="kdp3Loader" width="280" height="255" init="{onKDP3Loaded(event)}"/>
					<mx:VBox width="280" height="100%" >
						<mx:HBox width="100%" styleName="modPrevToolBar" >
							<mx:Label text="{entryTable.selectedItem.moderationCount} {resourceManager.getString('cms', 'flag')}"/>
							<mx:Spacer width="100%"/>
							<mx:LinkButton label="{resourceManager.getString('cms', 'viewFullDetails')}"
										   click="{entryTable.openEditEntry(entryTable.selectedItem)}"/>
							<mx:LinkButton label="{resourceManager.getString('cms', 'banUser')}" click="banUser()"
										   labelPlacement="left" styleName="banUser"/>
						</mx:HBox>
						<mx:List id="modList" width="100%" height="100%" minHeight="80" borderThickness="1"
								 styleName="flagList" selectable="false" borderColor="0xCCCCCC" borderStyle="solid" 
								 rowHeight="80" dataProvider="{moderationModel.moderationsArray}"
								 itemRenderer="com.kaltura.kmc.modules.content.view.itemrenderers.ModerationItemRenderer"/>
						
					</mx:VBox>
				</mx:Panel>
			</mx:HBox>

			<controls:Paging id="paging" styleName="paging" rowsInPageChange="gotoPage()" width="{mainCont.width}"  creationComplete="paging_creationCompleteHandler(event)"
							 nextPage="gotoPage()" prvPage="gotoPage()" getPageNum="gotoPage()" showRowsInPage="true" />

			<view:ControlToolBar id="toolBar" selectAllEntries="onSelectAllEntries(event)" enablelivestream="false"
								 deselectAllEntries="onDeselectAllEntries(event)" width="{mainCont.width}"
								 approveSelectedEntries="{onApprove(event)}" rejectSelectedEntries="{onReject(event)}"/>
		</mx:VBox>
	</mx:HDividedBox>
</mx:VBox>
