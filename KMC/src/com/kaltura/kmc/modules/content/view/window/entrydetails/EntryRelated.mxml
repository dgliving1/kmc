<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.kaltura.kmc.modules.content.business.IDrilldownPanel"
		 width="100%" height="100%" creationComplete="onCreationComplete()">
	<mx:Script>
		<![CDATA[
			import com.kaltura.kmc.modules.content.events.RelatedFileEvent;
			import com.kaltura.kmc.modules.content.events.UploadTokenEvent;
			import com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.relatedFiles.RelatedFileActionRenderer;
			import com.kaltura.kmc.modules.content.vo.RelatedFileVO;
			import com.kaltura.vo.KalturaAttachmentAsset;
			import com.kaltura.vo.KalturaBaseEntry;
			
			import mx.collections.ArrayCollection;
			
			public static const FILE_CHANGED:String = "fileChanged";
			public static const ALLOWED_EXT:String = "*.*";
			
			[Bindable]
			/**
			 * r&p
			 * */
			public var editable:Boolean = true;
			/**
			 * will be used to convert size to KB
			 * */
			private const KB_MULTIPLIER:int = 1024;
			/**
			 * in files size: number of digits to show after the decimal point
			 * */
			private const DIGITS_AFTER_DEC_POINT:int = 2;
			
			/**
			 * entire list of related files
			 * */
			private var _relatedFiles:ArrayCollection;
			/**
			 * current selecred entry
			 * */
			public var selectedEntry:KalturaBaseEntry;
			/**
			 * will be used to upload new files
			 * */
			private var _fileReference:FileReference;
			/**
			 * list of related files to delete on save
			 * */
			private var _filesToDelete:ArrayCollection;
			/**
			 * list of related files to add on save
			 * */
			private var _filesToAdd:ArrayCollection;
			/**
			 * list of related files to update on save
			 * */
			private var _filesToUpdate:ArrayCollection;
			/**
			 * indicated if a change was made
			 * */
			private var _wasChanged:Boolean;


			/**
			 * R&P
			 * */
			public function get hideColumns():String{
				return '';
			}
			
			public function set hideColumns(value:String):void {
				var cols:Array = value.split(',');
				for (var col:String in cols) {
					var arrCol:ArrayCollection = new ArrayCollection(dataGrid.columns);
					for (var i:int = 0; i < arrCol.length; ++i) {
						if (arrCol[i].headerText == resourceManager.getString('cms', cols[col])) {
							arrCol.removeItemAt(i);
							break;
						}
					}
				}
				dataGrid.columns = arrCol.source;
			}
			
			private function onCreationComplete():void {
				dataGrid.addEventListener(FILE_CHANGED, onFileChanged);
				dataGrid.addEventListener(RelatedFileActionRenderer.FILE_DELETED, onFileDeleted);
			}
			
			private function onFileChanged(event:Event):void {
				_wasChanged = true;
				var _changedFile:RelatedFileVO = event.target.data as RelatedFileVO;
				//add to the updated array only if doesn't exist there yet, or doesn't belong to the added ones
				if (_changedFile.file.id && (_filesToUpdate.getItemIndex(_changedFile) == -1))
					_filesToUpdate.addItem(_changedFile);
			}
			
			private function onFileDeleted(event:Event):void {
				_wasChanged = true;
				var deletedFile:RelatedFileVO = event.target.data as RelatedFileVO;
				//if this file was already saved on the server
				if (deletedFile.file.id)
					_filesToDelete.addItem(deletedFile);
				//look for the file in the added array, and remove it from there
				else if (deletedFile.isNewUploaded) {
					_filesToAdd.removeItemAt(_filesToAdd.getItemIndex(deletedFile));
				}
				relatedFiles.removeItemAt(relatedFiles.getItemIndex(deletedFile));
			}
			
			[Bindable]
			/**
			 * related files of current entry
			 * */
			public function get relatedFiles():ArrayCollection
			{
				return _relatedFiles;
			}

			public function set relatedFiles(value:ArrayCollection):void
			{
				_relatedFiles = value;
				_filesToAdd = new ArrayCollection();
				_filesToDelete = new ArrayCollection();
				_filesToUpdate = new ArrayCollection();
			}

			/**
			 * get relevant data from server
			 * */
			public function initData():void {
				_wasChanged = false;
				var list:RelatedFileEvent = new RelatedFileEvent(RelatedFileEvent.LIST_RELATED_FILES);
				list.dispatch();
			}
			
			public function destroy():void {
				dataGrid.removeEventListener(FILE_CHANGED, onFileChanged);
				dataGrid.removeEventListener(RelatedFileActionRenderer.FILE_DELETED, onFileDeleted);
			}

			/**
			 * Open browse window and adds the selected file to the related files
			 * */
			protected function addFile(event:MouseEvent):void
			{
				_fileReference = new FileReference();
				_fileReference.addEventListener(Event.SELECT, onFileSelected);
				_fileReference.browse(new Array(new FileFilter(resourceManager.getString('cms','files') +' (' + ALLOWED_EXT + ')' ,ALLOWED_EXT)));
			}
			
			private function onFileSelected(event:Event):void {
				_wasChanged = true;
				_fileReference.removeEventListener(Event.SELECT, onFileSelected);
				var newRelated:RelatedFileVO = new RelatedFileVO();
				newRelated.file = new KalturaAttachmentAsset();
				newRelated.file.filename = _fileReference.name;
				newRelated.fileReference = _fileReference;
				//upload the file
				var uploadEvent:UploadTokenEvent = new UploadTokenEvent(UploadTokenEvent.UPLOAD_TOKEN, newRelated.fileReference, newRelated);
				newRelated.fileReference.addEventListener(Event.COMPLETE, onFileUploaded);
				newRelated.fileReference.addEventListener(IOErrorEvent.IO_ERROR, onFileFailed);
				newRelated.fileReference.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onFileFailed);
				uploadEvent.dispatch();
				
				_relatedFiles.addItem(newRelated);
				_filesToAdd.addItem(newRelated);
			}
	
			private function onFileUploaded(event:Event):void {
				var targetFR:FileReference = event.target as FileReference;
				targetFR.removeEventListener(Event.COMPLETE, onFileUploaded);
				targetFR.removeEventListener(IOErrorEvent.IO_ERROR, onFileFailed);
				targetFR.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onFileFailed);
				for each (var related:RelatedFileVO in relatedFiles) {
					if (related.fileReference == targetFR) {
						related.isNewUploaded = true;
						break;
					}
				}
			}
			
			private function onFileFailed(event:Event):void {
				var targetFR:FileReference = event.target as FileReference;
				targetFR.removeEventListener(Event.COMPLETE, onFileUploaded);
				targetFR.removeEventListener(IOErrorEvent.IO_ERROR, onFileFailed);
				targetFR.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onFileFailed);
				for each (var related:RelatedFileVO in relatedFiles) {
					if (related.fileReference == targetFR) {
						related.isNewUploadError = true;
						related.uploadTokenId = null;
						break;
					}
				}
			}
			
			
			/**
			 * Create suitable string to display in the "File Size" column
			 * */
			public function getSizeText(item:Object): String {
				var curItem:RelatedFileVO = item as RelatedFileVO;
				var size:int;
				if (curItem.fileReference)
					size = curItem.fileReference.size;
				else
					size = curItem.file.size;
				
				if (size==int.MIN_VALUE)
					return '';
				return ((size/KB_MULTIPLIER).toFixed(DIGITS_AFTER_DEC_POINT)) + ' ' + resourceManager.getString('cms','kiloBytes');
				
			}
			
			/**
			 * save all changes on related files
			 * */
			public function save():void {		
				var saveEvent:RelatedFileEvent = new RelatedFileEvent(RelatedFileEvent.SAVE_ALL_RELATED);
				saveEvent.relatedToAdd = _filesToAdd.source;
				saveEvent.relatedToUpdate = _filesToUpdate.source;
				saveEvent.relatedToDelete = _filesToDelete.source;
				saveEvent.dispatch();	
			}
			
			public function wasChanged():Boolean {
				return _wasChanged;
			}

		]]>
	</mx:Script>
	<mx:Text text="{resourceManager.getString('cms','relatedInfo')}" styleName="tipText"/>
	<mx:Button label="{resourceManager.getString('cms','addFiles')}" click="addFile(event)" visible="{editable}" includeInLayout="{editable}"/>
	<mx:DataGrid id="dataGrid" dataProvider="{relatedFiles}" width="100%" height="100%" rowHeight="30">
		<mx:columns>
			<mx:DataGridColumn headerText="{resourceManager.getString('cms','fileName')}" sortable="false" itemRenderer="com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.relatedFiles.RelatedFileNameRenderer"/>
			<mx:DataGridColumn headerText="{resourceManager.getString('cms','fileType')}" sortable="false"
							   itemRenderer="com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.relatedFiles.RelatedFileTypeRenderer"/>
			<mx:DataGridColumn headerText="{resourceManager.getString('cms','fileSize')}" sortable="false">
				<mx:itemRenderer>
					<mx:Component>
						<mx:VBox paddingLeft="5" verticalAlign="middle">
							<mx:Label text="{outerDocument.getSizeText(data)}"/>
						</mx:VBox>
					</mx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{resourceManager.getString('cms','kalturaId')}" sortable="false">
				<mx:itemRenderer>
					<mx:Component>
						<mx:VBox paddingLeft="5" verticalAlign="middle">
							<mx:Label text="{data.file.id}" selectable="true"/>
						</mx:VBox>
					</mx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{resourceManager.getString('cms','actions')}" width="200" sortable="false" itemRenderer="com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.relatedFiles.RelatedFileActionRenderer"/>
		</mx:columns>
	</mx:DataGrid>
</mx:VBox>
