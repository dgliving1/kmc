<?xml version="1.0" encoding="utf-8"?>
<!---
	A popup window that allows matching files with the flavor they represent. 
	The same window with different configurations will be used for upload, link and import.
	Should have a single file state: hide the "add more files" options, use flavorAsset.update 
	instead of flavorAsset.add or media.update.
	
	Properties:
	•	state:String - upload / import / link 
-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
		xmlns:containers="com.kaltura.containers.*" 
		xmlns:flavors="com.kaltura.kmc.modules.content.view.window.flavors.*"
		width="550" height="400" styleName="TitleWindowType2" 
		showCloseButton="true" close="closeHandler(event)"
		creationComplete="titlewindow1_creationCompleteHandler(event)" >

	<mx:Script>
		<![CDATA[
			import com.kaltura.kmc.modules.content.events.ConversionSettingsEvent;
			import com.kaltura.kmc.modules.content.model.CmsModelLocator;
			import com.kaltura.kmc.modules.content.view.window.entrydetails.EntryFlavors;
			import com.kaltura.kmc.modules.content.vo.ConversionProfileWithFlavorParamsVo;
			import com.kaltura.kmc.modules.content.vo.UploadFileVo;
			import com.kaltura.managers.FileUploadManager;
			import com.kaltura.types.KalturaEntryStatus;
			import com.kaltura.types.KalturaFlavorReadyBehaviorType;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.vo.FileUploadVO;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaConversionProfileAssetParams;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			
			public static const CLOSE_WINDOW:String = "closeWindow";
			
			public static const SINGLE_FILE_STATE:String = "single_file_state"; 
			public static const MULTI_FILES_STATE:String = "multi_files_state"; 
			public var windowState:String;
			
			[Bindable]
			/**
			 * hide the "add more files" options,
			 * use flavorAsset.update instead of flavorAsset.add or media.update.
			 * */
			public var allowAddFiles:Boolean = true;
			
			
			/**
			 * @copy #selectedCPAssetParams
			 * */
			protected var _selectedCPAssetParams:ArrayCollection;
			
			private var _fileReferenceList:FileReferenceList;
			
			/**
			 * @copy #entry
			 * */
			private var _entry:KalturaBaseEntry;
			
			[Bindable]
			/**
			 * list of available conversion profiles and their
			 * respective flavorparam ids
			 * <code>ConversionProfileWithFlavorParamsVo</code> objects
			 * */
			public var conversionProfiles:ArrayCollection;
			
			[Bindable]
			/**
			 * <code>UploadFileVo</code> objects. <br>
			 * when passed from outside the objects only have fileData and fileName attributes popuplated. <br>
			 * flavors attribute is set in FilesTable.(set)flavors.<br>
			 * flavorParamId attribute is initialized in FlavorRenderer.selectFlavor and set 
			 * 		in FilesTable.flavorSelected
			 * */
			public var filesList:ArrayCollection;


			/**
			 * make sure the same flavour is not selected for more than one file
			 * ---------------------------------- 
			 * • more than one file is associated to the same conversion flavor settings.
			 * • Some of the files are exceeding system upload file size limitation 
			 * 	(currently set to X GB). please import these files to the system by 
			 * 	utilizing other ingestion options, applicable in your account (e.g. 
			 * 	import, drop folder etc)" 
			 * • Some files required for entry’s readiness for publishing are missing.
			 * */
			protected function validate():Boolean {
				var result:Boolean = true;
				if (!validateMultipleFilesSingleFlavour()) {
					Alert.show(ResourceManager.getInstance().getString('cms', 'multipleFilesFlavor'), 
						ResourceManager.getInstance().getString('cms', 'error'));
					result = false;
				}
				else if (!validateFileSize()) {
					Alert.show(ResourceManager.getInstance().getString('cms', 'filesTooBig', [getPartnerUploadLimit()]), 
						ResourceManager.getInstance().getString('cms', 'error'));
					result = false;
				}
				return result;
			}
			
			
			protected function getPartnerUploadLimit():Number {
				return CmsModelLocator.getInstance().extSynModel.partnerData.maxUploadSize;
			}
			
			/**
			 * if file size of any file exceeds partner limit, return false
			 * */
			protected function validateFileSize():Boolean {
				var result:Boolean = true;
				var bytesInMega:int = 1024*1024;
				var maxSize:Number = getPartnerUploadLimit();
				for each (var file:UploadFileVo in filesList) {
					if ((file.fileData.size/bytesInMega) > maxSize) {
						result = false;
						break;
					}
				}
				return result;
			}
			
			
			/**
			 * if the same flavour is selected for more than one file, return false.
			 * */
			protected function validateMultipleFilesSingleFlavour():Boolean {
				// when replaceing a single flavour, this is not a problem.
				if (!allowAddFiles) return true;
				// scan files list and put each flavor id in an array.
				// if the same flavor appears twice - fail, else return true.
				var ar:Vector.<String> = new Vector.<String>();
				for each (var file:UploadFileVo in filesList) {
					for (var i:int = 0; i<ar.length; i++) {
						if (file.flavorParamId == ar[i]) {
							return false;
						}
					}
					ar.push(file.flavorParamId);
				}
				return true;
			}
			
			
			/**
			 * run validations sequence
			 * */
			protected function initSubmitSequence(event:MouseEvent):void {
				if (validate()) {
					validateReadyCriteria();
				}
			}
			
			
			/**
			 * test entry readiness criteria, approve / cancel, continue accordingly.
			 * */
			protected function validateReadyCriteria():void {
				// dispatch a command to list conversionProfile.listAssetParams
				var cnvrtProfId:String = (cnvrtProfCb.selectedItem as ConversionProfileWithFlavorParamsVo).profile.id.toString();
				var cg:ConversionSettingsEvent = new ConversionSettingsEvent(ConversionSettingsEvent.LIST_ASSET_PARAMS, cnvrtProfId);
				cg.dispatch();
				// the result should go on the model as selectedCPAssetParams
				// bind it with a setter so we can continue validation
			}
			
			
			/**
			 * if the user wishes to upload partial files list, do so.
			 * */
			protected function handleWarning(e:CloseEvent):void {
				if (e.detail == Alert.OK) {
					submit();
				}
			}
			
			
			/**
			 * Submit handler:
			 * 	•	Upload – add the relevant files to FileUploadManager.
			 * 	•	Import – trigger media.add with matching KalturaURLResource objects.
			 * 	•	Link – trigger media.add with matching KalturaNetStorageResource objects.
			 * */
			protected function submit():void {
				var n:int = filesList.length;
				var uploader:FileUploadManager = FileUploadManager.getInstance();
				var ufv:UploadFileVo;
				// conversion profile id
				var cnvrtProfId:String = (cnvrtProfCb.selectedItem as ConversionProfileWithFlavorParamsVo).profile.id.toString();
				// action
				var action:String = FileUploadVO.ACTION_NONE;	// will only trigger media.update
				if (windowState == AddFlavorAssetsWindow.MULTI_FILES_STATE) {
					if (_entry.status == KalturaEntryStatus.NO_CONTENT) {
						// adding flavours to no_content entry
						action = FileUploadVO.ACTION_ADD;	// will trigger flavourAsset.add 
					}
				}
				else {
					if ((filesList[0] as UploadFileVo).flavorAssetId) {
						// select action according to existance of flavorAssetId; we will only 
						// have flavorassetid if this is replacement of a single flavour.
						action = FileUploadVO.ACTION_UPDATE;	// will trigger flavourAsset.update
					}
					else if ((filesList[0] as UploadFileVo).flavorParamId){
						// if we have a single file with flavourParamId, we are adding 
						// a single flavour to an existing entry.
						action = FileUploadVO.ACTION_ADD; // will trigger flavourAsset.add
					}	
				}
				
				// group id
				var groupid:String = '';
				if (action == FileUploadVO.ACTION_ADD || FileUploadVO.ACTION_NONE) {
					// group actions: adding flavors to a no_content entry, or replacing multiple 
					// 		flavours while creating replacement entry.
					groupid = _entry.id;
				}
				// add uploads to the FileUploadManager
				for (var i:int = 0; i<n; i++) {
					ufv = filesList[i] as UploadFileVo;
					uploader.addUpload(_entry.id, ufv.fileData, action, ufv.flavorParamId, ufv.flavorAssetId, cnvrtProfId, groupid);
				}
				// close the popup
				closeHandler();
			}
			
			
			protected function cnvrtPrfLbl(itemObj:ConversionProfileWithFlavorParamsVo):String{
				return itemObj.profile.name;
			}

			
			/**
			 * remove the popup
			 * */
			protected function closeHandler(event:CloseEvent = null):void {
				var cg:ConversionSettingsEvent = new ConversionSettingsEvent(ConversionSettingsEvent.RESET_ASSET_PARAMS);
				cg.dispatch();
				
				dispatchEvent(new Event(CLOSE_WINDOW));
				//PopUpManager.removePopUp(this);
			}
			
			/**
			 * open the file browser 
			 * */
			protected function addMoreFiles():void {
				_fileReferenceList = new FileReferenceList();
				_fileReferenceList.addEventListener(Event.SELECT, onFlavorsSelected);
				var mediaType:int = parseInt(_entry.type);
				if (mediaType == KalturaMediaType.VIDEO) 
					_fileReferenceList.browse(new Array(getTypeFilter('video',EntryFlavors.VIDEO_TYPES)));
				else if (mediaType == KalturaMediaType.AUDIO)
					_fileReferenceList.browse(new Array(getTypeFilter('audio',EntryFlavors.AUDIO_TYPES)));
			}
			
			/**
			 * add the selected files to the files list
			 * */
			private function onFlavorsSelected(event:Event):void {
				_fileReferenceList.removeEventListener(Event.SELECT, onFlavorsSelected);
				var files:Array = (event.target as FileReferenceList).fileList;
				for each (var fileReference:FileReference in files) {
					var uploadFile:UploadFileVo = new UploadFileVo();
					uploadFile.fileName = fileReference.name;
					uploadFile.fileData = fileReference;
					filesList.addItem(uploadFile);
				}
				// trigger the binding to get the rest of the fileVo attributes set
				filesTable.dataProvider = filesList;
			}
			
			/**
			 * will return fileFilter according to given name and file types
			 * */
			private function getTypeFilter(localeKey:String, types:String):FileFilter {
				return new FileFilter(resourceManager.getString('cms',localeKey) +  "(" + types+ ")" , types );
			}


			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void {
				this.mx_internal::closeButton.buttonMode = true;
			}
			
			

			/**
			 * the entry being edited
			 * */
			public function get entry():KalturaBaseEntry {
				return _entry;
			}

			/**
			 * @private
			 */
			public function set entry(value:KalturaBaseEntry):void {
				_entry = value;
				if (value.status == KalturaEntryStatus.NO_CONTENT) {
					title = ResourceManager.getInstance().getString('cms', 'windowTitleAdd');
				}
				else {
					title = ResourceManager.getInstance().getString('cms', 'windowTitleUpdate');
				}
			}
			
			
			
			[Bindable]
			/**
			 * the selected CP's conversionProfileAssetParams
			 * this setter is triggered during validation before save, so we complete the 
			 * process here.
			 * */
			public function set selectedCPAssetParams(value:ArrayCollection):void {
				_selectedCPAssetParams = value;
				var isOk:Boolean = true;
				if (value) {
					// scan the flavors list and see if any required flavors are missing
					for each(var cpap:KalturaConversionProfileAssetParams in value) {
						var bFound:Boolean = false;
						if (cpap.readyBehavior == KalturaFlavorReadyBehaviorType.REQUIRED) {
							for each (var fuv:UploadFileVo in filesList) {
								if (fuv.flavorParamId == cpap.assetParamsId.toString()) {
									bFound = true;
									break;
								}
							}
							if (!bFound) {
								isOk = false;
								break;
							}
						}
					}
					if (isOk) {
						// save
						submit();
					}
					else {
						// alert user
						Alert.show(ResourceManager.getInstance().getString('cms', 'missingRequired'),
							ResourceManager.getInstance().getString('cms', 'warning'), Alert.OK|Alert.CANCEL, null, handleWarning);
					}
				}
			}
			
			public function get selectedCPAssetParams():ArrayCollection {
				return _selectedCPAssetParams;
			}


		]]>
	</mx:Script>
	
	<mx:HBox verticalAlign="middle" visible="{allowAddFiles}" includeInLayout="{allowAddFiles}">
		<mx:Label text="{ResourceManager.getInstance().getString('cms', 'convProfLbl')}:" 
				  styleName="simpleBoldText"/>
		<mx:ComboBox id="cnvrtProfCb" labelFunction="cnvrtPrfLbl" 
					 selectedIndex="0" dataProvider="{conversionProfiles}" />
	</mx:HBox>
	<mx:Label text="{ResourceManager.getInstance().getString('cms', 'uploadedFiles')}" 
			  styleName="tableName"/>
	<flavors:FilesTable id="filesTable" width="100%" flavors="{cnvrtProfCb.selectedItem.flavors}"
						dataProvider="{filesList}" allowAddFiles="{allowAddFiles}"
						addFiles="addMoreFiles()"/>
	
	<mx:ControlBar>
		<mx:Button id="submitBtn" click="initSubmitSequence(event)" buttonMode="true"
				   label="{ResourceManager.getInstance().getString('cms', 'submitUploadLabel')}"/>
	</mx:ControlBar>
</mx:TitleWindow>
