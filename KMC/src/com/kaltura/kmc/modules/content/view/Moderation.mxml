<?xml version="1.0" encoding="utf-8"?>
<!---
	 "Moderate" section of the content viewstack.
	 allows moderating flagged entries.
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" hide="{stopPlayer()}" verticalScrollPolicy="off"
		 xmlns:controls="com.kaltura.controls.*"
		 implements="com.kaltura.kmc.modules.content.business.IContentPanel,com.kaltura.edw.business.IDataOwner"
		 creationComplete="init()" xmlns:et1="com.kaltura.edw.components.et.*"
		 xmlns:fltr="com.kaltura.edw.components.fltr.*" xmlns:indicators="com.kaltura.edw.components.fltr.indicators.*"
		 xmlns:business="com.kaltura.kmc.modules.content.business.*"
		 xmlns:bulkactions="com.kaltura.kmc.modules.content.view.controls.bulkactions.*">

	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.components.et.EntryTableColumns;
			import com.kaltura.edw.components.et.events.EntryTableEvent;
			import com.kaltura.edw.control.KedController;
			import com.kaltura.edw.control.events.KedEntryEvent;
			import com.kaltura.edw.control.events.LoadEvent;
			import com.kaltura.edw.model.FilterModel;
			import com.kaltura.edw.model.datapacks.ContextDataPack;
			import com.kaltura.edw.model.datapacks.DistributionDataPack;
			import com.kaltura.edw.model.datapacks.PermissionsDataPack;
			import com.kaltura.edw.model.types.WindowsStates;
			import com.kaltura.edw.vo.DistributionProfileInfo;
			import com.kaltura.edw.vo.ListableVo;
			import com.kaltura.events.KdpEventTypes;
			import com.kaltura.kmc.modules.content.events.KMCEntryEvent;
			import com.kaltura.kmc.modules.content.events.KMCSearchEvent;
			import com.kaltura.kmc.modules.content.events.ModerationsEvent;
			import com.kaltura.kmc.modules.content.events.SelectionEvent;
			import com.kaltura.kmc.modules.content.events.SetListableEvent;
			import com.kaltura.kmc.modules.content.events.UserEvent;
			import com.kaltura.kmc.modules.content.events.WindowEvent;
			import com.kaltura.kmc.modules.content.model.ModerationModel;
			import com.kaltura.kmc.modules.content.vo.UserVO;
			import com.kaltura.kmvc.control.KMvCEvent;
			import com.kaltura.kmvc.model.KMvCModel;
			import com.kaltura.types.KalturaEntryModerationStatus;
			import com.kaltura.types.KalturaMediaEntryOrderBy;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.types.KalturaPlaylistType;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaBaseEntryFilter;
			import com.kaltura.vo.KalturaMediaEntry;
			import com.kaltura.vo.KalturaMediaEntryFilter;
			import com.kaltura.vo.KalturaMixEntry;
			import com.kaltura.vo.KalturaPlaylist;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;


			// ===============================================
			// fields
			// ===============================================

			private var _entryDetailsModel:KMvCModel;


			[Bindable]
			public function set entryDetailsModel(value:KMvCModel):void {
				_entryDetailsModel = value;
				if (_disProfWatcher) {
					_disProfWatcher.unwatch();
				}
				var dpi:DistributionProfileInfo = (entryDetailsModel.getDataPack(DistributionDataPack) as DistributionDataPack).distributionProfileInfo; 
				_disProfWatcher = BindingUtils.bindProperty(this, "distributionProfilesArray", dpi, "kalturaDistributionProfilesArray"); 
			}

			public function get entryDetailsModel():KMvCModel {
				return _entryDetailsModel;
			}

			/**
			 * saves the loaded KDP across window opening
			 * and closing to improve performance
			 * */
			private static var _kdp3SwfLoader:SWFLoader;


			/**
			 * last selected entry
			 * */
			private var _selectedEntry:KalturaBaseEntry;

			[Bindable]
			/**
			 * filtering parameters
			 * */
			public var filterModel:FilterModel;

			/**
			 * application context
			 * */
			public var context:ContextDataPack;


			[Bindable]
			private var _listableVo:ListableVo;


			/**
			 * moderation tab data
			 * */
			private var _moderationModel:ModerationModel;

			/**
			 * the field on which to order results
			 * */
			private var _orderBy:String = KalturaMediaEntryOrderBy.CREATED_AT_ASC;

			/**
			 * used to initialize after both external data is ready and creationComplete
			 * */
			private var _ready:Boolean = false;


			private var _disProfWatcher:ChangeWatcher;

			[Bindable]
			/**
			 * Distribution profiles
			 * */
			public var distributionProfilesArray : Array;

			private var _initialFilter:KalturaMediaEntryFilter;


			/**
			 * list of entries that are being approved / rejected
			 * */
			private var _affectedEntries:Array;

			/**
			 * a flag indicating the tab was intialised
			 * */
			private var _initOnce:Boolean;

			// ===============================================
			// methods
			// ===============================================

			public function onRequestedDataLoaded():void {
				loadEntries();
			}

			/**
			 * this is the old creationComplete handler, it needs to be triggered
			 * only after all data is present, and also after creationComplete,
			 * so we trigger it manualy (through init())
			 * */
			public function init(entryFilter:KalturaBaseEntryFilter = null):void {
				if (entryFilter && entryFilter is KalturaMediaEntryFilter) {
					_initialFilter = entryFilter as KalturaMediaEntryFilter;
				}
				if (_ready) {
					paging.selectedPage = 1;
					paging.kalturaFilterPager.pageSize = paging.rowInPageCb.value as int;

					if (_initOnce) {
						loadEntries();
					}
					else {
						initOnce();
					}


				}
				else {
					_ready = true;
				}
			}


			/**
			 * load all the data the filter needs
			 * */
			private function initOnce():void {

				var kFilter:KalturaMediaEntryFilter;
				if (_initialFilter) {
					kFilter = _initialFilter
				}
				else {
					kFilter = new KalturaMediaEntryFilter();
					kFilter.mediaTypeIn = KalturaMediaType.VIDEO + "," + KalturaMediaType.IMAGE + "," + KalturaMediaType.AUDIO + ",6," + KalturaMediaType.LIVE_STREAM_FLASH;

					// setting defaults to view only pending and flagged.
					kFilter.moderationStatusIn = KalturaEntryModerationStatus.PENDING_MODERATION + "," + KalturaEntryModerationStatus.FLAGGED_FOR_REVIEW;
				}
				filter.kalturaFilter = kFilter;

				loadKDP();

				// load filter data
				var fe:LoadEvent = new LoadEvent(LoadEvent.LOAD_FILTER_DATA, this, filterModel);
				KedController.getInstance().dispatch(fe);

				PermissionManager.getInstance().applyAllAttributes(this, this.id);

				_initOnce = true;
			}


			/**
			 * When the moderation is hidden by moving to another tab, stop the player from playin
			 * if it is playing
			 */
			private function stopPlayer():void {
				if (_kdp3SwfLoader && _kdp3SwfLoader.content && _kdp3SwfLoader.content.hasOwnProperty("sendNotification")) {
					_kdp3SwfLoader.content["sendNotification"](KdpEventTypes.DO_PAUSE);
					_kdp3SwfLoader.content["sendNotification"](KdpEventTypes.DO_SEEK, "0");
				}
			}


			private function loadEntries():void {
//				if (paging.pageSize == 10) {
//					entryTableContainer.height = (entryTable.rowHeight * 10.5) + entryTable.headerHeight + paging.height;
//					entryTable.height = entryTableContainer.height - paging.height; 
//					kdpContainer.height = entryTable.height;
//					entryTable.rowCount = 10;
//					filter.height = entryTableContainer.height;
//					topContainer.height = entryTableContainer.height;
//				}
//				else {
//					topContainer.percentHeight = 100;
//					entryTableContainer.percentHeight = 100;
//					entryTable.percentHeight = 100;
//					entryTable.rowCount = -1;
//					filter.percentHeight = 100;
//				}

				clearKdp();
				_listableVo = new ListableVo(filter.kalturaFilter, paging, null);
				// set the order-by to the filter
				if (_orderBy) {
					_listableVo.filterVo.orderBy = _orderBy;
				}

				var cgEvent:CairngormEvent = new SetListableEvent(SetListableEvent.SET_NEW_LIST_TO_MODEL, _listableVo);
				cgEvent.dispatch();
				cgEvent = new KMCSearchEvent(KMCSearchEvent.DO_SEARCH_ENTRIES, _listableVo);
				cgEvent.dispatch();
			}


			private function clearKdp(event:MouseEvent = null):void {
				entryTable.selectedIndex = -1;
				if (_kdp3SwfLoader && _kdp3SwfLoader.content)
				{
					_kdp3SwfLoader.content["sendNotification"](KdpEventTypes.CLEAN_MEDIA);
					moderationModel.moderationsArray.source = [];					
				}
			}



			private function removeColums(event:Event):void {

				var ar:Array = [EntryTableColumns.THUMBNAIL, EntryTableColumns.ID, EntryTableColumns.NAME, EntryTableColumns.MEDIA_TYPE,
					EntryTableColumns.PLAYER_LOADS, EntryTableColumns.PLAYS, EntryTableColumns.CREATE_AT,
					EntryTableColumns.FLAGS, EntryTableColumns.STATUS];
				entryTable.showColumns(ar);

				for each (var col:DataGridColumn in entryTable.columns) {
					col.minWidth = 45;
				}

				entryTable.updateDefaultSortColumn();
			}


			//paging
			private function gotoPage():void {
				loadEntries();
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.GO_TO_PAGE,GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE, "content>Show Rows");
			}


			private function getModeration():void {
				var entry:KalturaBaseEntry = entryTable.selectedItem as KalturaBaseEntry;
				
				if (_selectedEntry != entry) {
					_selectedEntry = entry;	// remember 
				
					if (entry && entry.moderationCount > 0) {
						entry.moderations = new ArrayCollection();
						var cgEvent:KMCEntryEvent = new KMCEntryEvent(KMCEntryEvent.LIST_ENTRY_MODERATION, entry);
						cgEvent.dispatch();
					}
					if (kdp3Loader && _kdp3SwfLoader.content) {
						kdp3Loader.content["sendNotification"](KdpEventTypes.DO_PAUSE);
						if (entry) {
							_kdp3SwfLoader.content["sendNotification"](KdpEventTypes.CHANGE_MEDIA, {entryId: entry.id});
						}
					}
				}
			}



			private function banUser():void {
				if (entryTable.selectedItem) {
					var user:UserVO = new UserVO();
					user.puserId = (entryTable.selectedItem as KalturaBaseEntry).userId;
					var userEvent:UserEvent = new UserEvent(UserEvent.BAN_USER, user);
					userEvent.dispatch();
				}
				else
					Alert.show(resourceManager.getString('cms', 'selectUsersEntryFirst'));
			}



			/**
			 * controller has selected all entries
			 */
			private function onSelectAllEntries(evt:Event):void {
				entryTable.selectAll();
			}


			private function onDeselectAllEntries(evt:Event):void {
				entryTable.deselectAll();
			}


			/**
			 * approve button was clicked
			 */
			private function onApprove(evt:Event):void {
				_affectedEntries = entryTable.selectedItems.concat();
				if(_affectedEntries.length == 0) {
					Alert.show( resourceManager.getString('cms','pleaseSelectEntriesFirst') , 
						resourceManager.getString('cms','pleaseSelectEntriesFirstTitle') );
					return;
				}
				if (_moderationModel.confirmModeration) {

					var confirmString:String = resourceManager.getString('cms', 'confirmApprove');
					for (var i:int = 0; i<_affectedEntries.length; i++) {
						confirmString += (i+1) + '. ' + (_affectedEntries[i] as KalturaBaseEntry).name + '\n';
					}
					Alert.show(confirmString, resourceManager.getString('cms', 'confirmApproveTitle'), Alert.YES|Alert.NO, this, approveEntries);
				}
				else {
					approveEntries();
				}
			}

			private function approveEntries(e:CloseEvent = null):void {
				if (!e || (e && e.detail == Alert.YES)) {
					clearKdp();
					var cgEvent:ModerationsEvent = new ModerationsEvent(ModerationsEvent.UPDATE_ENTRY_MODERATION, ModerationsEvent.APPROVE, _affectedEntries)
					cgEvent.dispatch();
				}
				_affectedEntries = null;
			}


			/**
			 * reject button was clicked
			 */
			private function onReject(evt:Event):void {
				_affectedEntries = entryTable.selectedItems.concat();
				if(_affectedEntries.length == 0) {
					Alert.show( resourceManager.getString('cms','pleaseSelectEntriesFirst') , 
						resourceManager.getString('cms','pleaseSelectEntriesFirstTitle') );
					return;
				}
				if (_moderationModel.confirmModeration) {
					var confirmString:String = resourceManager.getString('cms', 'confirmReject');
					for (var i:int = 0; i<_affectedEntries.length; i++) {
						confirmString += (i+1) + '. ' + (_affectedEntries[i] as KalturaBaseEntry).name + '\n';
					}
					Alert.show(confirmString, resourceManager.getString('cms', 'confirmRejectTitle'), Alert.YES|Alert.NO, this, rejectEntries);
				}
				else {
					rejectEntries();
				}
			}

			private function rejectEntries(e:CloseEvent = null):void {
				if (!e || (e && e.detail == Alert.YES)) {
					clearKdp();
					var cgEvent:ModerationsEvent = new ModerationsEvent(ModerationsEvent.UPDATE_ENTRY_MODERATION, ModerationsEvent.REJECT, _affectedEntries)
					cgEvent.dispatch();
				}
				_affectedEntries = null;
			}


			/**
			 * Entry table dispatched an order-by changing
			 */
			private function onOrderByChanged():void {
				_orderBy = entryTable.orderBy;
				loadEntries();
			}


			/**
			 * Kdp loaded
			 */
			private function onKDP3Loaded(event:Event):void {
				//set it to later be used as static
				_kdp3SwfLoader = kdp3Loader;

				var params:Object = new Object();
				params.host = context.rootUrl;
				params.widgetId = "_" + context.kc.partnerId;
//				params.autoPlay = "false";
//				params.loop = "false";
//				params.autoRewind = "false";
//				params.sourceType = "entryId";
				params.entryId = "-1";
//				if (context.moderationUiconf)
//					params.uiConfId = context.moderationUiconf;
				params.ks = context.kc.ks;
				params.partnerId = context.kc.partnerId;
				params.subpId = context.kc.partnerId + "00";
				params.cdnHost = context.cdnHost;
				params.debugMode = context.debugMode;

				_kdp3SwfLoader.content["flashvars"] = params; //set flashvars
				_kdp3SwfLoader.content["init"](); //start the loading sqeunce of the kdp
			}


			/**
			 * Load KDP function
			 *
			 */
			private function loadKDP():void {
				if (_kdp3SwfLoader && _kdp3SwfLoader.content) {
					var kdp3LoaderParent:DisplayObjectContainer = kdp3Loader.parent;
					kdp3LoaderParent.addChildAt(_kdp3SwfLoader, kdp3LoaderParent.getChildIndex(kdp3Loader));
					//kdp3LoaderParent.removeChild(kdp3Loader);
					//Change media
					if (data && data is KalturaBaseEntry) {
						_kdp3SwfLoader.content["sendNotification"](KdpEventTypes.CHANGE_MEDIA, {entryId: (data as KalturaBaseEntry).id});
					}
				}
				else {
					// default
					var moderationUiconf:String = "48503";
					// dynamic uiconf from flashvar 
					if (context.moderationUiconf)
						moderationUiconf = context.moderationUiconf;

					var newUrl:String = "http://" + context.cdnHost + "/kwidget/wid/_" + context.kc.partnerId + "/ui_conf_id/" + moderationUiconf + "/nowrapper/1";
					kdp3Loader.scaleContent = false;
					kdp3Loader.loaderContext = new LoaderContext(true, new ApplicationDomain());
					kdp3Loader.load(newUrl);
				}
			}


			/**
			 * In case a user clicked on a drill down, pause the current playing video on 0.5 sec
			 */
			private function onDrillDown(evt:Event = null):void {
				if (_kdp3SwfLoader)
					_kdp3SwfLoader.content["sendNotification"](KdpEventTypes.DO_PAUSE);
			}


			// ===============================================
			// getters / setters
			// ===============================================

			[Bindable]
			public function get moderationModel():ModerationModel {
				return _moderationModel;
			}


			public function set moderationModel(value:ModerationModel):void {
				_moderationModel = value;
			}

			protected function paging_creationCompleteHandler(event:FlexEvent):void
			{
				paging.pageSize = 25;
			}



		]]>
	</mx:Script>
	<business:EntryTableActionsManager id="actionsManager" />

	<mx:HBox width="100%">
		<mx:Label id="pageLabel" text="{resourceManager.getString('cms', 'moderation')}" styleName="filterTitleHeader" 
				  width="{filter.width}"/>
		<fltr:FreeTextSearch id="searchBox" styleName="searchHBox" width="{245}" height="{pageLabel.height}"
							 attribute="freeText" defaultText="{resourceManager.getString('filter', 'searchEntries')}" />
		<indicators:Indicators id="indicators" width="100%" height="{pageLabel.height}"
							   dataProvider="{filter.indicators}"
							   boxClicked="filter.removeFilter(event.data)"/>
		<mx:LinkButton click="loadEntries()" label="{resourceManager.getString('cms','refresh')}"
					   styleName="recycleIcon"/>
	</mx:HBox>
	<mx:Spacer height="15" />

	<mx:HDividedBox id="topContainer" width="100%" height="100%">
		<fltr:EntriesFilter id="filter" height="100%" width="245"  
							freeTextSearch="{searchBox}"
							metadataProfiles="{filterModel.metadataProfiles}"
							distributionProfiles="{entryDetailsModel.getDataPack(DistributionDataPack)['distributionProfileInfo'].kalturaDistributionProfilesArray}"
							filterModel="{filterModel}" filterChanged="{paging.selectedPage=1;loadEntries()}"/>
		<mx:VBox id='entryTableContainer' styleName="entriesTablePagerAndButtonsVbox" width="100%" height="100%">
			<mx:HBox id="mainCont" height="100%" width="100%" styleName="moderationHBox" paddingTop="0">
				<et1:EntryTable id="entryTable" width="100%" openEntry="{onDrillDown()}" 
								selectionChanged="actionsManager.itemClickHandler(event); getModeration();" 
								showDetails="actionsManager.showEntryDetailsHandler(event)"
								openPreview="actionsManager.preview(event)"
								sortDirection="{EntryTable.ASCENDING}" 
								dataProvider="{_listableVo.arrayCollection}"
								orderByChanged="{onOrderByChanged()}"
								creationComplete="removeColums( event )" 
								dragEnabled="false" dragMoveEnabled="false" dropEnabled="false"
								usedForModeration="true"/>
				<mx:Panel id="kdpContainer" height="100%" minWidth="290"
						  styleName="modPrev" toolTip="{entryTable.selectedItem.name}" layout="vertical" 
						  title="{resourceManager.getString('cms', 'preview')} - {entryTable.selectedItem.name}">
					<mx:SWFLoader id="kdp3Loader" width="280" height="255" init="{onKDP3Loaded(event)}"/>
					<mx:VBox width="280" height="100%" >
						<mx:HBox width="100%" styleName="modPrevToolBar" >
							<mx:Label text="{entryTable.selectedItem.moderationCount} {resourceManager.getString('cms', 'flag')}"/>
							<mx:Spacer width="100%"/>
							<mx:LinkButton label="{resourceManager.getString('cms', 'viewFullDetails')}"
										   click="{entryTable.openEditEntry(entryTable.selectedItem)}"/>
							<mx:LinkButton label="{resourceManager.getString('cms', 'banUser')}" click="banUser()"
										   labelPlacement="left" styleName="banUser"/>
						</mx:HBox>
						<mx:List id="modList" width="100%" height="100%" minHeight="80" borderThickness="1"
								 styleName="flagList" selectable="false" borderColor="0xCCCCCC" borderStyle="solid" 
								 rowHeight="80" dataProvider="{moderationModel.moderationsArray}"
								 itemRenderer="com.kaltura.kmc.modules.content.view.itemrenderers.ModerationItemRenderer"/>

					</mx:VBox>
				</mx:Panel>
			</mx:HBox>
			<mx:HBox width="100%" styleName="noPadding" horizontalGap="0">
				<bulkactions:BulkModerationActionsMenu id="bulkActions" height="{paging.height}" 
													   approveEntries="onApprove(event)" rejectEntries="onReject(event)"/>
				<controls:Paging id="paging" styleName="paging" rowsInPageChange="gotoPage()" width="100%"  creationComplete="paging_creationCompleteHandler(event)"
								 nextPage="gotoPage()" prvPage="gotoPage()" getPageNum="gotoPage()" showRowsInPage="true" />
			</mx:HBox>
		</mx:VBox>
	</mx:HDividedBox>
</mx:VBox>
