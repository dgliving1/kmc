<?xml version="1.0" encoding="utf-8"?>
<renderers:FlavorAssetRendererBase xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
								   horizontalAlign="center" verticalAlign="middle"
								   creationComplete="{onCreatoinComplete()}"
								   xmlns:renderers="com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.*">

	<mx:Script>
		<![CDATA[
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.controls.tabbar.OverlappingTabBar;
			import com.kaltura.kmc.modules.content.events.FlavorAssetEvent;
			import com.kaltura.kmc.modules.content.vo.FlavorAssetWithParamsVO;
			import com.kaltura.types.KalturaFlavorAssetStatus;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.vo.KalturaFlavorAssetWithParams;
			
			import mx.controls.Alert;
			import mx.controls.Button;

			[Embed(source="assets/flash/loaderwhite.swf")]
			private static const progressImage:Class;

			[ArrayElementType("String")]
			[Bindable]
			private var actionArr:Array = [];

			[Bindable]
			private var oneActionLabel:String = '';


			override public function onCreatoinComplete():void {
				super.onCreatoinComplete();
				var obj:FlavorAssetWithParamsVO = data as FlavorAssetWithParamsVO;
				if (obj.kalturaFlavorAssetWithParams.flavorAsset == null) {
					if (obj.hasOriginal) {
						this.currentState = "convertState";
						oneActionLabel = resourceManager.getString('cms', 'convertActionLabel');
					}
					else {
						this.currentState = "emptyState";
					}
				}
				else {
					actionArr = [];
					setActions();
				}
			}


			override public function set data(value:Object):void {
				super.data = value;
				onCreatoinComplete();
			}


			override public function validateNow():void {
				super.validateNow();
				onCreatoinComplete();
			}


			private function setActions():void {
				var obj:FlavorAssetWithParamsVO = data as FlavorAssetWithParamsVO;
				if (obj.kalturaFlavorAssetWithParams.flavorAsset.isOriginal) {
					this.currentState = null;
					actionArr.push(resourceManager.getString('cms', 'deleteActionLabel'));
					actionArr.push(resourceManager.getString('cms', 'downloadActionLabel'));
					if (obj.kalturaFlavorAssetWithParams.flavorAsset.isWeb) {
						actionArr.push(resourceManager.getString('cms', 'previewActionLabel'));
					}
				}
				else {
					switch (obj.kalturaFlavorAssetWithParams.flavorAsset.status) {
						case KalturaFlavorAssetStatus.CONVERTING:
						case KalturaFlavorAssetStatus.QUEUED:  {
							this.currentState = "convertingState";
							break;
						}
						case KalturaFlavorAssetStatus.DELETED:  {
							if (obj.hasOriginal) {
								this.currentState = "convertState";
								oneActionLabel = resourceManager.getString('cms', 'convertActionLabel');
							}
							else {
								this.currentState = "emptyState";
							}
							break;
						}
						case KalturaFlavorAssetStatus.ERROR:
						case KalturaFlavorAssetStatus.NOT_APPLICABLE:  {
							if (obj.hasOriginal) {
								this.currentState = "convertState";
								oneActionLabel = resourceManager.getString('cms', 'reconvertActionLabel');
							}
							else {
								this.currentState = "emptyState";
							}
							break;
						}

						case KalturaFlavorAssetStatus.READY:  {
							this.currentState = null;
							actionArr.push(resourceManager.getString('cms', 'deleteActionLabel'));
							actionArr.push(resourceManager.getString('cms', 'downloadActionLabel'));
							if (obj.kalturaFlavorAssetWithParams.flavorAsset.isWeb) {
								actionArr.push(resourceManager.getString('cms', 'previewActionLabel'));
							}
							if (obj.hasOriginal) {
								actionArr.push(resourceManager.getString('cms', 'reconvertActionLabel'));
							}

							break;
						}
					}
				}
			}


			private function launchAction(actionName:String):void {
				switch (actionName) {
					case resourceManager.getString('cms', 'previewActionLabel'):  {
						var preEvent:FlavorAssetEvent = new FlavorAssetEvent(FlavorAssetEvent.PREVIEW_FLAVOR_ASSET,
																			 (this.data as
							FlavorAssetWithParamsVO).kalturaFlavorAssetWithParams);
						preEvent.dispatch();
						break;
					}
					case resourceManager.getString('cms', 'downloadActionLabel'):  {
						var dlEvent:FlavorAssetEvent = new FlavorAssetEvent(FlavorAssetEvent.DOWNLOAD_FLAVOR_ASSET,(this.data as FlavorAssetWithParamsVO).kalturaFlavorAssetWithParams);
						dlEvent.dispatch();
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_DOWNLOAD,
																  "EntryDrillDown>FlavorTab>DownloadAsset",(data as FlavorAssetWithParamsVO).kalturaFlavorAssetWithParams.entryId);

						break;
					}
					case resourceManager.getString('cms', 'deleteActionLabel'):  {
						var delEvent:FlavorAssetEvent = new FlavorAssetEvent(FlavorAssetEvent.DELETE_FLAVOR_ASSET,
																			 (this.data as
							FlavorAssetWithParamsVO).kalturaFlavorAssetWithParams);
						delEvent.dispatch();
						break;
					}
					case resourceManager.getString('cms', 'reconvertActionLabel'):
					case resourceManager.getString('cms', 'convertActionLabel'):  {
						var convEvent:FlavorAssetEvent = new FlavorAssetEvent(FlavorAssetEvent.CREATE_FLAVOR_ASSET,
																			  (this.data as
							FlavorAssetWithParamsVO).kalturaFlavorAssetWithParams);
						convEvent.dispatch();
						break;
					}
				}
			}


			private function onOneActionClick(event:Event):void {
				var btn:Button = event.target as Button;
				launchAction(btn.label);
			}


			private function onActionChange(event:Event):void {
				var cb:ComboBox = event.target as ComboBox;
				var sl:String = cb.selectedLabel;
				cb.selectedIndex = -1;
				launchAction(sl);
			}
		]]>
	</mx:Script>
	<renderers:states>
			<mx:State name="convertState">
				<mx:RemoveChild target="{actionCombobox}"/>
				<mx:AddChild position="lastChild">
					<mx:Button id="oneActionBtn" label="{oneActionLabel}" useHandCursor="true" buttonMode="true"
							   fontSize="10" click="onOneActionClick(event)"/>
				</mx:AddChild>
			</mx:State>
			<mx:State name="convertingState">
				<mx:RemoveChild target="{actionCombobox}"/>
				<mx:AddChild position="lastChild">
					<mx:Image height="90%" toolTip="{resourceManager.getString('cms','convertingToolTip')}"
							  source="{progressImage}"/>
				</mx:AddChild>
			</mx:State>
			<mx:State name="emptyState">
				<mx:RemoveChild target="{actionCombobox}"/>
			</mx:State>
	</renderers:states>

	<mx:ComboBox editable="false" fontSize="10" dataProvider="{actionArr}" width="110" id="actionCombobox"
				 buttonMode="true" change="onActionChange(event)"
				 prompt="{resourceManager.getString('cms','selectActionLabel')}">
	</mx:ComboBox>
</renderers:FlavorAssetRendererBase>
