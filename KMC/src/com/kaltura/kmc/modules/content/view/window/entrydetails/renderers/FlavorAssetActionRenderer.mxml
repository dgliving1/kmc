<?xml version="1.0" encoding="utf-8"?>
<renderers:FlavorAssetRendererBase xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
								   horizontalAlign="center" verticalAlign="middle"
								   creationComplete="{onCreatoinComplete()}"
								   xmlns:renderers="com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.*">

	<mx:Script>
		<![CDATA[
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.kmc.modules.content.events.FlavorAssetEvent;
			import com.kaltura.kmc.modules.content.view.window.entrydetails.EntryFlavors;
			import com.kaltura.kmc.modules.content.view.window.entrydetails.FlavorsTable;
			import com.kaltura.kmc.modules.content.view.window.entrydetails.popupWindows.DistributionDetailsWindow;
			import com.kaltura.kmc.modules.content.vo.FlavorAssetWithParamsVO;
			import com.kaltura.types.KalturaFlavorAssetStatus;
			import com.kaltura.types.KalturaStatsKmcEventType;

			import mx.controls.Button;

			private const SpinnerImg:* = StyleManager.getStyleDeclaration(".imageBank").getStyle("SpinnerImg");

			[ArrayElementType("String")]
			/**
			 * actions in the combobox
			 * */
			private var _actionArr:Array = [];

//			[Bindable]
//			private var oneActionLabel:String = '';

			[Bindable]
			/**
			 * is the parent docuemnt is entryFlavors allow all actions
			 * */
			private var _isFlavorsView:Boolean;

			/**
			 * add the "upload" action to the actions list
			 * */
			private var _allowUpload:Boolean = true;

			/**
			 * add the "drop folder" action to the actions list
			 * */
			private var _allowMatch:Boolean = true;

			/**
			 * add the "link" action to the actions list
			 * */
			private var _allowLink:Boolean = true;

			/**
			 * add the "import" action to the actions list
			 * */
			private var _allowImport:Boolean = true;


			[Bindable]
			/**
			 * show the "preview" button
			 * */
			private var _showPreviewBtn:Boolean = false;

			/**
			 * current data object
			 * */
			private var _flavorWithParams:FlavorAssetWithParamsVO


//			override public function onCreatoinComplete():void {
//				super.onCreatoinComplete();
//			}


			override public function set data(value:Object):void {
				super.data = value;
				_flavorWithParams = value as FlavorAssetWithParamsVO;
				if (parentDocument is DistributionDetailsWindow) {
					_isFlavorsView = false;
				}
				else if (parentDocument is EntryFlavors) {
					_isFlavorsView = true;
					//sets actions according to r&p
					_allowUpload = parentDocument.allowUpload && parentDocument.multiFlavorsIngestionAllowed;
					_allowMatch = parentDocument.allowMatchFromDrop && parentDocument.multiFlavorsIngestionAllowed;
					_allowLink = parentDocument.allowLink && parentDocument.multiFlavorsIngestionAllowed;
					_allowImport = parentDocument.allowImport && parentDocument.multiFlavorsIngestionAllowed;
				}

				setActions();
			}


			override public function validateNow():void {
				setActions();
				super.validateNow();
			}


			private function setActions():void {

				_actionArr = new Array();
				if (_flavorWithParams.kalturaFlavorAssetWithParams.flavorAsset == null) {
					if (_flavorWithParams.hasOriginal) {
						this.currentState = null;
						_actionArr.push(resourceManager.getString('cms', 'convertActionLabel'));
						addIngestionOptions();
					}
					else if (_allowUpload || _allowMatch || _allowLink || _allowImport) {
						this.currentState = null;
						addIngestionOptions();
					}
					else {
						this.currentState = "emptyState";
					}
				}
				else {
					if (_flavorWithParams.kalturaFlavorAssetWithParams.flavorAsset.isOriginal) {
						var status:int = _flavorWithParams.kalturaFlavorAssetWithParams.flavorAsset.status;
						if ((status == KalturaFlavorAssetStatus.CONVERTING) || (status == KalturaFlavorAssetStatus.QUEUED) || (status == KalturaFlavorAssetStatus.IMPORTING) || (status == KalturaFlavorAssetStatus.VALIDATING)) {
							this.currentState = "convertingState";
						}
						else {
							this.currentState = null;
							_actionArr.push(resourceManager.getString('cms', 'deleteActionLabel'));
							_actionArr.push(resourceManager.getString('cms', 'downloadActionLabel'));
							addIngestionOptions();
							if (_flavorWithParams.kalturaFlavorAssetWithParams.flavorAsset.isWeb) {
								_actionArr.push(resourceManager.getString('cms', 'previewActionLabel'));
								_showPreviewBtn = true;
							}
						}
					}
					else {
						switch (_flavorWithParams.kalturaFlavorAssetWithParams.flavorAsset.status) {
							case KalturaFlavorAssetStatus.CONVERTING:
							case KalturaFlavorAssetStatus.QUEUED:
							case KalturaFlavorAssetStatus.IMPORTING:
							case KalturaFlavorAssetStatus.VALIDATING:  {
								this.currentState = "convertingState";
								break;
							}
							case KalturaFlavorAssetStatus.DELETED:  {
								if (_flavorWithParams.hasOriginal) {
									this.currentState = null;
									_actionArr.push(resourceManager.getString('cms', 'convertActionLabel'));
									addIngestionOptions();
								}
								else if (_allowUpload || _allowMatch || _allowLink || _allowImport) {
									this.currentState = null;
									addIngestionOptions();
								}
								else {
									this.currentState = "emptyState";
								}
								break;
							}
							case KalturaFlavorAssetStatus.ERROR:
							case KalturaFlavorAssetStatus.NOT_APPLICABLE:  {
								if (_flavorWithParams.hasOriginal) {
									this.currentState = null;
									_actionArr.push(resourceManager.getString('cms', 'reconvertActionLabel'));
									addIngestionOptions();
								}
								else if (_allowUpload || _allowMatch || _allowLink || _allowImport) {
									this.currentState = null;
									addIngestionOptions();
								}
								else {
									this.currentState = "emptyState";
								}
								break;
							}

							case KalturaFlavorAssetStatus.READY:  {
								this.currentState = null;
								_actionArr.push(resourceManager.getString('cms', 'deleteActionLabel'));
								_actionArr.push(resourceManager.getString('cms', 'downloadActionLabel'));
								addIngestionOptions();
								if (_flavorWithParams.kalturaFlavorAssetWithParams.flavorAsset.isWeb) {
									_actionArr.push(resourceManager.getString('cms', 'previewActionLabel'));
									_showPreviewBtn = true;
								}
								if (_flavorWithParams.hasOriginal) {
									_actionArr.push(resourceManager.getString('cms', 'reconvertActionLabel'));
								}

								break;
							}
						}
					}
				}
				if (actionCombobox) {
					actionCombobox.dataProvider = _actionArr;
					//workaround for a flex bug - dropdown didn't show correct data
					if (actionCombobox.dropdown)
						actionCombobox.dropdown.dataProvider = _actionArr;
				}
			}


			private function dispatchPreview():void {
				var preEvent:FlavorAssetEvent = new FlavorAssetEvent(FlavorAssetEvent.PREVIEW_FLAVOR_ASSET, _flavorWithParams.kalturaFlavorAssetWithParams);
				preEvent.dispatch();
			}


			/**
			 * adds the ingestion options to actionArr, according to permissions
			 * */
			private function addIngestionOptions():void {
				if (_allowUpload)
					_actionArr.push(resourceManager.getString('cms', 'uploadActionLabel'));
				if (_allowMatch)
					_actionArr.push(resourceManager.getString('cms', 'matchActionLabel'));
				if (_allowLink)
					_actionArr.push(resourceManager.getString('cms', 'linkActionLabel'));
				if (_allowImport)
					_actionArr.push(resourceManager.getString('cms', 'importActionLabel'));
			}


			private function launchAction(actionName:String):void {
				switch (actionName) {
					case resourceManager.getString('cms', 'previewActionLabel'):  {
						dispatchPreview();
						break;
					}
					case resourceManager.getString('cms', 'downloadActionLabel'):  {
						var dlEvent:FlavorAssetEvent = new FlavorAssetEvent(FlavorAssetEvent.DOWNLOAD_FLAVOR_ASSET, _flavorWithParams.kalturaFlavorAssetWithParams);
						dlEvent.dispatch();
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_DOWNLOAD, "EntryDrillDown>FlavorTab>DownloadAsset", _flavorWithParams.kalturaFlavorAssetWithParams.entryId);

						break;
					}
					case resourceManager.getString('cms', 'deleteActionLabel'):  {
						var delEvent:FlavorAssetEvent = new FlavorAssetEvent(FlavorAssetEvent.DELETE_FLAVOR_ASSET, _flavorWithParams.kalturaFlavorAssetWithParams);
						delEvent.dispatch();
						break;
					}
					case resourceManager.getString('cms', 'reconvertActionLabel'):
					case resourceManager.getString('cms', 'convertActionLabel'):  {
						var convEvent:FlavorAssetEvent = new FlavorAssetEvent(FlavorAssetEvent.CREATE_FLAVOR_ASSET, _flavorWithParams.kalturaFlavorAssetWithParams);
						convEvent.dispatch();
						break;
					}
					case resourceManager.getString('cms', 'uploadActionLabel'):  {
						dispatchEvent(new Event(FlavorsTable.UPLOAD_FLAVOR, true));
						break;
					}
					case resourceManager.getString('cms', 'matchActionLabel'):  {
						dispatchEvent(new Event(FlavorsTable.MATCH_FLAVOR, true));
						break;
					}
					case resourceManager.getString('cms', 'linkActionLabel'):  {
						dispatchEvent(new Event(FlavorsTable.LINK_FLAVOR, true));
						break;
					}
					case resourceManager.getString('cms', 'importActionLabel'):  {
						dispatchEvent(new Event(FlavorsTable.IMPORT_FLAVOR, true));
						break;
					}

				}
			}


			private function onOneActionClick(event:Event):void {
				var btn:Button = event.target as Button;
				launchAction(btn.label);
			}


			private function onActionChange(event:Event):void {
				var cb:ComboBox = event.target as ComboBox;
				var sl:String = cb.selectedLabel;
				cb.selectedIndex = -1;
				launchAction(sl);
			}
		]]>
	</mx:Script>
	<renderers:states>
		<!--<mx:State name="convertState">
			 <mx:RemoveChild target="{actionCombobox}"/>
			 <mx:AddChild position="lastChild">
			 <mx:Button id="oneActionBtn" label="{oneActionLabel}" useHandCursor="true" buttonMode="true"
			 fontSize="10" click="onOneActionClick(event)" styleName="dataGridBtn" width="110"/>
			 </mx:AddChild>
			 </mx:State>-->
		<mx:State name="convertingState">
			<mx:RemoveChild target="{actionCombobox}"/>
			<mx:AddChild position="lastChild">
				<mx:Image height="90%" toolTip="{resourceManager.getString('cms','convertingToolTip')}"
						  source="{SpinnerImg}"/>
				<!-- SpinnerImg comes from the skin fla -->
			</mx:AddChild>
		</mx:State>
		<mx:State name="emptyState">
			<mx:RemoveChild target="{actionCombobox}"/>
		</mx:State>
	</renderers:states>

	<mx:ComboBox id="actionCombobox" editable="false" fontSize="10" width="110" buttonMode="true"
				 change="onActionChange(event)" styleName="dataGridComboBox"
				 prompt="{resourceManager.getString('cms','selectActionLabel')}" visible="{_isFlavorsView}"
				 includeInLayout="{_isFlavorsView}">
	</mx:ComboBox>
	<mx:Button label="{resourceManager.getString('cms', 'previewActionLabel')}" click="{dispatchPreview()}"
			   visible="{_showPreviewBtn &amp;&amp; !_isFlavorsView}"
			   includeInLayout="{_showPreviewBtn &amp;&amp; !_isFlavorsView}" styleName="dataGridBtn" fontSize="10"
			   width="110"/>
</renderers:FlavorAssetRendererBase>
