<?xml version="1.0" encoding="utf-8"?>
<!--- 
 OneRule encapsulates a filter with entries list.
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" 
		 xmlns:view="com.kaltura.kmc.modules.content.view.*"
		 xmlns:playlist="com.kaltura.kmc.modules.content.view.content.playlist.*" 
		 creationComplete="onCreationComplete()"
		 xmlns:filter="com.kaltura.kmc.modules.content.view.filter.*" >
	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.kaltura.kmc.modules.content.events.EntryEvent;
			import com.kaltura.kmc.modules.content.events.RuleBasedTypeEvent;
			import com.kaltura.kmc.modules.content.model.CmsModelLocator;
			import com.kaltura.kmc.modules.content.model.FilterModel;
			import com.kaltura.kmc.modules.content.vo.CategoryVO;
			import com.kaltura.types.KalturaPlaylistType;
			import com.kaltura.vo.KMCMetadataProfileVO;
			import com.kaltura.vo.KalturaMediaEntryFilter;
			import com.kaltura.vo.KalturaMediaEntryFilterForPlaylist;
			import com.kaltura.vo.KalturaPlaylist;
			
			import mx.collections.ArrayCollection;

			/**
			 * defines the value of the type property for the filterWasChanged event
			 * */
			public static const FILTER_WAS_CHANGED:String = "filterWasChanged";

			/**
			 * defines the value of the type property for the switchToAdvanced event
			 * */
			public static const SWITCH_TO_ADVANCED:String = "switchToAdvanced";


			[Bindable]
			/**
			 * a list of entries which make up the playlist
			 * */
			public var playlistEntries:ArrayCollection = new ArrayCollection();
			
			private var _ruleToEdit:KalturaMediaEntryFilterForPlaylist;
			
			public function set ruleToEdit(value:KalturaMediaEntryFilterForPlaylist):void {
				_ruleToEdit = value;
				// make sure to view only allowed content and hide moderation container
				//TODO (filter) remove hardcoded references
				value.moderationStatusIn = "2,6,1,5";
				filter.moderationStatus.allModerationStatus.selected = false;
				filter.moderationStatus.visible = false;
				filter.moderationStatus.includeInLayout = false;
				filter.moderationStatus.visible;
				// convertion status
				value.statusIn = "2,1";
				//TODO (filter) remove hardcoded references
				filter.conversionStatus.allConversionStatusBtn.selected = false;
				filter.conversionStatus.convErrorBtn.selected = false;
				filter.conversionStatus.convUploadingBtn.selected = false;
				filter.conversionStatus.convConvertingBtn.selected = true;
				filter.conversionStatus.convReadyBtn.selected = true;
				filter.ps3filter = value;
				entries.limit = value.limit;
				entries.ruleBasedPlaylistOrderBy.selectedIndex = PlaylistEntries.ORDER_BY_ARR.indexOf(value.orderBy);
				//set filter to view only allowed entries and hide the moderation controllers
			}
			
			public function get ruleToEdit():KalturaMediaEntryFilterForPlaylist {
				return _ruleToEdit;
			}
			
			[Bindable]
			public var showAdvanceModeBtn:Boolean = true;
			
			[Bindable]
			public var filterData:FilterModel;

			[Bindable]
			public var distributionProfilesArray : Array;
			
//			public function onRequestedDataLoaded():void {
//				//TODO we never triggger dataload here, so we never get here... maybe triggered from wrapper?
//				filter.init();
//				if (_ruleToEdit) {
//					// make sure to view only allowed content and hide moderation container
//					// (filter) remove hardcoded references
//					_ruleToEdit.moderationStatusIn = "2,6,1,5";
//					filter.moderationStatus.allModerationStatus.selected = false;
//					filter.moderationStatus.visible = false;
//					filter.moderationStatus.includeInLayout = false;
//					filter.moderationStatus.visible;
//					// convertion status
//					_ruleToEdit.statusIn = "2,1";
//					// (filter) remove hardcoded references
//					filter.conversionStatus.allConversionStatusBtn.selected = false;
//					filter.conversionStatus.convErrorBtn.selected = false;
//					filter.conversionStatus.convUploadingBtn.selected = false;
//					filter.conversionStatus.convConvertingBtn.selected = true;
//					filter.conversionStatus.convReadyBtn.selected = true;
//					filter.ps3filter = _ruleToEdit;
//					entries.limit = _ruleToEdit.limit;
//					entries.ruleBasedPlaylistOrderBy.selectedIndex = PlaylistEntries.ORDER_BY_ARR.indexOf(_ruleToEdit.orderBy);
//					//set filter to view only allowed entries and hide the moderation controllers
//				}
//			}

			private function onCreationComplete():void {
				entries.upDownContainer.visible = false;
				entries.upDownContainer.includeInLayout = false;
			}

			/**
			 * take current rule and execute it to estimate the outputlse;
			 * filter.moderationStatusContainer.includeInLayout
			 */
			public function runRule():void {
				var playlist:KalturaPlaylist = new KalturaPlaylist();
				playlist.totalResults = entries.maxEntriesInPlaylist.value;
				playlist.playlistType = KalturaPlaylistType.DYNAMIC;

				var orderByStr:String = entries.getSelectedOrderBy();

				var kmef:KalturaMediaEntryFilter = filter.ps3filter;
				kmef.moderationStatusIn = "2,6,1,5";
				kmef.orderBy = orderByStr;
				// request only ready assets
				kmef.statusIn = "2,1";
				playlist.filters.push(kmef);
				playlist.parts = playlistEntries;

				var cgEvent:CairngormEvent = new RuleBasedTypeEvent(RuleBasedTypeEvent.ONE_RULE);
				cgEvent.dispatch();

				cgEvent = new EntryEvent(EntryEvent.GET_RULE_BASED_PLAYLIST, playlist);
				cgEvent.dispatch();

				if (!_isFirstRun)
					dispatchEvent(new Event(FILTER_WAS_CHANGED));

				_isFirstRun = false;
			}
			private var _isFirstRun:Boolean = true;



			/**
			 * Get current rule filter
			 */
			public function get ruleFilter():KalturaMediaEntryFilterForPlaylist {
				var plf:KalturaMediaEntryFilterForPlaylist = filter.playlistFilter;
				plf.statusIn = "2,1"; // only ready items 
				plf.limit = entries.maxEntriesInPlaylist.value;
				plf.orderBy = entries.getSelectedOrderBy();
				return plf;
			}
			
			public function get editable():Boolean {
				return entries.enabled;
			}
			
			public function set editable(value:Boolean):void {
				filter.enabled = value;
				advancedBtn.enabled = value;
				advancedBtn.buttonMode = value;
				entries.editable = value;
			}
		]]>
	</mx:Script>
	<mx:Metadata>
		 [Event(name="filterWasChanged", type="flash.events.Event")]
		 [Event(name="switchToAdvanced", type="flash.events.Event")]
	</mx:Metadata>
	<mx:VBox height="100%" verticalGap="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:Label text="{resourceManager.getString('cms', 'filters')}" styleName="formSubTitleLabel"/>
		<filter:Filter id="filter" width="260" height="100%" 
					   newSearch="{runRule()}" 
					   categories="{filterData.categories}"
					   catMap="{filterData.categoriesMap}"
					   enableCustomData="{filterData.enableCustomData}"
					   metadataProfilesArray="{filterData.metadataProfiles}" 
					   showSchedulingOptions="false"
					   showAccessControlOptions="false" 
					   showModerationOptions="false" 
					   showStatusOptions="false"
					   enableDistribution="{filterData.enableDistribution}"
					   distributionProfileArr="{distributionProfilesArray}"/>
		<mx:LinkButton id="advancedBtn" label="{resourceManager.getString('cms','switchToAdvanceMode')}"
					   click="dispatchEvent(new Event(OneRule.SWITCH_TO_ADVANCED))" includeInLayout="{showAdvanceModeBtn}"
					   visible="{showAdvanceModeBtn}"/>
	</mx:VBox>
	<playlist:PlaylistEntries id="entries" width="100%" height="100%" dataProvider="{playlistEntries}"
							  updatedData="{runRule()}" />
</mx:HBox>
