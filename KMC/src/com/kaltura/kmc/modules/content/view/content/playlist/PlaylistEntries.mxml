<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:view="com.kaltura.kmc.modules.content.view.*" creationComplete="onCreationComplete()"
	verticalGap="0">
<mx:Script>
	<![CDATA[
		import com.kaltura.types.KalturaPlayableEntryOrderBy;
		import com.kaltura.utils.KTimeUtil;
		import com.kaltura.vo.KalturaBaseEntry;
		import com.kaltura.vo.KalturaMediaEntry;
		
		import mx.collections.ArrayCollection;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.events.CollectionEvent;
		[Bindable]
		private var _dataProvider:ArrayCollection;
		[Bindable]
		public var limit:uint = 20;
		[Bindable]
		public var showLinks:Boolean= true;
		[Bindable]
		public var allowSort:Boolean= false;
		[Bindable]
		public var tableTitle:String;
		
		
		public static const MOVE_ITEM_UP:String = "moveItemUp";
		public static const MOVE_ITEM_DOWN:String = "moveItemDown";
		public static const UPDATED_DATA:String = "updatedData";
		
		[ArrayElementType("String")]
		public static const ORDER_BY_ARR : Array = [KalturaPlayableEntryOrderBy.PLAYS_DESC, 
													"recent"/* KalturaPlayableEntryOrderBy.CREATED_AT_DESC */, 
													KalturaPlayableEntryOrderBy.CREATED_AT_ASC, //TODO change to most recent start date
													KalturaPlayableEntryOrderBy.RANK_DESC];
		
		[Bindable]
		public function get dataProvider():ArrayCollection
		{
			return _dataProvider;
		}
		
		public function set dataProvider(dataProvider:ArrayCollection):void
		{
			if(_dataProvider)
				_dataProvider.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onDpChange);
				
			_dataProvider = dataProvider;
			_dataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, onDpChange);
			onDpChange();
		}
		
		
		private function onCreationComplete():void
		{
			_dataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, onDpChange);
			if (!tableTitle)
				tableTitle = resourceManager.getString('cms', 'playlistResultLabel');
		}
		private function onDpChange(evt:CollectionEvent=null):void
		{
			if(dataProvider)
			{
				var sum:Number=0;
				for (var i:uint;i<dataProvider.length;i++)
				{
					KalturaMediaEntry
					if (dataProvider[i].hasOwnProperty("duration"))
						sum+=dataProvider[i]["duration"];
				}
				playlistDuration.text = KTimeUtil.formatTime(sum);
			}
		}
		
		public function getSelectedOrderBy():String
		{
			var index:uint = ruleBasedPlaylistOrderBy.selectedIndex;
			return ORDER_BY_ARR[index].toString();
		}
		public function setSelectedOrderBy(orderBy:String):void
		{
			for (var i:uint = 0 ; i<ORDER_BY_ARR.length ; i++ )
			{
				if (ORDER_BY_ARR[i] == orderBy )
					ruleBasedPlaylistOrderBy.selectedIndex = i;
			}	
		}
		
		private function onEntryTableCreatedComplete():void
		{
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'playlistType'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'idHeader'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'rating'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'flags'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'createAt'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'thumbnail'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'playerLoads'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'moderationStatus'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'rating'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'creator'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'status'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'adminTags'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'preview'));
				playlistEntriesList.removeColumn(resourceManager.getString('cms', 'intime'));
				playlistEntriesList.allowMultipleSelection = false;
				
				for each(var col:DataGridColumn in playlistEntriesList.columns)
				{
					col.width = 40;
				} 
				
		}
		/**
		 * notify that the numeric stepper or order by wer changed 
		 */
		private function changedData():void
		{
			dispatchEvent(new Event(UPDATED_DATA));
		}
		private var numericStepperTimer:Timer;
		/**
		 * send notification about changes with deley so every click will not make a new search
		 */
		private function onNumericChange():void
		{
			if(numericStepperTimer)
				numericStepperTimer.stop();
			numericStepperTimer = null;
			numericStepperTimer = new Timer(700,1);
			numericStepperTimer.addEventListener(TimerEvent.TIMER_COMPLETE,onTimer);
			numericStepperTimer.start();
		}
		private function onTimer(evt:TimerEvent):void
		{
			numericStepperTimer.removeEventListener(TimerEvent.TIMER_COMPLETE,onTimer);
			numericStepperTimer.stop();
			numericStepperTimer = null;
			changedData();
		}
		
		public function get editable():Boolean {
			return upBtn.enabled;
		}
		
		public function set editable(value:Boolean):void {
			upBtn.enabled = value;
			upBtn.buttonMode = value;
			downBtn.enabled = value;
			downBtn.buttonMode = value;
			ruleBasedPlaylistOrderBy.enabled = value;
			maxEntriesInPlaylist.enabled = value;
			showLinks = value;
		}
		
	]]>
</mx:Script>
<mx:Metadata>
	[Event(name="moveItemUp", type="flash.events.Event")] 
	[Event(name="moveItemDown", type="flash.events.Event")] 
	[Event(name="updatedData", type="flash.events.Event")] 
</mx:Metadata>
	<mx:Label text="{tableTitle}" width="100%" styleName="formSubTitleLabel"/>
	<mx:HBox id="controlBar" width="100%" styleName="DataGridActions" visible="false" includeInLayout="false" >
	</mx:HBox>
	<view:EntryTable id="playlistEntriesList" width="100%" height="100%" 	
			 kalturaSorting="false" sortableColumns="{allowSort}" showLinks="{showLinks}"
			 dataProvider="{dataProvider}" creationComplete="onEntryTableCreatedComplete()" 
			 dragEnabled="false" dropEnabled="false" dragMoveEnabled="false" />
	<mx:HBox id="playlistSummery" width="100%" styleName="DataGridActions" height="40">
		<mx:HBox width="100%" horizontalAlign="center">
			<mx:HBox horizontalGap="1">
				<mx:Label text="{resourceManager.getString('cms', 'entries') + ':'}" />
				<mx:Label id="entriesAmount" text="{dataProvider.length}" />
			</mx:HBox>
			<mx:HBox horizontalGap="1">
				<mx:Label text="{resourceManager.getString('cms', 'duration') + ':'}" />
				<mx:Label id="playlistDuration" text='00:00'/>
			</mx:HBox>
		</mx:HBox>
		<mx:VBox id="upDownContainer" styleName="upDownButtonsBox">
			<mx:Button id="upBtn" buttonMode="true" styleName="movUpBtn" click="{dispatchEvent(new Event(MOVE_ITEM_UP))}"/>
			<mx:Button id="downBtn" buttonMode="true" styleName="movDownBtn" click="{dispatchEvent(new Event(MOVE_ITEM_DOWN))}"/>
		</mx:VBox>
	</mx:HBox>
	<mx:HBox id="ruleBaseBar" width="100%" styleName="DataGridActions">
		<mx:Label text="{resourceManager.getString('cms', 'orderBy')}" />
		<mx:ComboBox id="ruleBasedPlaylistOrderBy" width="150" change="{changedData()}" >
			<mx:dataProvider>
				{[
					resourceManager.getString('cms', 'ruleBasedPlaylistOrderBy_MostPlayer'), 
					resourceManager.getString('cms', 'ruleBasedPlaylistOrderBy_MostRecent'), 
					//resourceManager.getString('cms', 'ruleBasedPlaylistOrderBy_RecentDate') ,
					resourceManager.getString('cms', 'ruleBasedPlaylistOrderBy_HighstRated') 
					//resourceManager.getString('cms', 'ruleBasedPlaylistOrderBy_MostViewed24H') , 
					//resourceManager.getString('cms', 'ruleBasedPlaylistOrderBy_MostViewed7Days'),
					//resourceManager.getString('cms', 'ruleBasedPlaylistOrderBy_MostViewed30Days')
				]}
			</mx:dataProvider>
		</mx:ComboBox>
		<mx:Label text="{resourceManager.getString('cms', 'maxDynPlst')}" />
		<mx:NumericStepper id="maxEntriesInPlaylist" minimum="1" maximum="50" width="52" value="{limit}"
			change="{onNumericChange()}"/>
	</mx:HBox>
</mx:VBox>
