<?xml version="1.0" encoding="utf-8"?>
<!--- 
 Scheduling tab of the Filter.
 This class handles operations and maintenance of scheduling related ui.
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%"
		 implements="com.kaltura.kmc.modules.content.view.filter.IFilterTab">
	<mx:Metadata>
		[Event(name="filterChanged", type="flash.events.Event")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.vo.KalturaBaseEntryFilter;
			import com.kaltura.vo.KalturaMediaEntryFilter;
			
			import mx.controls.Alert;

			/**
			 * last valid start date
			 * */
			private var _scheduldStartDate:Date = null;
			
			/**
			 * last valid end date
			 * */
			private var _scheduldEndDate:Date = null;

			
			public function setFilter(filterVo:KalturaMediaEntryFilter):void {
				var now:Number = new Date().time / 1000; 
				
				finishedBtn.selected = filterVo.endDateLessThanOrEqual != int.MIN_VALUE && filterVo.endDateLessThanOrEqual < now;
				
				liveBtn.selected = filterVo.startDateLessThanOrEqualOrNull <= now && 
									filterVo.endDateGreaterThanOrEqualOrNull >= now;
				
				futureBtn.selected = filterVo.startDateGreaterThanOrEqual > now;
				
				var sched:Boolean = false;
				if (filterVo.endDateGreaterThanOrEqualOrNull && filterVo.endDateGreaterThanOrEqualOrNull != int.MIN_VALUE) {
					schedFromDate.selectedDate = new Date(null, null, null, null, null, null, filterVo.endDateGreaterThanOrEqualOrNull * 1000);
					sched = true;
				}
				if (filterVo.startDateLessThanOrEqualOrNull && filterVo.startDateLessThanOrEqualOrNull != int.MIN_VALUE) {
					schedToDate.selectedDate = new Date(null, null, null, null, null, null, filterVo.startDateLessThanOrEqualOrNull * 1000);
					sched = true;
				}
				scheduledBtn.selected = sched;
				
				// "all" button is selected if all the above are selected, or if none of them is.
				allSchedulingBtn.selected = finishedBtn.selected && liveBtn.selected && futureBtn.selected && sched;
				allSchedulingBtn.selected ||= !finishedBtn.selected && !liveBtn.selected && !futureBtn.selected && !sched;
				
				if (allSchedulingBtn.selected) {
					finishedBtn.selected = false;
					liveBtn.selected = false; 
					futureBtn.selected = false;
					scheduledBtn.selected = false;
				}
				
			}
			
			

			/**
			 * scheduling buttons click handler:
			 * de/select relevant buttons and start a new search
			 */
			private function onSchedulingBtnClick(evt:Event):void {
				schedFromDate.selectedDate = schedToDate.selectedDate = null;
				if ((evt.target as Button).selected) {
					if (evt.target != allSchedulingBtn) {
						allSchedulingBtn.selected = false;
					}
					if (evt.target != liveBtn) {
						liveBtn.selected = false;
					}
					if (evt.target != futureBtn) {
						futureBtn.selected = false;
					}
					if (evt.target != finishedBtn) {
						finishedBtn.selected = false;
					}
					if (evt.target != scheduledBtn) {
						scheduledBtn.selected = false;
					}
					else {
						schedFromDate.selectedDate = new Date();
						schedToDate.selectedDate = null;
					}
				}
				else if ((schedFromDate.data == null) && (schedToDate.data == null) && !liveBtn.selected &&
					!finishedBtn.selected && !futureBtn.selected) {
					allSchedulingBtn.selected = true;
				}

				dispatchEvent(new Event(BaseFilter.FILTER_CHANGED));
			}



			/**
			 * scheduling date fields click handler:
			 * de/select relevant buttons and start new search
			 * */
			private function onSchedulingDateFieldClick(evt:Event):void {
				scheduledBtn.selected = true;
				allSchedulingBtn.selected = false;
				liveBtn.selected = false;
				finishedBtn.selected = false;
				futureBtn.selected = false;
				if (validateDates(schedFromDate, schedToDate)) {
					// save new values
					_scheduldStartDate = (schedFromDate.selectedDate !=
						null) ? new Date(schedFromDate.selectedDate.time) : null;
					_scheduldEndDate = (schedToDate.selectedDate !=
						null) ? new Date(schedToDate.selectedDate.time) : null;				}
				else {
					Alert.show(resourceManager.getString('cms', 'fromToDateAlert'));
					// restore values:
					schedToDate.selectedDate = _scheduldEndDate;
					schedFromDate.selectedDate = _scheduldStartDate;
					schedToDate.validateNow();
					schedFromDate.validateNow();
				}

				dispatchEvent(new Event(BaseFilter.FILTER_CHANGED));

			}


			/**
			 * validate start date is before end date.
			 * @param fromDate	starting date
			 * @param toDate	end date
			 * @return true if dates are valid, false otherwise.
			 * */
			private function validateDates(fromDate:DateField, toDate:DateField):Boolean {
				var isDatesOk:Boolean = true;
				if ((fromDate.selectedDate != null) && (toDate.selectedDate != null)) {
					// starting date is after ending date.
					if (fromDate.selectedDate.time >= toDate.selectedDate.time) {
						isDatesOk = false;
					}
				}
				return isDatesOk;
			}


			/**
			 * Clear bot scedualed
			 */
			private function clearScedualedDates():void {
				schedFromDate.selectedDate = null;
				schedToDate.selectedDate = null;
			}


			/**
			 * select all scedualed - clear the dateFields
			 */
			private function allScheduling(evt:Event):void {
				if ((evt.target as Button).selected) {
					clearScedualedDates();
					liveBtn.selected = false;
					finishedBtn.selected = false;
					scheduledBtn.selected = false;
					futureBtn.selected = false;
				}
				else {
					(evt.target as Button).selected = true;
				}
				dispatchEvent(new Event(BaseFilter.FILTER_CHANGED));
			}

			/**
			 * empty implementation - this panel has more than one string.
			 * use 
			 * */
			public function getFilterString():String {
				return '';
			}

			/**
			 * set scheduling data on filter object, according to tab data.
			 * @param filter	filter object to update
			 * */
			public function getSchedulingData(filter:KalturaBaseEntryFilter):void {
				var now:Number;

				// scheduling
				if (allSchedulingBtn.selected) {
					// do nothing
				}
				else if (liveBtn.selected) {
					now = new Date().time / 1000;
					filter.startDateLessThanOrEqualOrNull = now;
					filter.endDateGreaterThanOrEqualOrNull = now;
				}
				else if (futureBtn.selected) {
					now = new Date().time / 1000;
					filter.startDateGreaterThanOrEqual = now;
				}
				else if (finishedBtn.selected) {
					now = new Date().time / 1000;
					filter.endDateLessThanOrEqual = now;
				}
				else { // custom dates
					if (schedFromDate.selectedDate != null) {
						var startTime:Number = schedFromDate.selectedDate.time / 1000;
						filter.endDateGreaterThanOrEqualOrNull = startTime;
					}

					if (schedToDate.selectedDate != null) {
						var endTime:Number = schedToDate.selectedDate.time / 1000;
						filter.startDateLessThanOrEqualOrNull = endTime;
					}
				}
			}


			public function get buttons():Array {
				return [allSchedulingBtn, finishedBtn, liveBtn, futureBtn, scheduledBtn];
			}
		]]>
	</mx:Script>
	<mx:Button id="allSchedulingBtn" width="100%" label="{resourceManager.getString('cms', 'anyTimeBtn')}" toggle="true"
			   styleName="mainFilterGroupButton" selected="true" click="{allScheduling(event)}"/>
	<mx:Button id="finishedBtn" width="100%" label="{resourceManager.getString('cms', 'finishedBtn')}" toggle="true"
			   styleName="innerFilterGroupButton" click="{onSchedulingBtnClick(event)}"/>
	<mx:Button id="liveBtn" width="100%" label="{resourceManager.getString('cms', 'liveBtn')}" toggle="true"
			   styleName="innerFilterGroupButton" click="{onSchedulingBtnClick(event)}"/>
	<mx:Button id="futureBtn" width="100%" label="{resourceManager.getString('cms', 'futureBtn')}" toggle="true"
			   styleName="innerFilterGroupButton" click="{onSchedulingBtnClick(event)}"/>
	<mx:Button id="scheduledBtn" width="100%" label="{resourceManager.getString('cms', 'scheduledBtn')}" toggle="true"
			   styleName="innerFilterGroupButton" click="{onSchedulingBtnClick(event)}"
			   toolTip="{resourceManager.getString('cms', 'scheduledBtnToolTip')}"/>
	<mx:HBox width="100%" styleName="bottomDatesHbox">
		<mx:DateField id="schedFromDate" width="{Filter.DATE_FIELD_WIDTH}" fontSize="11"
					  change="{onSchedulingDateFieldClick(event)}"
					  toolTip="{resourceManager.getString('cms', 'formDateToolTip')}"/>
		<mx:Label text="-"/>
		<mx:DateField id="schedToDate" width="{Filter.DATE_FIELD_WIDTH}" fontSize="11"
					  change="{onSchedulingDateFieldClick(event)}"
					  toolTip="{resourceManager.getString('cms', 'toDateToolTip')}"/>
	</mx:HBox>
</mx:VBox>
