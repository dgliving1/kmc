<?xml version="1.0" encoding="utf-8"?>
<!---
Thumbnails tab of EntryDetailsWin
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%">
	<mx:Script>
		<![CDATA[
			import com.kaltura.kmc.modules.content.events.DistributionProfileEvent;
			import com.kaltura.kmc.modules.content.events.ThumbnailAssetEvent;
			import com.kaltura.kmc.modules.content.events.UploadFromImageThumbAssetEvent;
			import com.kaltura.kmc.modules.content.model.Context;
			import com.kaltura.kmc.modules.content.model.EntryDetailsModel;
			import com.kaltura.kmc.modules.content.model.ThumbnailWithDimensions;
			import com.kaltura.kmc.modules.content.view.window.entrydetails.popupWindows.CropThumbnailWindow;
			import com.kaltura.kmc.modules.content.view.window.entrydetails.popupWindows.GrabFromVideoWindow;
			import com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.ThumbAssetDistributionProfilesRenderer;
			import com.kaltura.types.KalturaFlavorAssetStatus;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaMixEntry;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.managers.PopUpManager;

			public static const IMAGE_TYPES:String = "*.jpg;*.jpeg;*.gif;*.png";
			private var _fileReference:FileReference;
			
			[Bindable]
			private var _selectedEntry:KalturaBaseEntry;	
			private var _entryDetailsModel:EntryDetailsModel;
			private var _context:Context;
			[Bindable]
			private var _dimensionsArray:Array;
			[Bindable]
			private var _uploadThumbnailActionsDP:Array;
			private var _cropperWindow:CropThumbnailWindow;
			
			public function get context():Context
			{
				return _context;
			}

			public function set context(value:Context):void
			{
				_context = value;
			}

			public function get entryDetailsModel():EntryDetailsModel
			{
				return _entryDetailsModel;
			}

			public function set entryDetailsModel(value:EntryDetailsModel):void
			{
				_entryDetailsModel = value;
				if (!_entryDetailsModel)
					return;
				BindingUtils.bindSetter(setDimensionsArray, _entryDetailsModel.distributionProfileInfo, "thumbnailDimensionsArray");
				//will add the "profiles" column
				if (_entryDetailsModel.enableDistribution) {
					var columnsArray:Array = dataGrid.columns;
					columnsArray.splice(2,0, partnersCol);
					dataGrid.columns = columnsArray;
					//should be sent only once
					if (_entryDetailsModel.listDistributionProfilesRequired) {
						var listDistributionProfilesEvent:DistributionProfileEvent = new DistributionProfileEvent(DistributionProfileEvent.LIST);
						listDistributionProfilesEvent.dispatch();
						_entryDetailsModel.listDistributionProfilesRequired = false;
					}
				}
				
			}
			
			public function setDimensionsArray(array:Array):void {
				_dimensionsArray = array;
			}
			
			public function get selectedEntry():KalturaBaseEntry
			{
				return _selectedEntry;
			}

			public function set selectedEntry(value:KalturaBaseEntry):void
			{
				if (!value)
					return;
				_selectedEntry = value;
				
				//set the available operations for current entry
				_uploadThumbnailActionsDP = new Array(resourceManager.getString('cms','upload'));
				if ((_selectedEntry is KalturaMixEntry) || (int(_selectedEntry.mediaType) == KalturaMediaType.VIDEO)) {
					_uploadThumbnailActionsDP.push(resourceManager.getString('cms','grabFromVideo'));
					if (int(_selectedEntry.mediaType) == KalturaMediaType.VIDEO)
						_uploadThumbnailActionsDP.push(resourceManager.getString('cms','cropNewThumbnail'));
				}
				
				var listThumbsEvent:ThumbnailAssetEvent = new ThumbnailAssetEvent(ThumbnailAssetEvent.LIST);
				listThumbsEvent.dispatch();	
			}			
			
			private function onActionCBItemClick(event:Event):void {
				switch (actionCB.selectedItem) {
					case resourceManager.getString('cms','upload'):
						uploadNewThumbnail();
						break;
					case resourceManager.getString('cms','grabFromVideo'):
						openGrabFromVideoPopup();
						break;
					case resourceManager.getString('cms','cropNewThumbnail'):
						openCropThumbPopup();
						break;
				}
				//to set the prompt back
				actionCB.selectedIndex = -1;
			}
			
			private function uploadNewThumbnail():void
			{
				_fileReference = new FileReference();
				_fileReference.addEventListener(Event.SELECT, onThumbnailSelected);
				_fileReference.browse(new Array(getImageTypeFilter()));
			}
			
			private function getImageTypeFilter():FileFilter {
				return new FileFilter("Images (" + IMAGE_TYPES+ ")" , IMAGE_TYPES );
			}
			
			private function onThumbnailSelected(event:Event):void {
				var uploadThumbnailEvent:UploadFromImageThumbAssetEvent = 
					new UploadFromImageThumbAssetEvent(UploadFromImageThumbAssetEvent.ADD_FROM_IMAGE,selectedEntry.id, _fileReference);
				uploadThumbnailEvent.dispatch();
			}
			
			private function openGrabFromVideoPopup():void {
				var grabWindow:GrabFromVideoWindow = new GrabFromVideoWindow();
				grabWindow.selectedEntry = _selectedEntry;
				grabWindow.context = _context;
				PopUpManager.addPopUp(grabWindow, (Application.application as DisplayObject), true);
				PopUpManager.centerPopUp(grabWindow);
			}
			
			private function openCropThumbPopup():void {
				_cropperWindow= new CropThumbnailWindow();
				_cropperWindow.thumbnailsList = entryDetailsModel.distributionProfileInfo.thumbnailDimensionsArray;
				_cropperWindow.entryDetailsModel = _entryDetailsModel;
				_cropperWindow.selectedEntry = selectedEntry;
				_cropperWindow.width = this.stage.width-3;
				_cropperWindow.height = this.stage.height;
				_cropperWindow.addEventListener(CropThumbnailWindow.WINDOW_CLOSE, onCropperClosed);
				PopUpManager.addPopUp(_cropperWindow, (Application.application as DisplayObject), true);
				PopUpManager.centerPopUp(_cropperWindow);
			}
			
			private function onCropperClosed(event:Event):void {
				PopUpManager.removePopUp(_cropperWindow);
			}

		]]>
	</mx:Script>
		<mx:DataGridColumn id="partnersCol" headerText="{resourceManager.getString('cms','distributionPartnersCol')}" itemRenderer="com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.ThumbAssetDistributionProfilesRenderer" />
		<mx:ComboBox id="actionCB" prompt="{resourceManager.getString('cms','addThumbnail')}"
					 dataProvider="{_uploadThumbnailActionsDP}"
					 change="{onActionCBItemClick(event)}" selectedIndex="-1"/>

		<mx:DataGrid id="dataGrid" width="100%" height="100%" dataProvider="{_dimensionsArray}" sortableColumns="false" draggableColumns="false" 
					 selectable="false">
			<mx:columns>
				<mx:DataGridColumn id="thumbCol" headerText="{resourceManager.getString('cms','thumbnailCol')}" itemRenderer="com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.ThumbAssetRenderer"/>
				<mx:DataGridColumn id="dimensionsCol" headerText="{resourceManager.getString('cms','dimensionsCol')}" itemRenderer="com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.ThumbAssetDimensionsRenderer"/>				
				<mx:DataGridColumn id="statusCol" headerText="{resourceManager.getString('cms','statusCol')}" itemRenderer="com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.ThumbAssetStatusRenderer"/>
				<mx:DataGridColumn id="actionCol" headerText="{resourceManager.getString('cms','actionCol')}" itemRenderer="com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.ThumbAssetActionRenderer"/>
			</mx:columns>
		</mx:DataGrid>
	
</mx:VBox>
