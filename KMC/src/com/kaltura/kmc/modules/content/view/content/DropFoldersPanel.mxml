<?xml version="1.0" encoding="utf-8"?>
<!---
"Drop Folders" section of content viewstack. Displays all files in drop folders.
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 implements="com.kaltura.kmc.modules.content.view.content.IContentPanel"
		 xmlns:filter="com.kaltura.kmc.modules.content.view.filter.*"
		 xmlns:controls="com.kaltura.controls.*"
		 creationComplete="creationCompleteHandler(event)"
		 width="100%" height="100%">
	
	<mx:Script>
		<![CDATA[
			import com.kaltura.kmc.business.PermissionManager;
			import com.kaltura.kmc.modules.content.events.DropFolderEvent;
			import com.kaltura.kmc.modules.content.events.DropFolderFileEvent;
			import com.kaltura.kmc.modules.content.model.DropFolderModel;
			import com.kaltura.types.KalturaDropFolderFileErrorCode;
			import com.kaltura.types.KalturaDropFolderFileStatus;
			import com.kaltura.vo.KalturaBaseEntryFilter;
			import com.kaltura.vo.KalturaDropFolderFile;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			
			//will be used to convert to MegaByetes
			private const MB_MULTIPLIER:int = 1024*1024;
			//in files size: number of digits to show after the decimal point
			private const DIGITS_AFTER_DEC_POINT:int = 2;
			
			[Bindable]
			public var dropFolderModel:DropFolderModel;
	
			/**
			 * @inheritDoc
			 * */
			public function init(kbef:KalturaBaseEntryFilter = null):void {
				var listFoldersEvent:DropFolderEvent = new DropFolderEvent(DropFolderEvent.LIST_FOLDERS, null, DropFolderEvent.ADD_NEW|DropFolderEvent.MATCH_OR_KEEP|DropFolderEvent.MATCH_OR_NEW);
				listFoldersEvent.dispatch();
				loadDropFolderFiles();
				updateExpenderLabel();
			}
			
			/**
			 * refresh page data
			 * */
			private function refreshList():void {
				var listFoldersEvent:DropFolderEvent = new DropFolderEvent(DropFolderEvent.LIST_FOLDERS, null, DropFolderEvent.ADD_NEW|DropFolderEvent.MATCH_OR_KEEP|DropFolderEvent.MATCH_OR_NEW);
				listFoldersEvent.dispatch();
				loadDropFolderFiles();
			}
			
			private function newSearchFromFilter():void {
				paging.kalturaFilterPager.pageIndex = 1;
				paging.selectedPage = 1;
				loadDropFolderFiles();
				updateExpenderLabel();
			}
			
			/**
			 * Create suitable string to display in the "Created at" column
			 * */
			private function dateCreatedLabelFunc(item:Object, column:DataGridColumn): String {
				var curFile:KalturaDropFolderFile = item as KalturaDropFolderFile;
				if (curFile.createdAt==int.MIN_VALUE)
					return '';
				var date:Date = new Date(curFile.createdAt * 1000);
				return dateDisplay.format(date);
			}
			
			/**
			 * Create suitable string to display in the "File Size" column
			 * */
			private function fileSizeLabelFunc(item:Object, column:DataGridColumn): String {
				var curFile:KalturaDropFolderFile = item as KalturaDropFolderFile;
				if (curFile.fileSize==int.MIN_VALUE)
					return '';
				return ((curFile.fileSize/MB_MULTIPLIER).toFixed(DIGITS_AFTER_DEC_POINT)) + ' ' + resourceManager.getString('cms','megaBytes');
				
			}
			
			/**
			 * Create suitable string to display in the "Status" column
			 * */
			private function statusLabelFunc(item:Object, column:DataGridColumn): String {
				var curFile:KalturaDropFolderFile = item as KalturaDropFolderFile;
				switch (curFile.status) {
					case KalturaDropFolderFileStatus.UPLOADING:
						return resourceManager.getString('cms','transferringBtn');
					case KalturaDropFolderFileStatus.PENDING:
						return resourceManager.getString('cms','pendingBtn');
					case KalturaDropFolderFileStatus.WAITING:
						return resourceManager.getString('cms','waitingBtn');
					case KalturaDropFolderFileStatus.NO_MATCH:
						return resourceManager.getString('cms','noMatchBtn');
					case KalturaDropFolderFileStatus.ERROR_HANDLING:
						return resourceManager.getString('cms','errHandlingBtn');
					case KalturaDropFolderFileStatus.ERROR_DELETING:
						return resourceManager.getString('cms','errDeletingBtn');
					case KalturaDropFolderFileStatus.HANDLED:
						return resourceManager.getString('cms','handledBtn');
				}
				return '';
			}

			/**
			 * Create suitable string to display in the "error desctiption" column
			 * */
			public function getErrorDescription(item:Object) : String {
				var curFile:KalturaDropFolderFile = item as KalturaDropFolderFile;
				var errDescription:String = '';

				switch (curFile.errorCode) {
					case KalturaDropFolderFileErrorCode.ERROR_UPDATE_ENTRY:
						errDescription = resourceManager.getString('cms','dfErrUpdateEntry');
						break;
					case KalturaDropFolderFileErrorCode.ERROR_ADD_ENTRY:
						errDescription = resourceManager.getString('cms','dfErrAddEntry');
						break;
					case KalturaDropFolderFileErrorCode.FLAVOR_MISSING_IN_FILE_NAME:
						errDescription = resourceManager.getString('cms','dfErrFlavorMissingInFile');
						break;
					case KalturaDropFolderFileErrorCode.FLAVOR_NOT_FOUND:
						errDescription = resourceManager.getString('cms','dfErrFlavorNotFound', new Array(curFile.parsedFlavor));
						break;
					case KalturaDropFolderFileErrorCode.SLUG_REGEX_NO_MATCH:
						errDescription = resourceManager.getString('cms','dfErrSlugRegex', new Array(curFile.fileName));
						break;
				}
				
				return errDescription;
			}
			
			/**
			 * user selects to delete files
			 * */
			private function deleteFiles():void {
				if (!dg.selectedItem) {
					Alert.show(resourceManager.getString('cms', 'selectDropFolderFiles'), resourceManager.getString('cms', 'selectDropFolderFilesTitle'));
					return;
				}
				
				var delStr:String = '';
				for each (var item:Object in dg.selectedItems) {
					delStr += '\n' + (item as KalturaDropFolderFile).fileName;
				}
				
				Alert.show(resourceManager.getString('cms', 'deleteDropFoldersFilesQ') + delStr, resourceManager.getString('cms', 'deleteDropFolderFileTitle'), Alert.YES | Alert.NO, null, deleteResponseFunc);
			}
			
			private function deleteResponseFunc(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					var deleteArray:Array = new Array;
					for each (var item:Object in dg.selectedItems) {
						deleteArray.push(item);
					}
					
					var deleteEvent:DropFolderFileEvent = new DropFolderFileEvent(DropFolderFileEvent.DELETE_FILES, null,null,null,deleteArray);
					deleteEvent.dispatch();
				}
			}

			/**
			 * selects all items in the page
			 * */
			private function selectAllTable():void {
				dg.selectedItems = (dg.dataProvider as ArrayCollection).source;
			}
			
			/**
			 * deselect all items
			 * */
			private function deSelectAllTable():void {
				dg.selectedItems = new Array();
			}		
			
			/**
			 * paging
			 * */
		 	private function gotoPage():void {
				// update filter here
				paging.kalturaFilterPager.pageIndex = paging.selectedPage;			
				loadDropFolderFiles();
			}
			
			private function loadDropFolderFiles():void {
				if (paging) {	
					if (paging.pageSize == 10) {
						entryTableContainer.height = (dg.rowHeight * 10) + dg.headerHeight + 10;
						dg.height = entryTableContainer.height; //entryTable.rowHeight*11+entryTable.headerHeight;
						dg.rowCount = 10;
						vbox1.height = dg.height + paging.height + bottomActionBox.height;
						topContainer.height = vbox1.height;
					}
					else {
						topContainer.percentHeight = 100;
						entryTableContainer.percentHeight = 100;
						dg.percentHeight = 100;
						dg.rowCount = -1;
						vbox1.percentHeight = 100;
					}
					
					dropFolderModel.pager = paging.kalturaFilterPager;
				}
				
				if (filter)
					dropFolderModel.filter = filter.dropFolderFileFilter;

				var listFiles:DropFolderFileEvent = new DropFolderFileEvent(DropFolderFileEvent.LIST_ALL);
				listFiles.dispatch();
			} 
			
			private function onPagerCreationComplete(event:Event):void {
				dropFolderModel.pager = paging.kalturaFilterPager;
				paging.kalturaFilterPager.pageIndex = 0;
				paging.kalturaFilterPager.pageSize = paging.rowInPageCb.value as int;
			}
			
			private function updateExpenderLabel():void {
				if (!filter)
					return;
				
				if (!filter.isFilterOn) {
					filteredLabel.visible = false;
				}
				else {
					filteredLabel.visible = true;
				}
			}
			
			/**
			 * fold / unfold filter
			 */
			private function foldFilter():void {
				currentState = (currentState == null) ? 'noFilterState' : null;
			}
		

			protected function creationCompleteHandler(event:FlexEvent):void {
				PermissionManager.getInstance().applyAllAttributes(this, this.id);
			}

		]]>
	</mx:Script>
	<mx:DateFormatter id="dateDisplay" formatString="MM/DD/YYYY JJ:NN"/>
	<mx:states>
		<mx:State name="noFilterState">
			<mx:SetProperty target="{vbox1}" name="visible" value="false"/>
			<mx:SetProperty target="{vbox1}" name="includeInLayout" value="false"/>
			<mx:RemoveChild target="{filterLabel}"/>
			<mx:SetProperty target="{foldBtn}" name="labelPlacement" value="left"/>
			<mx:SetProperty target="{vbox1}" name="height" value="20"/>
		</mx:State>
	</mx:states>
	<mx:HBox styleName="filtersHeadTitleHBox" width="100%">
		<mx:Label id="filterLabel" width="{filter.width}" text="{resourceManager.getString('cms', 'filters')}"
				  styleName="filterTitleHeader"/>
		<mx:LinkButton id="foldBtn" label="{resourceManager.getString('cms', 'mediaFilesTitle')}" click="{foldFilter()}"
					   toggle="true" styleName="expendableButtonWithCloseIcon" />
		<mx:Label id="filteredLabel" text="{resourceManager.getString('cms', 'filtered')}" styleName="filtered"
				  visible="false"/>
		<mx:Spacer width="100%"/>
		<mx:LinkButton label="{resourceManager.getString('cms','refresh')}" click="refreshList()" styleName="recycleIcon"/>
	</mx:HBox>
	<mx:HDividedBox id="topContainer" width="100%" verticalScrollPolicy="off">
		<mx:VBox id="vbox1">
			<filter:DropFolderFilter id="filter" height="{tableContainer.height}" width="245" newSearch="{newSearchFromFilter()}"
						 dropFoldersAC="{dropFolderModel.dropFolders}" dropFolderFileFilter="{dropFolderModel.filter}"/>
		</mx:VBox>

		<mx:VBox id="tableContainer" height="100%" width="100%" verticalScrollPolicy="off" styleName="entriesTablePagerAndButtonsVbox">
			<mx:HBox id="entryTableContainer" width="100%">
				<mx:DataGrid id="dg" dataProvider="{dropFolderModel.files}" rowCount="10" rowHeight="36" width="100%" allowMultipleSelection="true">
					<mx:columns>
						<mx:DataGridColumn headerText="{resourceManager.getString('cms','dropFileNameTitle')}" dataField="fileName"/>
						<mx:DataGridColumn headerText="{resourceManager.getString('cms','dropFileCreatedAtTitle')}" dataField="createdAt" labelFunction="{dateCreatedLabelFunc}"/>
						<mx:DataGridColumn headerText="{resourceManager.getString('cms','dropFileSizeTitle')}" dataField="fileSize" labelFunction="{fileSizeLabelFunc}"/>
						<mx:DataGridColumn headerText="{resourceManager.getString('cms','dropFileStatusTitle')}" dataField="status" labelFunction="{statusLabelFunc}"/>
						<mx:DataGridColumn headerText="{resourceManager.getString('cms','dropFileErrTitle')}">
							<mx:itemRenderer>
								<mx:Component>
									<mx:Label text="{outerDocument.getErrorDescription(data)}" paddingLeft="7"/>
								</mx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
					</mx:columns>
				</mx:DataGrid>
			</mx:HBox>
			
			<controls:Paging id="paging" width="100%" styleName="paging" rowsInPageChange="gotoPage()"
							 totalCount="{dropFolderModel.filesTotalCount}"
							 nextPage="gotoPage()" prvPage="gotoPage()" getPageNum="gotoPage()" visible="true"
							 showRowsInPage="true" creationComplete="onPagerCreationComplete(event)"/>
			<mx:HBox id='bottomActionBox' width="100%" styleName="DataGridActions" height="30">
				<mx:HBox height="100%" verticalAlign="middle" left="5" horizontalGap="0">
					<mx:Label text="{resourceManager.getString('cms', 'selectionTitle')}"/>
					<mx:LinkButton id="selectAll" label="{resourceManager.getString('cms', 'selectAllOption')}"
								   click="selectAllTable()" buttonMode="true" paddingLeft="-2" paddingRight="0"/>
					<mx:LinkButton id="deselectAll" label="{resourceManager.getString('cms', 'deselectAllOption')}"
								   click="deSelectAllTable()" buttonMode="true" paddingLeft="-2" paddingRight="0"/>
				</mx:HBox>
				<mx:HBox horizontalAlign="center" width="100%">
					<mx:Button id='deleteFilesBtn' label="{resourceManager.getString('cms','delete')}"
							   useHandCursor="true" buttonMode="true" click="{deleteFiles()}"/>
				</mx:HBox>
			</mx:HBox>
		</mx:VBox>

	</mx:HDividedBox>
</mx:VBox>
