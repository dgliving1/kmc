<?xml version="1.0" encoding="utf-8"?>
<!---
	 "Manage" part of the content viewstack.
	 lists all entries, allows filtering, preview and drill-down to entry details.
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:controls="com.kaltura.controls.*"
		 implements="com.kaltura.kmc.modules.content.view.content.IContentPanel,com.kaltura.edw.business.IDataOwner"
		 creationComplete="creationCompleteHandler(event)" 
		 xmlns:view="com.kaltura.kmc.modules.content.view.*"
		 xmlns:business="com.kaltura.kmc.modules.content.business.*"
		 xmlns:et="com.kaltura.edw.components.et.*" 
		 xmlns:fltr="com.kaltura.edw.components.fltr.*" 
		 xmlns:indicators="com.kaltura.edw.components.fltr.indicators.*">

	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.components.et.EntryTableColumns;
			import com.kaltura.edw.components.et.events.EntryTableEvent;
			import com.kaltura.edw.control.KedController;
			import com.kaltura.edw.control.events.KedEntryEvent;
			import com.kaltura.edw.control.events.LoadEvent;
			import com.kaltura.edw.model.FilterModel;
			import com.kaltura.edw.model.datapacks.DistributionDataPack;
			import com.kaltura.edw.model.datapacks.EntryDataPack;
			import com.kaltura.edw.model.datapacks.PermissionsDataPack;
			import com.kaltura.edw.model.types.WindowsStates;
			import com.kaltura.edw.vo.ListableVo;
			import com.kaltura.events.FileUploadEvent;
			import com.kaltura.kmc.modules.content.events.EntriesEvent;
			import com.kaltura.kmc.modules.content.events.KMCEntryEvent;
			import com.kaltura.kmc.modules.content.events.KMCSearchEvent;
			import com.kaltura.kmc.modules.content.events.PartnerEvent;
			import com.kaltura.kmc.modules.content.events.SelectionEvent;
			import com.kaltura.kmc.modules.content.events.SetListableEvent;
			import com.kaltura.kmc.modules.content.events.SetPlaylistTypeEvent;
			import com.kaltura.kmc.modules.content.events.WindowEvent;
			import com.kaltura.kmvc.control.KMvCEvent;
			import com.kaltura.kmvc.model.KMvCModel;
			import com.kaltura.managers.FileUploadManager;
			import com.kaltura.types.KalturaMediaEntryOrderBy;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaBaseEntryFilter;
			import com.kaltura.vo.KalturaMediaEntry;
			import com.kaltura.vo.KalturaMediaEntryFilter;
			import com.kaltura.vo.KalturaMixEntry;
			import com.kaltura.vo.KalturaPlaylist;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;

			public static const DEFAULT_PAGE_SIZE:int = 50;
			[Bindable]
			/**
			 * show embed option in "publish" column
			 * */
			public var showEmbed:Boolean = true;


			[Bindable]
			private var _listableVo:ListableVo;

			/**
			 * data ordering
			 * */
			private var _orderBy:String = KalturaMediaEntryOrderBy.CREATED_AT_DESC;

			[Bindable]
			/**
			 * filtering data
			 * */
			public var filterModel:FilterModel;

			[Bindable]
			/**
			 * entries-related data
			 * */
			public var entryDetailsModel:KMvCModel;

			/**
			 * current window state
			 * */
			public var windowState:String;


			public function onRequestedDataLoaded():void {
				loadEntries();
			}


			/**
			 * initialize the panel.
			 * @param initFilter	filter for initial entry loading.
			 * */
			public function init(initFilter:KalturaBaseEntryFilter = null):void {
				paging.selectedPage = 1;
				paging.pageSize = paging.rowInPageCb.value as int;
				//init as 10 lines 
				if (initFilter && initFilter is KalturaMediaEntryFilter) {
					filter.kalturaFilter = initFilter as KalturaMediaEntryFilter;
				}
				loadFilterData();

				// get partner info
				var getPartnerInfoEvent:PartnerEvent = new PartnerEvent(PartnerEvent.GET_PARTNER_INFO);
				getPartnerInfoEvent.dispatch();

			}


			/**
			 * load all the data the filter needs
			 * */
			private function loadFilterData():void {
				var fe:LoadEvent = new LoadEvent(LoadEvent.LOAD_FILTER_DATA, this, filterModel);
				KedController.getInstance().dispatch(fe);
			}




			private function setEntriesToolbar():void {
				toolBar.removeController(toolBar.approveSelected);
				toolBar.removeController(toolBar.rejectSelected);
			}


			public function loadEntries():void {
				if (!searchBox.validateSearchText(true)) {
					return;
				}
				if (paging.pageSize == 10) {
					entryTable.rowCount = 10;
					topContainer.height = (entryTable.rowHeight * 10) + entryTable.headerHeight + 10 + paging.height + toolBar.height;
				}
				else {
					topContainer.percentHeight = 100;
					entryTable.rowCount = -1;
				}

				_listableVo = new ListableVo(filter.kalturaFilter, paging, null);
				// set the order-by to the filter
				if (_orderBy) {
					_listableVo.filterVo.orderBy = _orderBy;
				}
				var cgEvent:CairngormEvent = new SetListableEvent(SetListableEvent.SET_NEW_LIST_TO_MODEL, _listableVo);
				cgEvent.dispatch();
				cgEvent = new KMCSearchEvent(KMCSearchEvent.DO_SEARCH_ENTRIES, _listableVo);
				cgEvent.dispatch();
			}


			//paging
			private function gotoPage():void {
				loadEntries();
			}


			/**
			 * controller has selected all entries
			 */
			private function onSelectAllEntries(evt:Event):void {
				entryTable.selectAll();
				var cgEvent:EntriesEvent = new EntriesEvent(EntriesEvent.SET_SELECTED_ENTRIES,
					new ArrayCollection(entryTable.selectedItems));
				cgEvent.dispatch();
			}


			private function onDeselectAllEntries(evt:Event):void {
				entryTable.deselectAll();
				var cgEvent:EntriesEvent = new EntriesEvent(EntriesEvent.SET_SELECTED_ENTRIES,
					new ArrayCollection(entryTable.selectedItems));
				cgEvent.dispatch();
			}


			/**
			 * should thumbnails be shown in entries table
			 * */
			public function set showThumbnails(value:Boolean):void {
				if (value) {
					entryTable.returnThumbnailsColumn();
				}
			}


			private function removeColums(event:Event):void {
				var ar:Array = [EntryTableColumns.ID, EntryTableColumns.NAME, 
					EntryTableColumns.MEDIA_TYPE, EntryTableColumns.PLAYS, EntryTableColumns.CREATE_AT,
					EntryTableColumns.DURATION, EntryTableColumns.STATUS, EntryTableColumns.ACTIONS];
				entryTable.showColumns(ar);
				// we always remove the thumbnail column, RnP will add it if required

				entryTable.updateDefaultSortColumn();
			}


			/**
			 * This is a new search called by an action on the filter vo
			 */
			private function newSearchhFromFilter():void {
				paging.kalturaFilterPager.pageIndex = 1;
				paging.selectedPage = 1;
				loadEntries();
			}



			/**
			 * Create a new manual based playlist based on current selection
			 */
			private function onNewManualPlaylist():void {

				if (entryTable.selectedItems.length == 0) {
					Alert.show(resourceManager.getString('cms', 'pleaseSelectEntriesFirst'));
					return;
				}
				var kEvent:KMvCEvent = new KedEntryEvent(KedEntryEvent.SET_SELECTED_ENTRY, null);
				KedController.getInstance().dispatch(kEvent);

				// add the selected items to the model 
				var cgEvent:CairngormEvent = new EntriesEvent(EntriesEvent.SET_SELECTED_ENTRIES,
					new ArrayCollection(entryTable.selectedItems));
				cgEvent.dispatch();

				//tell the model that this is not a regular playlist - but a playlist with pre-defined entries
				var cgEvent2:CairngormEvent = new SetPlaylistTypeEvent(SetPlaylistTypeEvent.MANUAL_PLAYLIST);
				cgEvent2.dispatch();

				//open a new manual playlist window to edit this 
				cgEvent2 = new WindowEvent(WindowEvent.OPEN, WindowsStates.PLAYLIST_MANUAL_WINDOW);
				cgEvent2.dispatch();

			}

//	on he fly rule based playlist creation is cancelled for Falcon
//			/**
//			 * Create a new ruled based playlist based on current filter
//			 */
//			private function onNewRulePlaylist():void {
//				var filterVo:KalturaMediaEntryFilterForPlaylist = filter.playlistFilter;
//				filterVo.orderBy = KalturaPlayableEntryOrderBy.PLAYS_DESC;
//				// add the selected filter to the model
//				var cgEvent:CairngormEvent = new KMCFilterEvent(KMCFilterEvent.SET_FILTER_TO_MODEL, filterVo);
//				cgEvent.dispatch();
//				//tell the model that this is not a regular playlist - but a playlist with pre-defined entries
//				cgEvent = new SetPlaylistTypeEvent(SetPlaylistTypeEvent.RULE_BASED_PLAYLIST);
//				cgEvent.dispatch();
//				cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.PLAYLIST_RULE_BASED_WINDOW);
//				cgEvent.dispatch();
//			}


			/**
			 * create a new livestream entry
			 * */
			public function createNewLivestreamHandler(event:Event):void {
				var cgEvent:WindowEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.ADD_LIVE_STREAM);
				cgEvent.dispatch();
			}



			/**
			 * Entry table dispatched an order-by changing
			 */
			private function onOrderByChanged():void {
				_orderBy = entryTable.orderBy;
				loadEntries();
			}


			private function changeRows():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.GO_TO_PAGE, GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE,
					"content>Show Rows");
				gotoPage()
			}


			private function nxtPage():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.NEXT_PAGE, GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE,
					"content>NextPage/Page" + paging.selectedPage);
				gotoPage()
			}


			private function prvPage():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.PREV_PAGE, GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE,
					"content>PrevPage/Page" + paging.selectedPage);
				gotoPage()
			}


			private function gotoPageNum():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.GO_TO_PAGE_NUM, GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE,
					"content>GoToPage/Page" + paging.selectedPage);
				gotoPage()
			}


			protected function creationCompleteHandler(event:FlexEvent):void {
				setEntriesToolbar();
				PermissionManager.getInstance().applyAllAttributes(this, this.id);
				BindingUtils.bindProperty(this, "showThumbnails", entryDetailsModel.getDataPack(PermissionsDataPack), "enableThumbsList");
				FileUploadManager.getInstance().addEventListener(FileUploadEvent.GROUP_UPLOAD_STARTED, onGroupUploadStarted);
			}


			/**
			 * if a replacement process begun, refresh the entries to be updated
			 * */
			private function onGroupUploadStarted(event:Event):void {
				//refresh only when entryDetailsWin is closed, to avoid null selected entry
				if ((windowState == WindowsStates.REPLACEMENT_ENTRY_DETAILS_WINDOW) || (windowState == WindowsStates.ENTRY_DETAILS_WINDOW_NEW_ENTRY) || (windowState == WindowsStates.ENTRY_DETAILS_WINDOW_CLOSED_ONE) || (windowState == WindowsStates.ENTRY_DETAILS_WINDOW)) {
					//refresh the open entry
					var edp:EntryDataPack = entryDetailsModel.getDataPack(EntryDataPack) as EntryDataPack;
					var getSelectedEntry:KedEntryEvent = new KedEntryEvent(KedEntryEvent.UPDATE_SELECTED_ENTRY_REPLACEMENT_STATUS, null, edp.selectedEntry.id);
					KedController.getInstance().dispatch(getSelectedEntry);
				}
				else
					loadEntries();
			}






//			protected function filter_updateCategoryHandler(event:FilterEvent):void {
//				var updateEvent:CategoryEvent = new CategoryEvent(CategoryEvent.UPDATE_CATEGORY);
//				updateEvent.data = event.data;
//				updateEvent.dispatch();
//			}
//
//
//			protected function filter_deleteCategoryHandler(event:FilterEvent):void {
//				var deleteCategoriesEvent:CategoryEvent = new CategoryEvent(CategoryEvent.DELETE_CATEGORY);
//				deleteCategoriesEvent.data = [event.data];
//				deleteCategoriesEvent.dispatch();
//			}
//
//
//			protected function filter_addCategoryHandler(event:FilterEvent):void {
//				var addNewCategoryEvent:CategoryEvent = new CategoryEvent(CategoryEvent.ADD_CATEGORY);
//				addNewCategoryEvent.data = event.data;
//				addNewCategoryEvent.dispatch();
//			}
//			
//			
//			protected function filter_updateEntriesHandler(event:FilterEvent):void {
//				var cgEvent:EntriesEvent = new EntriesEvent(EntriesEvent.UPDATE_ENTRIES, (event.data as ArrayCollection), false);
//				cgEvent.dispatch();
//			}
		]]>
	</mx:Script>
	<business:EntryTableActionsManager id="actionsManager" />
	<mx:HBox width="100%">
		<mx:Label id="pageLabel" text="{resourceManager.getString('cms', 'entries')}" styleName="filterTitleHeader" height="60"/>
		<fltr:FreeTextSearch id="searchBox" styleName="searchHBox" width="{filter.width}" height="{pageLabel.height}"
							 attribute="freeText"
							 label="{resourceManager.getString('cms', 'searchFilter')}" />
		<indicators:Indicators id="indicators" width="100%" height="{pageLabel.height}"
							   dataProvider="{filter.indicators}"
							   boxClicked="filter.removeFilter(event.data)"/>
		<mx:LinkButton click="loadEntries()" label="{resourceManager.getString('cms','refresh')}"
					   styleName="recycleIcon"/>
	</mx:HBox>
	<mx:HDividedBox id="topContainer" width="100%" height="100%">
		<fltr:EntriesFilter id="filter" height="100%" width="245"  
							freeTextSearch="{searchBox}"
							metadataProfiles="{filterModel.metadataProfiles}"
							distributionProfiles="{entryDetailsModel.getDataPack(DistributionDataPack)['distributionProfileInfo'].kalturaDistributionProfilesArray}"
							filterModel="{filterModel}" filterChanged="newSearchhFromFilter()"/>

		<mx:VBox id="entryTableContainer" height="100%" width="100%" styleName="entriesTablePagerAndButtonsVbox">
			<et:EntryTable id="entryTable" rowCount="10" width="100%" height="100%"
						   selectionChanged="actionsManager.itemClickHandler(event)"
						   showDetails="actionsManager.showEntryDetailsHandler(event)" 
						   openPreview="actionsManager.preview(event)"
						   deleteEntry="actionsManager.deleteEntries(event)"
						   dataProvider="{_listableVo.arrayCollection}" 
						   creationComplete="removeColums(event)"
						   selectedEntry="{(entryDetailsModel.getDataPack(EntryDataPack) as EntryDataPack).selectedEntry}"
						   showEmbed="{showEmbed}" orderByChanged="{onOrderByChanged()}"/>

			<controls:Paging id="paging" width="100%" styleName="paging"
							 rowsInPageChange="changeRows()" nextPage="{nxtPage()}" prvPage="{prvPage()}"
							 getPageNum="gotoPageNum()" showRowsInPage="true" defaultPageSize="{DEFAULT_PAGE_SIZE}"/>

			<view:ControlToolBar id="toolBar" width="100%"
								 selectAllEntries="onSelectAllEntries(event)"
								 deselectAllEntries="onDeselectAllEntries(event)"
								 createNewManualPlaylist="onNewManualPlaylist()"
								 createNewLivestream="createNewLivestreamHandler(event)"/>
		</mx:VBox>
	</mx:HDividedBox>

</mx:VBox>
