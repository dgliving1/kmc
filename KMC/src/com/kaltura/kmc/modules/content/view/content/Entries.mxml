<?xml version="1.0" encoding="utf-8"?>
<!---
"Manage" part of the content viewstack.
lists all entries, allows filtering, preview and drill-down to entry details.
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:view="com.kaltura.kmc.modules.content.view.*" 
		 xmlns:controls="com.kaltura.controls.*" xmlns:filter="com.kaltura.kmc.modules.content.view.filter.*"
		 implements="com.kaltura.kmc.modules.content.view.content.IContentPanel,com.kaltura.kmc.modules.content.business.IDataOwner" 
		 creationComplete="creationCompleteHandler(event)" >
	<mx:states>
		<mx:State name="noFilterState">
			<mx:SetProperty target="{vbox1}" name="visible" value="false"/>
			<mx:SetProperty target="{vbox1}" name="includeInLayout" value="false"/>
			<mx:RemoveChild target="{filterLabel}"/>
			<mx:SetProperty target="{foldBtn}" name="labelPlacement" value="left"/>
			<mx:SetProperty target="{vbox1}" name="height" value="20"/>
		</mx:State>
	</mx:states>
	
	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.events.FileUploadEvent;
			import com.kaltura.kmc.business.PermissionManager;
			import com.kaltura.kmc.modules.content.events.EntriesEvent;
			import com.kaltura.kmc.modules.content.events.EntryEvent;
			import com.kaltura.kmc.modules.content.events.FilterEvent;
			import com.kaltura.kmc.modules.content.events.GeneralUiconfEvent;
			import com.kaltura.kmc.modules.content.events.LoadEvent;
			import com.kaltura.kmc.modules.content.events.PartnerEvent;
			import com.kaltura.kmc.modules.content.events.SearchEvent;
			import com.kaltura.kmc.modules.content.events.SetCurrentListableEvent;
			import com.kaltura.kmc.modules.content.events.SetPlaylistTypeEvent;
			import com.kaltura.kmc.modules.content.events.SetRefreshRequiredEvent;
			import com.kaltura.kmc.modules.content.events.WindowEvent;
			import com.kaltura.kmc.modules.content.model.EntryDetailsModel;
			import com.kaltura.kmc.modules.content.model.FilterModel;
			import com.kaltura.kmc.modules.content.model.states.WindowsStates;
			import com.kaltura.kmc.modules.content.vo.ListableVo;
			import com.kaltura.managers.FileUploadManager;
			import com.kaltura.types.KalturaMediaEntryOrderBy;
			import com.kaltura.types.KalturaPlayableEntryOrderBy;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.vo.KalturaBaseEntryFilter;
			import com.kaltura.vo.KalturaMediaEntryFilter;
			import com.kaltura.vo.KalturaMediaEntryFilterForPlaylist;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			[Bindable]
			/**
			 * show embed option in "publish" column
			 * */
			public var showEmbed:Boolean = true;
			
			[Bindable]
			private var _listableVo:ListableVo;
			
			/**
			 * data ordering
			 * */
			private var _orderBy:String = KalturaMediaEntryOrderBy.CREATED_AT_DESC;
			
			[Bindable]
			/**
			 * filtering data
			 * */
			public var filterModel:FilterModel;
			
			[Bindable]
			/**
			 * entries-related data
			 * */
			public var entryDetailsModel:EntryDetailsModel;
			
			/**
			 * current window state
			 * */
			public var windowState:String;
			
			public function onRequestedDataLoaded():void {
				filter.init();
				loadEntries();
			}
			
			/**
			 * initialize the panel.
			 * @param initFilter	filter for initial entry loading.
			 * */
			public function init(initFilter:KalturaBaseEntryFilter = null):void {
				//get default metadata view if needed
				if (filterModel.enableCustomData && !entryDetailsModel.metadataDefaultUiconfXML) {
					var getMetadataUiconf:GeneralUiconfEvent = new GeneralUiconfEvent(GeneralUiconfEvent.GET_METADATA_UICONF);
					getMetadataUiconf.dispatch();
				}
				
				paging.kalturaFilterPager.pageIndex = 0; 
				paging.kalturaFilterPager.pageSize = paging.rowInPageCb.value as int;
				//init as 10 lines 
				if (initFilter && initFilter is KalturaMediaEntryFilter) {
					filter.ps3filter = initFilter as KalturaMediaEntryFilter;
					updateExpenderLabel();
				}
				loadFilterData();
				
				// get partner info
				var getPartnerInfoEvent:PartnerEvent = new PartnerEvent(PartnerEvent.GET_PARTNER_INFO);
				getPartnerInfoEvent.dispatch();
				
			}
			
			/**
			 * load all the data the filter needs
			 * */
			private function loadFilterData():void {
				//				// distribution
				//				if (filterModel.enableDistribution) {
				//					var listDistribution:DistributionProfileEvent = new DistributionProfileEvent(DistributionProfileEvent.LIST);
				//					listDistribution.dispatch();
				//				}
				//				// flavor params
				//				var getAllFlavorParams:ConversionSettingsEvent = new ConversionSettingsEvent(ConversionSettingsEvent.LIST_FLAVOR_PARAMS);
				//				getAllFlavorParams.dispatch();
				//				// metadata profile
				//				if (filterModel.enableCustomData) {
				//					var listMetadataProfile:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.LIST);
				//					listMetadataProfile.dispatch();
				//				}
				//				// access control
				//				var getAllProfilesEvent:AccessControlProfileEvent = new AccessControlProfileEvent(AccessControlProfileEvent.LIST_ACCESS_CONTROLS_PROFILES);
				//				getAllProfilesEvent.dispatch();
				//				//categories
				//				var getCategoriesList:CategoryEvent = new CategoryEvent(CategoryEvent.LIST_CATEGORIES);
				//				getCategoriesList.dispatch();
				var fe:LoadEvent = new LoadEvent(LoadEvent.LOAD_FILTER_DATA, this);
				fe.dispatch();
			}
			
			
			
			
			private function setEntriesToolbar():void {
				toolBar.removeController(toolBar.approveSelected);
				toolBar.removeController(toolBar.rejectSelected);
			}
			
			
			public function loadEntries():void {
				if (paging.pageSize == 10) {
					entryTableContainer.height = (entryTable.rowHeight * 10) + entryTable.headerHeight + 10;
					entryTable.height = entryTableContainer.height; //entryTable.rowHeight*11+entryTable.headerHeight;
					entryTable.rowCount = 10;
					vbox1.height = entryTable.height + paging.height + toolBar.height;
					topContainer.height = entryTableContainer.height + paging.height + toolBar.height;
				}
				else {
					topContainer.percentHeight = 100;
					entryTableContainer.percentHeight = 100;
					entryTable.percentHeight = 100;
					entryTable.rowCount = -1;
					vbox1.percentHeight = 100;
				}
				
				_listableVo = new ListableVo(filter.ps3filter, paging, null);
				// set the order-by to the filter
				if (_orderBy)
					_listableVo.filterVo.orderBy = _orderBy;
				var cgEvent:SetCurrentListableEvent = new SetCurrentListableEvent(SetCurrentListableEvent.SET_NEW_LIST_TO_MODEL,
					_listableVo);
				cgEvent.dispatch();
				var searchEvent:SearchEvent = new SearchEvent(SearchEvent.SEARCH_ENTRIES, _listableVo);
				searchEvent.dispatch();
			}
			
			
			//paging
			private function gotoPage():void {
				loadEntries();
			}
			
			
			/**
			 * controller has selected all entries
			 */
			private function onSelectAllEntries(evt:Event):void {
				entryTable.selectAll();
				var cgEvent:EntriesEvent = new EntriesEvent(EntriesEvent.SET_SELECTED_ENTRIES,
					new ArrayCollection(entryTable.selectedItems));
				cgEvent.dispatch();
			}
			
			
			private function onDeselectAllEntries(evt:Event):void {
				entryTable.deselectAll();
				var cgEvent:EntriesEvent = new EntriesEvent(EntriesEvent.SET_SELECTED_ENTRIES,
					new ArrayCollection(entryTable.selectedItems));
				cgEvent.dispatch();
			}
			
			
			private function removeColums(event:Event):void {
				event.target.removeColumn(resourceManager.getString('cms', 'idHeader'));
				event.target.removeColumn(resourceManager.getString('cms', 'rating'));
				event.target.removeColumn(resourceManager.getString('cms', 'creator'));
				event.target.removeColumn(resourceManager.getString('cms', 'playerLoads'));
				event.target.removeColumn(resourceManager.getString('cms', 'flags'));
				//			event.target.removeColumn(resourceManager.getString('cms', 'duration'));
				event.target.removeColumn(resourceManager.getString('cms', 'playlistType'));
				//		event.target.removeColumn(resourceManager.getString('cms', 'preview'));
				
				
				event.target.updateDefaultSortColumn();
				percentWidth = 100;
				topContainer.percentWidth = 100;
				vbox2.percentWidth = 100;
				entryTableContainer.percentWidth = 100;
				entryTable.percentWidth = 100;
				paging.percentWidth = 100;
				toolBar.percentWidth = 100;
				vbox1.width = 245;
				filter.percentWidth = 100;
				validateNow();
				validateDisplayList()
			}
			
			
			/**
			 * This is a new search called by an action on the filter vo
			 */
			private function newSearchhFromFilter():void {
				paging.kalturaFilterPager.pageIndex = 1;
				paging.selectedPage = 1;
				loadEntries();
				updateExpenderLabel();
			}
			
			
			private function updateExpenderLabel():void {
				if (!filter.isFilterOn) {
					filteredLabel.visible = false;
				}
				else {
					filteredLabel.visible = true;
				}
			}
			
			
			/**
			 * Create a new manual based playlist based on current selection
			 */
			private function onNewManualPlaylist():void {
				
				if (entryTable.selectedItems.length == 0) {
					Alert.show(resourceManager.getString('cms', 'pleaseSelectEntriesFirst'));
					return;
				}
				var cgEvent:CairngormEvent;
				cgEvent = new EntryEvent(EntryEvent.SET_SELECTED_ENTRY, null);
				cgEvent.dispatch();
				
				// add the selected items to the model 
				cgEvent = new EntriesEvent(EntriesEvent.SET_SELECTED_ENTRIES,
					new ArrayCollection(entryTable.selectedItems));
				cgEvent.dispatch();
				
				//tell the model that this is not a regular playlist - but a playlist with pre-defined entries
				cgEvent = new SetPlaylistTypeEvent(SetPlaylistTypeEvent.MANUAL_PLAYLIST);
				cgEvent.dispatch();
				
				//open a new manual playlist window to edit this 
				cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.PLAYLIST_MANUAL_WINDOW);
				cgEvent.dispatch();
				
			}
			
			
			/**
			 * Create a new ruled based playlist based on current filter
			 */
			private function onNewRulePlaylist():void {
				var filterVo:KalturaMediaEntryFilterForPlaylist = filter.playlistFilter; 
				filterVo.orderBy = KalturaPlayableEntryOrderBy.PLAYS_DESC;
				// add the selected filter to the model
				var cgEvent:CairngormEvent = new FilterEvent(FilterEvent.SET_FILTER_TO_MODEL, filterVo);
				cgEvent.dispatch();
				//tell the model that this is not a regular playlist - but a playlist with pre-defined entries
				cgEvent = new SetPlaylistTypeEvent(SetPlaylistTypeEvent.RULE_BASED_PLAYLIST);
				cgEvent.dispatch();
				cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.PLAYLIST_RULE_BASED_WINDOW);
				cgEvent.dispatch();
			}
			 
			
			/**
			 * fold / unfold filter
			 */
			private function foldFilter():void {
				currentState = (currentState == null) ? 'noFilterState' : null;
			}
			
			
			/**
			 * Entry table dispatched an order-by changing
			 */
			private function onOrderByChanged():void {
				_orderBy = entryTable.orderBy;
				loadEntries();
			}
			
			
			private function changeRows():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_GO_TO_PAGE ,GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE,
					"content>Show Rows");
				gotoPage()
			}
			
			
			private function nxtPage():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_NEXT_PAGE +
					paging.selectedPage,GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE,
					"content>NextPage/Page" + paging.selectedPage);
				gotoPage()
			}
			
			
			private function prvPage():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_PREV_PAGE +
					paging.selectedPage,GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE,
					"content>PrevPage/Page" + paging.selectedPage);
				gotoPage()
			}
			
			
			private function gotoPageNum():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_GO_TO_PAGE_NUM +
					paging.selectedPage,GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE,
					"content>GoToPage/Page" + paging.selectedPage);
				gotoPage()
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				setEntriesToolbar();
				PermissionManager.getInstance().applyAllAttributes(this, this.id);
				FileUploadManager.getInstance().addEventListener(FileUploadEvent.GROUP_UPLOAD_COMPLETE, onGroupUploadComplete);
			}
			
			
			/**
			 * if a replacement process begun, refresh the entries to be updated
			 * */
			private function onGroupUploadComplete(event:Event):void {
				//refresh only when entryDetailsWin is closed, to avoid null selected entry
				if ((windowState ==WindowsStates.REPLACEMENT_ENTRY_DETAILS_WINDOW)
					|| (windowState ==WindowsStates.ENTRY_DETAILS_WINDOW_NEW_ENTRY)
					|| (windowState ==WindowsStates.ENTRY_DETAILS_WINDOW_CLOSED_ONE) 
					|| (windowState ==WindowsStates.ENTRY_DETAILS_WINDOW)) 
				{
					var refreshRequired:SetRefreshRequiredEvent = new SetRefreshRequiredEvent(SetRefreshRequiredEvent.SET_REFRESH_REQUIRED,true);
					refreshRequired.dispatch();
				}
				else
					loadEntries();

			}
			
			
			
		]]>
	</mx:Script>
	<mx:HBox styleName="filtersHeadTitleHBox">
		<mx:Label id="filterLabel" width="{filter.width}" text="{resourceManager.getString('cms', 'filters')}"
				  styleName="filterTitleHeader"/>
		<mx:LinkButton id="foldBtn" label="{resourceManager.getString('cms', 'entriesTable')}" click="{foldFilter()}"
					   toggle="true" styleName="expendableButtonWithCloseIcon" />
		<mx:Label id="filteredLabel" text="{resourceManager.getString('cms', 'filtered')}" styleName="filtered"
				  visible="false"/>
	</mx:HBox>
	<mx:HDividedBox id="topContainer" verticalScrollPolicy="off">
		<mx:VBox id="vbox1">
			<filter:Filter id="filter" height="100%" width="245"
						   enableCustomData="{filterModel.enableCustomData}"
						   enableDistribution="{filterModel.enableDistribution}"
						   distributionProfileArr="{entryDetailsModel.distributionProfileInfo.kalturaDistributionProfilesArray}"
						   metadataProfilesArray="{filterModel.metadataProfiles}" 
						   categories="{filterModel.categories}" 
						   catMap="{filterModel.categoriesMap}" 
						   accessControlProfiles="{filterModel.accessControlProfiles}"
						   flavorParams="{filterModel.flavorParams}"
						   newSearch="newSearchhFromFilter()"
						   showAccordionHeaderButtons="true" />
		</mx:VBox>
		<mx:VBox id="vbox2" height="100%" verticalScrollPolicy="off" styleName="entriesTablePagerAndButtonsVbox" width="100%">
			<mx:HBox id="entryTableContainer" height="100%" width="100%">
				<view:EntryTable id="entryTable" rowCount="10" width="100%" dataProvider="{_listableVo.arrayCollection}"
								 selectedEntry="{entryDetailsModel.selectedEntry}" showEmbed="{showEmbed}"
								 orderByChanged="{onOrderByChanged()}" creationComplete="removeColums( event )"/>
			</mx:HBox>
			
			<controls:Paging id="paging" width="{entryTableContainer.width}" styleName="paging"
							 rowsInPageChange="changeRows()" nextPage="{nxtPage()}" prvPage="{prvPage()}"
							 getPageNum="gotoPageNum()" totalCount="{entryDetailsModel.totalEntriesCount}"
							 showRowsInPage="true" />
			
			<view:ControlToolBar id="toolBar" width="{entryTableContainer.width}" 
								 selectAllEntries="onSelectAllEntries(event)"
								 deselectAllEntries="onDeselectAllEntries(event)"
								 createNewManualPlaylist="onNewManualPlaylist()"
								 createNewRulePlaylist="onNewRulePlaylist()"/>
		</mx:VBox>
	</mx:HDividedBox>
	
</mx:VBox>
