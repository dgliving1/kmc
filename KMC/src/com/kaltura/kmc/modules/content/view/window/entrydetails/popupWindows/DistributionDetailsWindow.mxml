<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns:entryDetails="com.kaltura.kmc.modules.content.view.window.entrydetails.*"
				xmlns:renderers="com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.distributionRenderers.*"
				width="710" height="655"
				layout="vertical" styleName="TitleWindowType2"
				showCloseButton="true"
				close="{closeWindow()}"
				xmlns:controls="com.kaltura.controls.*"
				creationComplete="{onCreationComplete()}"
				show="setSchedulerData()">
	
	<mx:Script>
		<![CDATA[
			import com.kaltura.dataStructures.HashMap;
			import com.kaltura.kmc.modules.content.business.Cloner;
			import com.kaltura.kmc.modules.content.events.EntryDistributionEvent;
			import com.kaltura.kmc.modules.content.model.EntryDetailsModel;
			import com.kaltura.kmc.modules.content.model.EntryDistributionWithProfile;
			import com.kaltura.kmc.modules.content.model.ThumbnailWithDimensions;
			import com.kaltura.kmc.modules.content.view.window.entrydetails.EntryDistribution;
			import com.kaltura.kmc.modules.content.vo.FlavorAssetWithParamsVO;
			import com.kaltura.types.KalturaEntryDistributionStatus;
			import com.kaltura.utils.DateFieldWithTimeStepperLogic;
			import com.kaltura.vo.KalturaDistributionProfile;
			import com.kaltura.vo.KalturaDistributionThumbDimensions;
			import com.kaltura.vo.KalturaEntryDistribution;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import org.hamcrest.collection.array;
			
			/**
			 * will be sent when the window closes
			 * */
			public static const WINDOW_CLOSE:String = "windowClose";
			[Bindable]
			private var _entryDis:EntryDistributionWithProfile;
			private var _entryDetailsModel:EntryDetailsModel;
			[Bindable]
			private var _destinationName:String;
			private var _timeManager:DateFieldWithTimeStepperLogic;
			//array of arrays containing thumbnails
			[Bindable]
			private var _thumbsArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _flavorAssets:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _name:String;
			[Bindable]
			private var _description:String;
			[Bindable]
			private var _tags:String;
			private var _isDirty:Boolean = false;
			private var _oldStartDate:Number;
			private var _oldEndDate:Number;
			private var _oldThumbs:String;
			[Bindable]
			private var _requestXMLAvailable:Boolean;
			[Bindable]
			private var _responseXMLAvailable:Boolean;
			
			public function get entryDetailsModel():EntryDetailsModel
			{
				return _entryDetailsModel;
			}

			public function set entryDetailsModel(value:EntryDetailsModel):void
			{
				_entryDetailsModel = value;
				_name = _entryDetailsModel.selectedEntry.name;
				_description = _entryDetailsModel.selectedEntry.description;
				_tags = _entryDetailsModel.selectedEntry.tags;
				buildTitle();
			}

			public function get entryDis():EntryDistributionWithProfile
			{
				return _entryDis;
			}

			public function set entryDis(value:EntryDistributionWithProfile):void
			{
				_entryDis = value;
				setOldData(_entryDis.kalturaEntryDistribution);	
				_destinationName = _entryDis.kalturaDistributionProfile.name;
				_requestXMLAvailable = _entryDis.kalturaEntryDistribution.hasSubmitSentDataLog;
				_responseXMLAvailable = _entryDis.kalturaEntryDistribution.hasSubmitResultsLog;
				buildTitle();
				buildThumbsArray();
				buildFlavorsAssets();
			}
			
			/**
			 * builds a hash map with given ids as the keys, given thumbs as the values
			 * */
			private function buildThumbsMap(idsArray:Array, thumbsArray:Array):HashMap {
				var thumbsMap:HashMap = new HashMap();
				for each (var st:String in idsArray) {
					for each (var thumb:ThumbnailWithDimensions in thumbsArray) {
						if (thumb.thumbAsset && (thumb.thumbAsset.id == st)) {
							thumbsMap.put(st, thumb);
							break;
						}
					}
				}
				
				return thumbsMap;
			}
			
			/**
			 * builds the data provider for thumbnails table, according to required thumbs and existing thumbs.
			 * */
			private function buildThumbsArray():void {
				_thumbsArray = new ArrayCollection();
				var existingThumbs:Array = _entryDetailsModel.distributionProfileInfo.thumbnailDimensionsArray;
				var requiredDim:Array = _entryDis.kalturaDistributionProfile.requiredThumbDimensions;
				var thumbsIds:String = _entryDis.kalturaEntryDistribution.thumbAssetIds;
				var thumbsIdsArray:Array;
				if (thumbsIds)
					thumbsIdsArray = thumbsIds.split(",");
				
				var thumbsMap:HashMap = buildThumbsMap(thumbsIdsArray, _entryDetailsModel.distributionProfileInfo.thumbnailDimensionsArray);
				//first check all thumbs with  required dimensions
				for each (var dim:KalturaDistributionThumbDimensions in requiredDim) {
					var isArray:Boolean = false;
					var thumbnail:ThumbnailWithDimensions = new ThumbnailWithDimensions(dim.width, dim.height);
					for each (var st:String in thumbsIdsArray) {
						if (st!="") {
							var thumb:ThumbnailWithDimensions = thumbsMap.getValue(st) as ThumbnailWithDimensions;
							if (thumb && thumb.width==dim.width && thumb.height==dim.height) {
								thumbnail.thumbAsset = thumb.thumbAsset;
								thumbnail.thumbUrl = thumb.thumbUrl;
								//we handle this thumb, so we can remove it
								thumbsMap.remove(st);
								var arr:Array = new Array(thumbnail);
								isArray = true;
								//check if there are more suitable thumbnails
								for each (var existingThumb:ThumbnailWithDimensions in existingThumbs) {
									if (existingThumb.thumbAsset && 
										(existingThumb.thumbAsset.id!=st) &&
										(existingThumb.width==thumb.width) &&
										(existingThumb.height==thumb.height)) {
										var newThumb:ThumbnailWithDimensions = new ThumbnailWithDimensions(thumb.width, thumb.height, existingThumb.thumbAsset);
										newThumb.thumbUrl = existingThumb.thumbUrl;
										arr.push(newThumb);	
										if (thumbsMap.containsKey(existingThumb.thumbAsset.id))
											thumbsMap.remove(existingThumb.thumbAsset.id);
									}
								}
								if (isArray)
									_thumbsArray.addItem(arr);
								 
								break;
							}
						}
					}
					//only thumbnails with thumbAssets were added as arrays, others should be added now
					if (!isArray)
						_thumbsArray.addItem(thumbnail);
				}
				//go over all remaind thumbnails, copy them and add them to the data provider
				for (var key:String in thumbsMap) {
					var remainedThumb:ThumbnailWithDimensions = thumbsMap.getValue(key) as ThumbnailWithDimensions;
					var thumbToAdd:ThumbnailWithDimensions = new ThumbnailWithDimensions(remainedThumb.width, remainedThumb.height, remainedThumb.thumbAsset);
					thumbToAdd.thumbUrl = remainedThumb.thumbUrl;
					_thumbsArray.addItem(new Array(thumbToAdd));
				}
			}
			
			private function onCreationComplete():void {
				_timeManager = new DateFieldWithTimeStepperLogic(startDateField, endDateField, startDateHour, endDateHour);
				setSchedulerData();
			}
			
			/**
			 * build the data provider for the flavors table, according to the used flavors in current distirbution
			 * and the required flavor params of the distribution profile
			 * */
			private function buildFlavorsAssets():void {
				_flavorAssets = new ArrayCollection();
				var entryFlavors:ArrayCollection = _entryDetailsModel.flavorParamsAndAssetsByEntryId;
				var requiredFlavors:String = _entryDis.kalturaDistributionProfile.requiredFlavorParamsIds;
				var requiredFlavorsArray:Array;
				if (requiredFlavors)
					requiredFlavorsArray = requiredFlavors.split(",");
				var flavorsAssetsIds:String = _entryDis.kalturaEntryDistribution.flavorAssetIds;
				var flavorsAssetsArray:Array;
				if (flavorsAssetsIds)
					flavorsAssetsArray = flavorsAssetsIds.split(",");
	
				for each (var flavorWithParams:FlavorAssetWithParamsVO in entryFlavors) {
					var isRequiredParam:Boolean = false;
					for each (var stringId:String in requiredFlavorsArray) {
						var flavorId:int = parseInt(stringId);
						if (flavorWithParams.kalturaFlavorAssetWithParams.flavorParams.id == flavorId) {
							_flavorAssets.addItem(flavorWithParams);
							isRequiredParam = true;
							break;
						}
					}
					if (!isRequiredParam && flavorWithParams.kalturaFlavorAssetWithParams.flavorAsset) {
						for each (var assetId:String in flavorsAssetsArray) {
							if (flavorWithParams.kalturaFlavorAssetWithParams.flavorAsset.id == assetId) {
								_flavorAssets.addItem(flavorWithParams);
								break;
							}
						}
					}
				}
			}

			/**
			 * build the string for the window title
			 * */
			private function buildTitle():void {
				if (_destinationName && _entryDetailsModel)
					this.title = resourceManager.getString('cms','editEntry') + " - " + _entryDetailsModel.selectedEntry.name + 
						" - " + _destinationName + " " + resourceManager.getString('cms','distributionDetails');
			}
			
			private function closeWindow():void {
				if (_isDirty)
					Alert.show(resourceManager.getString('cms','undoEntryDetails'),resourceManager.getString('cms','exitDistributionDetails'), Alert.YES | Alert.NO, null, closeHandler);
				else 
					dispatchCloseEvent();
			}
			
			private function dispatchCloseEvent():void {
				this.dispatchEvent(new Event(WINDOW_CLOSE));
			}
			
			private function closeHandler(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					getOldData(entryDis.kalturaEntryDistribution);
					dispatchCloseEvent();
				}
			}
			
			private function validateTimes():void {
				_isDirty = true;
				_timeManager.validateTimes();
				if (startDateField.selectedDate)
					entryDis.kalturaEntryDistribution.sunrise = getTimeInSeconds(startDateField, startDateHour);
				if (endDateField.selectedDate)
					entryDis.kalturaEntryDistribution.sunset = getTimeInSeconds(endDateField, endDateHour);
			}
			
			private function getTimeInSeconds(dateField:DateField, timeEntry:SM_TimeEntry):int {
				var seconds:int = 0;
				seconds += dateField.selectedDate.time / 1000;
				seconds += _timeManager.calculateTime(timeEntry.timeValue, timeEntry.am_pm);
				return seconds;
			}
			
			/**
			 * display suitbale dates according to distribution sunrise/sunset times
			 * */
			private function setSchedulerData():void {
				if (_entryDis != null) {
					var startTime:int = _entryDis.kalturaEntryDistribution.sunrise;
					var endTime:int = _entryDis.kalturaEntryDistribution.sunset;
					
					if (((startTime == -1) || (startTime == int.MIN_VALUE)) && ((endTime == -1) || (endTime == int.MIN_VALUE))) {
						//anyTimeRBtn.selected = true;
					}
					else {
						if ((startTime != int.MIN_VALUE) && (startTime != -1)) {
							var startDate:Date = new Date(startTime * 1000);
							startDateField.selectedDate = startDate;
							_timeManager.setTime(startDateHour, startDate.hours, startDate.minutes);
						}
						
						if ((endTime != int.MIN_VALUE) && (endTime != -1)) {
							var endDate:Date = new Date(endTime * 1000);
							endDateField.selectedDate = endDate;
							_timeManager.setTime(endDateHour, endDate.hours, endDate.minutes);
						}
						
					}
				}
			}
			
			/**
			 * swaps between the given thumb and the new thumb in the thumbAssedIds string
			 * if the original is empty, will just add the new thumb
			 * if the new is empty, will remove the original
			 * */
			public function swapThumbs(originalThumbId:String, newThumbId:String): void {
				var entryToUpdate:KalturaEntryDistribution = _entryDis.kalturaEntryDistribution;
				var thumbsArray:Array = entryToUpdate.thumbAssetIds.split(",");
				var deleteThumb:Boolean = false;
				if (originalThumbId == "") {
					thumbsArray.push(newThumbId);
				}
				else {
					if (newThumbId == "") {
						deleteThumb = true;
					}
					for (var i:int = 0; i<thumbsArray.length; i++) {
						if (thumbsArray[i]==originalThumbId) {
							if (deleteThumb)
								thumbsArray.splice(i,1);
							else
								thumbsArray[i] = newThumbId;
							
							break;
						}	
					}
				}

				entryToUpdate.thumbAssetIds = thumbsArray.join(",");
				_isDirty = true;
			}
			
			/**
			 * saves data that might be changed in this window in backup values
			 * */
			private function setOldData(entryDistribution:KalturaEntryDistribution):void {
				_oldStartDate = entryDistribution.sunrise;
				_oldEndDate = entryDistribution.sunset;
				_oldThumbs = entryDistribution.thumbAssetIds;
			}
			/**
			 * sets the original data back to the given entry
			 * */
			private function getOldData(entryDistribution:KalturaEntryDistribution):void {
				entryDistribution.sunrise = _oldStartDate;
				entryDistribution.sunset = _oldEndDate;
				entryDistribution.thumbAssetIds = _oldThumbs;
			}
			
			private function save():void {
				if (_isDirty) {
					var updateEntryDistribution:EntryDistributionEvent = new EntryDistributionEvent(EntryDistributionEvent.UPDATE, null, null, _entryDis.kalturaEntryDistribution);
					updateEntryDistribution.dispatch();
					setOldData(entryDis.kalturaEntryDistribution);
					_isDirty = false;
				}
				
				dispatchCloseEvent();
			}
			
			/**
			 * dispatches a request for xml,
			 * if getSentData is true, will send a request for request XML
			 * otherwise for response XML
			 * */
			private function getXML(getSentData:Boolean):void {
				var type:String = getSentData ? EntryDistributionEvent.GET_SENT_DATA : EntryDistributionEvent.GET_RETURNED_DATA;
				var requestXML:EntryDistributionEvent = new EntryDistributionEvent(type, null, null, _entryDis.kalturaEntryDistribution);
				requestXML.dispatch();
			}
	
		]]>
	</mx:Script>
	
	<mx:Label text="{_destinationName + ' ' + resourceManager.getString('cms','statusLabel')}" fontWeight="bold"/>
	<mx:HBox paddingLeft="7">
		<mx:VBox>
			<mx:Label text="{resourceManager.getString('cms','statusLabel')}"/>
			<mx:Label text="{resourceManager.getString('cms','remoteId')}"/>
			<mx:Label text="{resourceManager.getString('cms','logs')}" visible="{_requestXMLAvailable || _responseXMLAvailable}" 
					  includeInLayout="{_requestXMLAvailable || _responseXMLAvailable}"/>			
		</mx:VBox>
		<mx:VBox>
			<renderers:SubmissionStatusRenderer data="{_entryDis}"/>
			<mx:Label text="{_entryDis.kalturaEntryDistribution.remoteId}"/>
			<mx:HBox>
				<mx:LinkButton label="{resourceManager.getString('cms','requestXML')}" click="{getXML(true)}" 
							   visible="{_requestXMLAvailable}" includeInLayout="{_requestXMLAvailable}"/>
				<mx:LinkButton label="{resourceManager.getString('cms','responseXML')}" click="{getXML(false)}"
							   visible="{_responseXMLAvailable}" includeInLayout="{_responseXMLAvailable}"/>
			</mx:HBox>		
		</mx:VBox>
	</mx:HBox>
	<mx:Label text="{resourceManager.getString('cms','scheduling')}" fontWeight="bold"/>
	<mx:HBox paddingLeft="7">
		<mx:VBox>
			<mx:Label text="{resourceManager.getString('cms','startDateLabel')}"/>
			<mx:Label text="{resourceManager.getString('cms','endDateLabel')}"/>
		</mx:VBox>
		<mx:VBox>
			<mx:DateField id="startDateField" change="validateTimes()"/> 
			<mx:DateField id="endDateField" change="validateTimes()"/> 
		</mx:VBox>
		<mx:VBox>
			<controls:SM_TimeEntry id="startDateHour" height="25" showAMPMLabel="true" showHours="true"
								   styleName="timeEntry" click="validateTimes()"/>		
			
			<controls:SM_TimeEntry id="endDateHour" height="25" showAMPMLabel="true" showHours="true"
								   styleName="timeEntry" click="validateTimes()"/>	
		</mx:VBox>
	</mx:HBox>
	<mx:Label text="{resourceManager.getString('cms','thumbnails')}" fontWeight="bold"/>
	<mx:HBox paddingLeft="7">
		<mx:Label text="{resourceManager.getString('cms','thumbanilNotRequired')}" visible="{_thumbsArray.length==0}" includeInLayout="{_thumbsArray.length==0}"/>
		<mx:HorizontalList width="100%"
						   dataProvider="{_thumbsArray}" borderStyle="solid" paddingRight="0"
						   itemRenderer="com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.distributionRenderers.ThumbDetailsRenderer"
						   rowCount="1" columnCount="{_thumbsArray.length}" height="175" borderSides="top,left,bottom"
						   visible="{(_thumbsArray.length > 0)}" includeInLayout="{(_thumbsArray.length>0)}"/>
		
	</mx:HBox>
	<mx:Label text="{resourceManager.getString('cms','videoFlavors')}" fontWeight="bold"/>
	<mx:HBox paddingLeft="7">
		<mx:Label text="{resourceManager.getString('cms','thumbanilNotRequired')}" visible="{_flavorAssets.length==0}" includeInLayout="{_flavorAssets.length==0}"/>
		<entryDetails:FlavorsTable id="flavorsTable" rowCount="{_flavorAssets.length}" 
								   flavorAssets="{_flavorAssets}"
								   visible="{_flavorAssets.length>0}" includeInLayout="{_flavorAssets.length>0}"/>	
	</mx:HBox>
	<mx:Label text="{resourceManager.getString('cms','metadata')}" fontWeight="bold"/>
	<mx:HBox paddingLeft="7">
		<mx:VBox>
			<mx:Label text="{resourceManager.getString('cms','name') + ':'}"/>
			<mx:Label text="{resourceManager.getString('cms','description') +':'}"/>
			<mx:Label text="{resourceManager.getString('cms','tags') + ':'}"/>			
		</mx:VBox>
		<mx:VBox>
			<mx:Label text="{_name}"/>
			<mx:Label text="{_description}"/>
			<mx:Label text="{_tags}"/>					
		</mx:VBox>
	</mx:HBox>
	<mx:ControlBar>
		<mx:Button id="saveBtn" label="{resourceManager.getString('cms', 'save')}" click="save()"
				   buttonMode="true"/>
	</mx:ControlBar>
</mx:TitleWindow>
