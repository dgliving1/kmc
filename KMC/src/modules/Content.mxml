<?xml version="1.0" encoding="utf-8"?>
<modules:KmcModule xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:modules="com.kaltura.kmc.modules.*"
				   xmlns:content="com.kaltura.kmc.modules.content.view.content.*"
				   xmlns:business="com.kaltura.kmc.modules.content.business.*"
				   xmlns:control="com.kaltura.kmc.modules.content.control.*"
				   xmlns:playlist="com.kaltura.kmc.modules.content.view.content.playlist.*" layout="vertical"
				   minHeight="520" minWidth="950" backgroundColor="#FFFFFF" backgroundAlpha="1" borderThickness="0"
				   borderStyle="solid" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0"
				   preloader="com.kaltura.preloaders.KmcPreloader" enabled="{!_model.loadingFlag}"
				   >

	<mx:Metadata>
		[ResourceBundle("cms")]
		[ResourceBundle("customFields")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.google.analytics.AnalyticsTracker;
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.events.AccessControlProfileEvent;
			import com.kaltura.kmc.business.JSGate;
			import com.kaltura.kmc.business.PermissionManager;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.modules.content.events.CategoryEvent;
			import com.kaltura.kmc.modules.content.events.ConversionSettingsEvent;
			import com.kaltura.kmc.modules.content.events.DistributionProfileEvent;
			import com.kaltura.kmc.modules.content.events.EntriesEvent;
			import com.kaltura.kmc.modules.content.events.EntryEvent;
			import com.kaltura.kmc.modules.content.events.MetadataProfileEvent;
			import com.kaltura.kmc.modules.content.events.PartnerEvent;
			import com.kaltura.kmc.modules.content.events.ProfileEvent;
			import com.kaltura.kmc.modules.content.events.WindowEvent;
			import com.kaltura.kmc.modules.content.model.CmsModelLocator;
			import com.kaltura.kmc.modules.content.model.states.WindowsStates;
			import com.kaltura.kmc.modules.content.utils.StringUtil;
			import com.kaltura.kmc.modules.content.view.content.IContentPanel;
			import com.kaltura.kmc.modules.content.view.window.AddStream;
			import com.kaltura.kmc.modules.content.view.window.AddTagsWin;
			import com.kaltura.kmc.modules.content.view.window.DownloadWin;
			import com.kaltura.kmc.modules.content.view.window.ManualPlaylistWindow;
			import com.kaltura.kmc.modules.content.view.window.RemoveTagsWin;
			import com.kaltura.kmc.modules.content.view.window.RulePlaylistWindow;
			import com.kaltura.kmc.modules.content.view.window.SetAccessControlProfileWin;
			import com.kaltura.kmc.modules.content.view.window.SetSchedulingWin;
			import com.kaltura.kmc.modules.content.view.window.entrydetails.EntryDetailsWin;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.types.KalturaPlaylistType;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.utils.KUtils;
			import com.kaltura.utils.ObjectHelpers;
			import com.kaltura.utils.SoManager;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaBaseEntryFilter;
			import com.kaltura.vo.KalturaLiveStreamAdminEntry;
			import com.kaltura.vo.KalturaLiveStreamBitrate;
			import com.kaltura.vo.KalturaMediaEntry;
			import com.kaltura.vo.KalturaMediaEntryFilter;
			import com.kaltura.vo.KalturaPlaylist;
			import com.kaltura.vo.KalturaPlaylistFilter;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			import mx.utils.Base64Decoder;

			private static const VERSION:String = "4";
			private static const DOWNLOAD_FINITE:String = "/file_name/name";
			
			
			[Bindable]
			/**
			 * application model
			 * */
			private var _model:CmsModelLocator = CmsModelLocator.getInstance();

			/**
			 * active popup window
			 * */
			private var _popup:TitleWindow;

			/**
			 * a secondary popup window opened over the first one
			 * */
			private var _secondPopup:TitleWindow;

			/**
			 * Google analytics tracker identifier
			 * */
			private var _urchinNumber:String;

			/**
			 * Google analytics tracker
			 * */
			private var _tracker:AnalyticsTracker;

			/**
			 * the string to use for tracking with GA
			 * */
			private var _moduleName:String = "KMC_ANDROMEDA/content";

			/**
			 * in case we want to start from a tab other than the
			 * first, name of the initial tab (as in locale)
			 * */
			private var _initialTab:String;
			
			/**
			 * indicates start() has finished executing so all initial
			 * data is present, and children can be created safely.
			 * */
			protected var _ready:Boolean = false;
			
			/**
			 * KMC is responsible to use the value of
			 * this const as the id of this module.
			 * */
			public static const NAME:String = "content";
			
			
			override public function getModuleName():String 
			{
				return NAME;
			} 
			override public function getModuleVersion():String
			{
				return VERSION;
			}
			
			override public function showSubtab(subtab:String, data:Object = null):void 
			{
				// save data in the attic
				if (data) {
					putInAttic(data);
				}
				// show the tab
				_initialTab = subtab;
				if (_ready) {
					switchToTab(subtab);
					//loads data that might have changed from a different tab
					loadChangableData();
				}
			}

			override protected function createChildren():void 
			{
				if (_ready) {
					super.createChildren();
				}
			}
			
			
			override protected function start():void 
			{
				trace("=================");
				trace("Content VERSION   " + VERSION);
				trace("=================");

				Security.allowDomain('*');
				ExternalInterface.addCallback("saveAndClose", onExternalTabChange);
			//	setStyle("backgroundColor", 0xFFFFFF);

				// flashvars and uiconf vars processing
				saveUiconfVars();
				initModelContext(_flashvars);
				initModel(_flashvars);

				//Bindings 
				BindingUtils.bindSetter(changeWindowState, _model, "windowState");
				BindingUtils.bindSetter(toggleLoading, _model, "loadingFlag");

				//Register Event Listenters
				addEventListener(Event.RESIZE, centerPopups);

				
				setAlert();
				
				if (stage) {
					initTrackers();
				}
				else {
					addEventListener(Event.ADDED_TO_STAGE, initTrackers);
				}
				_ready = true;
				addEventListener(FlexEvent.CREATION_COMPLETE, initChildren);
				createChildren();
				
			}
			

			/**
			 * put things on the attic object.
			 * don't change the object, add attributes.
			 * */
			protected function putInAttic(o:Object):void {
				if (_model.attic == null) {
					_model.attic = new Object();
				}
				o = ObjectHelpers.lowerNoUnderscore(o);
				for (var prop:String in o) {
					_model.attic[prop] = o[prop];
				}
			}

			
			/**
			 * init the panels in the view after all data is ready
			 * */
			private function initChildren(e:FlexEvent):void {
				removeEventListener(FlexEvent.CREATION_COMPLETE, initChildren);
				var kmef:KalturaBaseEntryFilter ;
				if (_model.attic.filter ) {
					kmef = createFilterFromString(_model.attic.filter);
					_model.attic.filter = null;
				}
				
				// if there is entryid to start with, open the entry drilldown.
				if (_model.attic.entryid) {
					// get the entry
					var cgEvent:EntryEvent = new EntryEvent(EntryEvent.GET_ENTRY, null, _model.attic.entryid);
					//TODO -- block if no access
					cgEvent.dispatch();
				}
				
				// roles and permissions 
				var tabsToHide:Array = PermissionManager.getInstance().getRelevantSubTabsToHide(NAME);
				for each (var subtabName:String in tabsToHide) {
					contentView.removeChild(this[subtabName]);
				}
				if (_initialTab && _initialTab != "manage") {
					_model.attic.kmef = kmef;
					// switch tab if asked
					switchToTab(_initialTab);
				} else {
					(contentView.selectedChild as IContentPanel).init(kmef);
					JSGate.writeUrlHash(NAME, contentView.selectedChild.id);
				}
				loadData();
			}
			
			
			/**
			 * start the sequence of commands which will end in opening drilldown 
			 * window for the given entry.
			 * @param entry		the entry to drill into.
			 * */
			public function requestEntryDrilldown(entry:KalturaBaseEntry):void {
				var cgEvent:CairngormEvent;
				cgEvent = new EntryEvent(EntryEvent.SET_SELECTED_ENTRY, entry);
				cgEvent.dispatch();
				if (entry is KalturaPlaylist) {
					//switch manual / rule base
					if ((entry as KalturaPlaylist).playlistType == KalturaPlaylistType.STATIC_LIST) {
						// manual list
						cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.PLAYLIST_MANUAL_WINDOW);
						cgEvent.dispatch();
					}
					if ((entry as KalturaPlaylist).playlistType == KalturaPlaylistType.DYNAMIC) {
						cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.PLAYLIST_RULE_BASED_WINDOW);
						cgEvent.dispatch();
					}
				}
				else {
					cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.ENTRY_DETAILS_WINDOW);
					cgEvent.dispatch();
				}
			}


			/**
			 * set Alert locale for this module
			 * */
			private function setAlert():void 
			{
				Alert.yesLabel = resourceManager.getString('cms', 'yes');
				Alert.noLabel = resourceManager.getString('cms', 'no');
				Alert.okLabel = resourceManager.getString('cms', 'ok');
				Alert.cancelLabel = resourceManager.getString('cms', 'cancel');
			}
			
			
			/**
			 * creates a KalturaMediaEntryFilter from encoded data
			 * @param filter	encoded filter data
			 * */
			private function createFilterFromString(filter:String):KalturaBaseEntryFilter {
				var dec:Base64Decoder = new Base64Decoder();
				dec.decode(filter);
				var filterString:String = dec.toByteArray().toString();
				var filterArray:Array = filterString.split("&");
				
				// distinguish between playlist and entry:
				var kmef:KalturaBaseEntryFilter;
				for (var j:int = 0; j<filterArray.length; j++) {
					if (filterArray[j].indexOf("objectType") == 0) {
						var cls:String = filterArray[j].split("=")[1];
						if (cls == "KalturaPlaylistFilter") {
							kmef = new KalturaPlaylistFilter();
						}
						else {
							kmef = new KalturaMediaEntryFilter();
						}
						break;
					}
				}
				
				var att:Array;
				for (var i:int = 0; i<filterArray.length; i++) {
					att = filterArray[i].split("=");
					if (att[1]) {
						// KalturaMediaEntryFilter is dynamic, ok to put all values without testing
						kmef[att[0]] = att[1];
					}
				}
				
				return kmef;
			}

			/**
			 * dispatches events that trigger data loading
			 * */
			private function loadData():void 
			{
				var getCategoriesList:CategoryEvent = new CategoryEvent(CategoryEvent.LIST_CATEGORIES);
				getCategoriesList.dispatch();

				var getPartnerInfoEvent:PartnerEvent = new PartnerEvent(PartnerEvent.GET_PARTNER_INFO);
				getPartnerInfoEvent.dispatch();
				
				if (_model.entryDetailsModel.enableDistribution) {
					var listDistribution:DistributionProfileEvent = new DistributionProfileEvent(DistributionProfileEvent.LIST);
					listDistribution.dispatch();
				}
				
				loadChangableData();
			}
			
			/**
			 * dispatches events that trigger data loading, for data that can be changed from other
			 * tabs such as "settings"
			 * */
			private function loadChangableData():void {
				//to populate the filter
				var getAllFlavorParams:ConversionSettingsEvent = new ConversionSettingsEvent(ConversionSettingsEvent.LIST_FLAVOR_PARAMS);
				getAllFlavorParams.dispatch();

				var getAllProfilesEvent:AccessControlProfileEvent = new AccessControlProfileEvent(AccessControlProfileEvent.LIST_ACCESS_CONTROLS_PROFILES);
				getAllProfilesEvent.dispatch();
				
				if (_model.filterModel.enableCustomData) {
  					var listMetadataProfile:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.LIST);
					listMetadataProfile.dispatch();  
				}
				
				// bulk upload tab
				var listConvProfileEvent:ProfileEvent = new ProfileEvent(ProfileEvent.LIST_CONVERSION_PROFILE);
				listConvProfileEvent.dispatch();
				
			}


			/**
			 * I have no idea what this function (or this flag) do.
			 * */
			private function onExternalTabChange():void 
			{
				JSGate.onTabChange();
			}


			/**
			 * bring any visible popups to the center of the screen
			 * */
			private function centerPopups(event:Event = null):void 
			{
				if (_popup)
					PopUpManager.centerPopUp(_popup);

				if (_secondPopup)
					PopUpManager.centerPopUp(_secondPopup);
			}


			/**
			 * initialize analytics trackers (GA needs the stage for debug mode)
			 * */
			private function initTrackers(e:Event = null):void {
				if (willTrigger(Event.ADDED_TO_STAGE)) {
					removeEventListener(Event.ADDED_TO_STAGE, initTrackers);
				}
				_urchinNumber = _flashvars.urchinnumber;
				var ga:GoogleAnalyticsTracker = GoogleAnalyticsTracker.getInstance();
				ga.init(_model.context.kc.partnerId, _model.context.userId, this, _moduleName, _urchinNumber, "AS3", _flashvars.gadebug == "true" ? true : false);
				var ka:KAnalyticsTracker = KAnalyticsTracker.getInstance();

				// intialize local data
				SoManager.getInstance().getLocalData("kmc", _model.context.userId);

				ka.init(_model.context.kc, "content", VERSION, _model.context.userId);
			}
			
			/**
			 * saves value of vars passed via uiconf
			 * */
			private function saveUiconfVars():void {
				var confFile:XML = new XML(_uiconf.confFile);
				
				// context:
				_model.context.moderationUiconf = confFile.uiconf.kdp.moderation.text().toString(); 
				_model.context.drilldownUiconf = confFile.uiconf.kdp.drilldown.text().toString();
				_model.context.captureThumbnailUiconf = confFile.uiconf.kdp.captureThumbnail.text().toString();
				
				// model:
				_model.entryDetailsModel.metadataDefaultUiconf = confFile.uiconf.metadata.text().toString();
				_model.bulkUploadModel.sampleFileUrl = confFile.bulkupload.text().toString();
				
			}


			/**
			 * initialize application model according to flashvars data
			 * @param objParam	"lowercased" parameters object
			 * */
			private function initModel(objParam:Object):void {
				_model.app = this as IFlexDisplayObject;

				if (objParam.opencw) {
					_model.bulkUploadModel.openCw = objParam.opencw;
				}

				if (objParam.openplaylist) {
					_model.openPlaylist = objParam.openplaylist;
				}

				if (objParam.openplayer) {
					_model.openPlayer = objParam.openplayer;
				}

//				// is this partner allowed to view Custom Data
//				if (objParam.enablecustomdata == "true") {
//					_model.filterModel.enableCustomData = true;
//				}

			}


			/**
			 * initialize application context according to flashvars data
			 * @param objParam	"lowercased" parameters object
			 * */
			private function initModelContext(objParam:Object):void {
				// flashvars:
				_model.context.userId = objParam.uid;
				_model.context.subpId = objParam.subpid;
				_model.context.rootUrl = KUtils.hostFromCode(objParam.host);
				_model.context.cdnHost = objParam.cdnhost ? objParam.cdnhost : _model.context.rootUrl;
				_model.context.kc = _kc;
			}


			/**
			 * fix race condition, application added or tab switch from initial flashvar
			 */
			private function switchToTab(tab:String = ""):void {
				switch (tab) {
					case 'manage':
						secTln.selectedIndex = 0;
						break;
					case 'moderation':
						secTln.selectedIndex = 1;
						break;
					case 'playlists':
						secTln.selectedIndex = 2;
						break;
					case 'syndication':
						secTln.selectedIndex = 3;
						break;
					case  'upload':
						secTln.selectedIndex = 4;
						break;
					default:
						secTln.selectedIndex = 0;
						break;
				}
				// init subtab
				(contentView.selectedChild as IContentPanel).init();
				JSGate.writeUrlHash(NAME, contentView.selectedChild.id);
			}


			/**
			 * close popup window
			 * */
			private function closePopup():void {
				if (_secondPopup) {
					_secondPopup.removeEventListener(KmcHelpEvent.HELP, onHelp);
					PopUpManager.removePopUp(_secondPopup);
					_model.has2OpenedPopups = false;
					_secondPopup = null;
				}
				else if (_popup) {
					_popup.removeEventListener(KmcHelpEvent.HELP, onHelp);
					PopUpManager.removePopUp(_popup);
					_popup = null;
					enableHtmlTabs(true);
				}
			}


			/**
			 * check after changing <code>_model.windowState</code> if
			 * somthing need to be refreshed
			 * */
			private function refreshDataByPopupType():void {
				if (_popup is RulePlaylistWindow && !_secondPopup) {
					//this is simple add rule state so do nothing
				}
				else if (_popup is RulePlaylistWindow && (_popup as RulePlaylistWindow).addRuleWin) {
					//if add rule window exist we need to refreash it
					(_popup as RulePlaylistWindow).addRuleWin.singleRule.runRule();
				}
				else if (_popup is RulePlaylistWindow && _secondPopup) {
					// we just close the second popup in rule base playlist
					(_popup as RulePlaylistWindow).simpleRule.runRule();
				}
				else if (_popup is ManualPlaylistWindow && _secondPopup) {
					// we just close the second popup
					(_popup as ManualPlaylistWindow).loadEntries();
				}
				else if (_popup is AddTagsWin || _popup is RemoveTagsWin) {
					//TODO refresh entry list 
//					var searchEvent:SearchEvent = new SearchEvent(SearchEvent.SEARCH_ENTRIES, _model.listableVo);
//					searchEvent.dispatch();
				}

			}


			/**
			 * opens a popup window with entry details
			 * */
			private function openEntryDetails():EntryDetailsWin {
				var edw:EntryDetailsWin = new EntryDetailsWin();
				edw.styleName = "WinTitleStyle";
				edw.entryDetailsModel = _model.entryDetailsModel;
				edw.showEmbedCode = _model.showEmbedCode;
				edw.filterModel = _model.filterModel;
				edw.context = _model.context;
				edw.openPlayerFunc = _model.openPlayer;
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_ENTRY_DRILLDOWN,GoogleAnalyticsConsts.CONTENT)
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_ENTRY_DRILLDOWN, "content>Entry DrillDown");
				return edw;
			}
			
			private function onHelp(e:KmcHelpEvent):void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, e.anchor));
			}


			/**
			 * allows download of a single image or opens a download popup window
			 * */
			private function openDownload():DownloadWin {
				var dw:DownloadWin;
				//if the user selected to download a single image, no need to open to pop-up
				if ((_model.selectedEntries) && (_model.selectedEntries.length == 1) && (_model.selectedEntries[0] is KalturaMediaEntry) && ((_model.selectedEntries[0] as KalturaMediaEntry).mediaType == KalturaMediaType.IMAGE)) {
					var urlRequest:URLRequest = new URLRequest(_model.selectedEntries[0].downloadUrl + DOWNLOAD_FINITE);
					navigateToURL(urlRequest);
					this.enabled = true;
				}
				else {
					dw = new DownloadWin();
					dw.entries = _model.selectedEntries;
					dw.flavorParams = _model.filterModel.flavorParams;
				}
				return dw;
			}


			/**
			 * opens a popup window with manual playlist
			 * */
			private function openManualPlaylist():ManualPlaylistWindow {
				var cgEvent:EntriesEvent = new EntriesEvent(EntriesEvent.SET_SELECTED_ENTRIES_FOR_PLAYLIST, new ArrayCollection(_model.selectedEntries));
				cgEvent.dispatch();

				var mpw:ManualPlaylistWindow = new ManualPlaylistWindow();
				mpw.rootUrl = _model.context.rootUrl;
				mpw.filterData = _model.filterModel;
				mpw.playlistModel = _model.playlistModel;
				mpw.selectedEntry = _model.entryDetailsModel.selectedEntry;
				return mpw;
			}


			/**
			 * opens a popup window with rule based playlist
			 * */
			private function openRuleBasedPlaylist():RulePlaylistWindow {
				var rpw:RulePlaylistWindow = new RulePlaylistWindow();
				rpw.rulePlaylistData = _model.playlistModel;
				rpw.rootUrl = _model.context.rootUrl;
				if (_model.entryDetailsModel.selectedEntry && (_model.entryDetailsModel.selectedEntry is KalturaPlaylist)) {
					rpw.editPlaylist = _model.entryDetailsModel.selectedEntry as KalturaPlaylist;
				}
				rpw.filterData = _model.filterModel;
				// assign the current fiter to the new window 
				rpw.onTheFlyFilter = _model.playlistModel.onTheFlyFilter;
				_model.playlistModel.onTheFlyFilter = null;
				return rpw;
			}


			/**
			 * opens or closes needed popup windows according to new state
			 * */
			private function changeWindowState(newState:String):void {
				if (newState == WindowsStates.NONE) {
					refreshDataByPopupType();
					closePopup();
					this.enabled = true;
				}
				else {
					this.enabled = false;
					var currentPopUp:TitleWindow;
					switch (newState) {
						case WindowsStates.ENTRY_DETAILS_WINDOW:
							currentPopUp = openEntryDetails();
							break;
						case WindowsStates.DOWNLOAD_WINDOW:
							currentPopUp = openDownload();
							break;
						case WindowsStates.ADD_TAGS_WINDOW:
							var atw:AddTagsWin = new AddTagsWin();
							atw.selectedEntries = new ArrayCollection(_model.selectedEntries);
							currentPopUp = atw;
							break;
						case WindowsStates.ADD_LIVE_STREAM:
							currentPopUp = new AddStream();
							break;
						case WindowsStates.ADD_ADMIN_TAGS_WINDOW:
							var aatw:AddTagsWin = new AddTagsWin();
							aatw.isAdminTag = true;
							aatw.selectedEntries = _model.checkedEntries;
							currentPopUp = aatw;
							break;
						case WindowsStates.REMOVE_TAGS_WINDOW:
							currentPopUp = new RemoveTagsWin();
							(currentPopUp as RemoveTagsWin).selectedEntries = new ArrayCollection(_model.selectedEntries);
							break;
						case WindowsStates.REMOVE_ADMIN_TAGS_WINDOW:
							var rtw:RemoveTagsWin = new RemoveTagsWin();
							rtw.isAdminTag = true;
							rtw.selectedEntries = _model.checkedEntries;
							currentPopUp = rtw;
							break;
						case WindowsStates.PLAYLIST_MANUAL_WINDOW:
							currentPopUp = openManualPlaylist();
							break;
						case WindowsStates.PLAYLIST_RULE_BASED_WINDOW:
							currentPopUp = openRuleBasedPlaylist();
							break;
						case WindowsStates.SETTING_ACCESS_CONTROL_PROFILES_WINDOW:
							currentPopUp = new SetAccessControlProfileWin();
							(currentPopUp as SetAccessControlProfileWin).selectedEntries = new ArrayCollection(_model.selectedEntries);
							(currentPopUp as SetAccessControlProfileWin).filterModel = _model.filterModel;
							break;
						case WindowsStates.SETTING_SCHEDULING_WINDOW:
							currentPopUp = new SetSchedulingWin();
							(currentPopUp as SetSchedulingWin).selectedEntries = new ArrayCollection(_model.selectedEntries);
							break;
						case WindowsStates.PREVIEW:
							openPreviewEmbed();
							break;
					}

					// add the new window
					if (currentPopUp) {
						addPopup(currentPopUp);
					}
				}
			}


			/**
			 * adds a popup window to the screen
			 * */
			private function addPopup(currentPopUp:TitleWindow):void {
				currentPopUp.addEventListener(KmcHelpEvent.HELP, onHelp);
				// remember the new window
				if (_popup) {
					_secondPopup = currentPopUp;
					_model.has2OpenedPopups = true;
				}
				else {
					_popup = currentPopUp;
					enableHtmlTabs(false);
				}
				PopUpManager.addPopUp(currentPopUp, this, true);
				centerPopups();
			}


			/**
			 * open a preview player with live streaming entry
			 * */
			private function openLivestreamPreview(entry:KalturaBaseEntry):void {
				var lp:KalturaLiveStreamAdminEntry = entry as KalturaLiveStreamAdminEntry;
				var bitrates:Array = new Array();
				var o:Object;
				for each (var br:KalturaLiveStreamBitrate in lp.bitrates) {
					o = new Object();
					o.bitrate = br.bitrate;
					o.width = br.width;
					o.height = br.height;
					bitrates.push(o);
				}

				if (_model.openPlayer) {
					//id, name, description, previewonly, is_playlist, uiconf_id 
					JSGate.doPreviewEmbed(_model.openPlayer, lp.id, lp.name, StringUtil.cutTo512Chars(lp.description),!_model.showEmbedCode, false, _model.attic.previewuiconf, bitrates, false);
					_model.attic.previewuiconf = null;
				}

				//First time funnel
				if (!SoManager.getInstance().checkOrFlush(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED)) {
					GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED,GoogleAnalyticsConsts.CONTENT);
				}
			}


			/**
			 * open a preview player with playlist
			 * */
			private function openPlaylistPreview(entry:KalturaBaseEntry):void {
				// open playlist preview
				if (_model.openPlaylist) {
					var pl:KalturaPlaylist = entry as KalturaPlaylist;
					JSGate.doPreviewEmbed(_model.openPlaylist, pl.id, pl.name, StringUtil.cutTo512Chars(pl.description),!_model.showEmbedCode, true, _model.attic.previewuiconf, null, false);
					_model.attic.previewuiconf = null;
					//first time funnel 
					if (!SoManager.getInstance().checkOrFlush(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYLIST_EMBED)) {
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYLIST_EMBED,GoogleAnalyticsConsts.CONTENT);
					}
				}
			}


			/**
			 * open a preview player with a normal entry
			 * */
			private function openEntryPreview(entry:KalturaBaseEntry):void {
				// open regular entry preview
				if (_model.openPlayer) {
//					JSGate.doPreviewEmbed(_model.openPlayer, entry.id, entry.name, StringUtil.cutTo512Chars(entry.description), !_model.showEmbedCode, false, _attic.previewuiconf, null);
//					_attic.previewuiconf = null;
					var cgEvent : EntryEvent = new EntryEvent(EntryEvent.GET_FLAVOR_ASSETS_FOR_PREVIEW, entry);
					cgEvent.dispatch();
				}
				//First time funnel
				if (!SoManager.getInstance().checkOrFlush(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED)) {
					GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED,GoogleAnalyticsConsts.CONTENT);
				}
			}


			/**
			 * Open a preview player. <br>
			 * This method triggers one of the specific openPreview methods.
			 * */
			private function openPreviewEmbed():void {
				if (!initialized)
					return;

				var entry:KalturaBaseEntry = _model.entryDetailsModel.selectedEntry;

				if (entry is KalturaLiveStreamAdminEntry) {
					openLivestreamPreview(entry);

				}
				else if (entry is KalturaPlaylist) {
					openPlaylistPreview(entry);
				}
				else {
					openEntryPreview(entry);
				}
				_model.windowState = WindowsStates.NONE;
			}



			/**
			 * shows or hides the loading (busy) cursor
			 * */
			private function toggleLoading(isLoading:Boolean):void {
				if (isLoading) {
					CursorManager.setBusyCursor();
					this.enabled = false;
				}
				else {
					CursorManager.removeBusyCursor();
					this.enabled = true;
				}
			}


			/**
			 * track tab changes in analytics and URL hash
			 * */
			private function trackTabChange(evt:Event):void {
				var label:String = contentView.selectedChild.id;
				switch (label) {
					case "manage":
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_PAGE_VIEW, "pagingInEntryTable>Manage");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_PAGE_VIEW + resourceManager.getString('cms', 'entriesTitle'),GoogleAnalyticsConsts.CONTENT);
						break;
					case "upload":
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_PAGE_VIEW, "pagingInBulkUploadTable>Upload");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_PAGE_VIEW + resourceManager.getString('cms', 'bulkUpload'),GoogleAnalyticsConsts.CONTENT);
						break;
					case "playlists":
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_PAGE_VIEW, "pagingInPlaylistTable>Playlists");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_PAGE_VIEW + resourceManager.getString('cms', 'playlistTitle'),GoogleAnalyticsConsts.CONTENT);
						break;
					case "moderate":
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_PAGE_VIEW, "pagingInModerationTable>Moderate");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_PAGE_VIEW + resourceManager.getString('cms', 'moderation'),GoogleAnalyticsConsts.CONTENT)
						break;
					case "syndication":
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT,KalturaStatsKmcEventType.CONTENT_PAGE_VIEW, "pagingInSyndicateTable>Syndicate");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_PAGE_VIEW + resourceManager.getString('cms', 'externalSyndication'),GoogleAnalyticsConsts.CONTENT);
						break;
				} 

//				JSGate.writeUrlHash(label);

				// reset data when moving between tabs
				_model.selectedEntries = [];
			}


			private function onHelpClick(event:Event):void {
				var tab:DisplayObject = contentView.selectedChild;
				var anchor:String;
				switch (tab) {
					case manage:  {
						anchor = 'section1';
						break;
					}
					case moderation:  {
						anchor = 'section9';
						break;
					}
					case playlists:  {
						anchor = 'section10';
						break;
					}
					case syndication:  {
						anchor = 'section14';
						break;
					}
					case upload:  {
						anchor = 'section17';
						break;
					}

					default:  {
						Alert.show("Help for unknown tab !");
					}
				}
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, anchor));
			}


			/**
			 * initialize the selected view
			 * */
			protected function initSelectedTab(event:IndexChangedEvent):void {
				// initialize the new panel with filter saved in the attic, if any.
				(contentView.getChildAt(event.newIndex) as IContentPanel).init(_model.attic.kmef);
				JSGate.writeUrlHash(NAME, contentView.selectedChild.id);
			}
			
			
		]]>
	</mx:Script>

	<!-- the FrontController, containing Commands specific to this appliation -->
	<control:CMSController/>
	<!-- permissions setter -->
	<content:GeneralPermissionsSetter id="generalPermissions"/>
	<mx:VBox id="mainView" width="100%" height="100%" styleName="mainView">

		<mx:HBox width="100%" styleName="tabsContainer">
			<mx:TabBar id="secTln" styleName="tln" itemClick="{trackTabChange(event)}" buttonMode="true"
					   dataProvider="{contentView}">
			</mx:TabBar>
			<mx:Spacer width="100%"/>
			<mx:Button styleName="help" buttonMode="true" click="{onHelpClick(event)}"/>
		</mx:HBox>

		<mx:ViewStack id="contentView" width="100%" height="100%" styleName="contentViewStack" minWidth="900"
					  minHeight="500" selectedIndex="{secTln.selectedIndex}" change="initSelectedTab(event)">
			<content:Entries id="manage" styleName="pageStyle" entryDetailsModel="{_model.entryDetailsModel}"
							 filterModel="{_model.filterModel}" 
							 label="{ResourceManager.getInstance().getString('cms','entriesTitle')}"/>
			<content:Moderation id="moderation" height="100%" styleName="pageStyle" context="{_model.context}"
								selectedEntry="{_model.entryDetailsModel.selectedEntry}"
								filterModel="{_model.filterModel}" moderationModel="{_model.moderationModel}"
								label="{ResourceManager.getInstance().getString('cms','moderation')}"/>
			<playlist:Playlist id="playlists" width="100%" styleName="pageStyle"
							   selectedEntry="{_model.entryDetailsModel.selectedEntry}"
							   previewOnly="{_model.showEmbedCode}"
							   label="{ResourceManager.getInstance().getString('cms','playlistTitle')}"/>
			<content:ExternalSyndication id="syndication" styleName="pageStyle" flavorParams="{_model.filterModel.flavorParams}"
										 rootUrl="{_model.context.rootUrl}" extSynModel="{_model.extSynModel}"
										 label="{ResourceManager.getInstance().getString('cms','externalSyndication')}"/>
			<content:BulkUpload id="upload" width="100%" styleName="pageStyle" ks="{_model.context.kc.ks}"
								bulkUploadData="{_model.bulkUploadModel}"
								label="{ResourceManager.getInstance().getString('cms','bulkUpload')}"/>
		</mx:ViewStack>
	</mx:VBox>
</modules:KmcModule>
