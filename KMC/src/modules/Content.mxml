<?xml version="1.0" encoding="utf-8"?>
<modules:KmcModule xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:modules="com.kaltura.kmc.modules.*"
				   xmlns:content="com.kaltura.kmc.modules.content.view.content.*"
				   xmlns:business="com.kaltura.kmc.modules.content.business.*"
				   xmlns:control="com.kaltura.kmc.modules.content.control.*"
				   xmlns:playlist="com.kaltura.kmc.modules.content.view.content.playlist.*"
				   implements="com.kaltura.edw.business.IDataOwner" layout="vertical" 
				   minWidth="950" borderThickness="0" borderStyle="solid" verticalGap="0" paddingLeft="0"
				   paddingRight="0" paddingTop="0" paddingBottom="0" preloader="com.kaltura.preloaders.KmcPreloader"
				   enabled="{!_model.loadingFlag}">

	<mx:Metadata>
		[ResourceBundle("cms")]
		[ResourceBundle("common")]
		[ResourceBundle("customFields")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.edw.business.IDataOwner;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.components.playlist.ManualPlaylistWindow;
			import com.kaltura.edw.components.playlist.events.ManualPlaylistWindowEvent;
			import com.kaltura.edw.components.playlist.types.ManualPlaylistWindowMode;
			import com.kaltura.edw.control.DataTabController;
			import com.kaltura.edw.control.KedController;
			import com.kaltura.edw.control.events.KedEntryEvent;
			import com.kaltura.edw.control.events.LoadEvent;
			import com.kaltura.edw.control.events.MetadataProfileEvent;
			import com.kaltura.edw.control.events.SearchEvent;
			import com.kaltura.edw.events.KedDataEvent;
			import com.kaltura.edw.model.datapacks.ContentDataPack;
			import com.kaltura.edw.model.datapacks.ContextDataPack;
			import com.kaltura.edw.model.datapacks.CuePointsDataPack;
			import com.kaltura.edw.model.datapacks.CustomDataDataPack;
			import com.kaltura.edw.model.datapacks.DistributionDataPack;
			import com.kaltura.edw.model.datapacks.EntryDataPack;
			import com.kaltura.edw.model.datapacks.FlavorsDataPack;
			import com.kaltura.edw.model.types.WindowsStates;
			import com.kaltura.edw.view.EntryDetailsWin;
			import com.kaltura.edw.view.window.CategoryBrowser;
			import com.kaltura.edw.view.window.SetOwnerWindow;
			import com.kaltura.edw.vo.ListableVo;
			import com.kaltura.events.AccessControlProfileEvent;
			import com.kaltura.events.FileUploadEvent;
			import com.kaltura.kmc.business.JSGate;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.modules.content.events.*;
			import com.kaltura.kmc.modules.content.model.CmsModelLocator;
			import com.kaltura.kmc.modules.content.model.types.EntryDetailsWindowState;
			import com.kaltura.kmc.modules.content.utils.StringUtil;
			import com.kaltura.kmc.modules.content.view.content.IContentPanel;
			import com.kaltura.kmc.modules.content.view.window.AddStream;
			import com.kaltura.kmc.modules.content.view.window.AddTagsWin;
			import com.kaltura.kmc.modules.content.view.window.DownloadWin;
			import com.kaltura.kmc.modules.content.view.window.MoveCategoriesWindow;
			import com.kaltura.kmc.modules.content.view.window.RemoveCategoriesWindow;
			import com.kaltura.kmc.modules.content.view.window.RemoveTagsWin;
			import com.kaltura.kmc.modules.content.view.window.RulePlaylistWindow;
			import com.kaltura.kmc.modules.content.view.window.SetAccessControlProfileWin;
			import com.kaltura.kmc.modules.content.view.window.SetSchedulingWin;
			import com.kaltura.kmc.modules.content.view.window.cdw.CategoryDetailsWin;
			import com.kaltura.kmvc.control.KMvCEvent;
			import com.kaltura.kmvc.model.KMvCModel;
			import com.kaltura.managers.FileUploadManager;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.types.KalturaPlaylistType;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.utils.KUtils;
			import com.kaltura.utils.ObjectHelpers;
			import com.kaltura.utils.SoManager;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaBaseEntryFilter;
			import com.kaltura.vo.KalturaCategory;
			import com.kaltura.vo.KalturaLiveStreamAdminEntry;
			import com.kaltura.vo.KalturaLiveStreamBitrate;
			import com.kaltura.vo.KalturaMediaEntry;
			import com.kaltura.vo.KalturaMediaEntryFilter;
			import com.kaltura.vo.KalturaPlaylist;
			import com.kaltura.vo.KalturaPlaylistFilter;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.IFlexDisplayObject;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ResizeEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			import mx.utils.Base64Decoder;

		
			private static const DOWNLOAD_FINITE:String = "/file_name/name";

			/**
			 * max number of categories an entry may be associated with,
			 * may be overriden with maxNumCategories flashvar
			 * */
			private static const DEFAULT_CATEGORIES_NUM:int = 32;
			private static const SUB_MENU_HEIGHT : int = 18;
			
			[Bindable]
			private var _tabBarViewStack:ViewStack;
			[Bindable]
			private var _rightBtnsViewStack:ViewStack;


			[Bindable]
			/**
			 * application model
			 * */
			private var _model:CmsModelLocator = CmsModelLocator.getInstance();

			[Bindable]
			/**
			 * entry data
			 * */
			private var _entryData:EntryDataPack = KMvCModel.getInstance().getDataPack(EntryDataPack) as EntryDataPack;
			
			/**
			 * custom data information
			 * */
			private var _customDataData:CustomDataDataPack = KMvCModel.getInstance().getDataPack(CustomDataDataPack) as CustomDataDataPack;
			
			[Bindable]
			/**
			 * reference to the current files in the upload file list
			 * */
			private var _files : ArrayCollection = FileUploadManager.getInstance().filesCollection;
			
			/**
			 * Google analytics tracker identifier
			 * */
			private var _urchinNumber:String;


			/**
			 * in case we want to start from a tab other than the
			 * first, name of the initial tab (as in locale)
			 * */
			private var _initialTab:String;

			/**
			 * indicates start() has finished executing so all initial
			 * data is present, and children can be created safely.
			 * */
			protected var _ready:Boolean = false;

			/**
			 * KMC is responsible to use the value of
			 * this const as the id of this module.
			 * */
			public static const NAME:String = "content";


			override public function getModuleName():String {
				return NAME;
			}




			override public function showSubtab(subtab:String, data:Object = null):void {
				// save data in the attic
				if (data) {
					putInAttic(data);
				}
				// show the tab
				_initialTab = subtab;
				if (_ready) {
					handleEntryId();
					_model.filterModel.loadingRequired = true;
					(_model.entryDetailsModel.getDataPack(FlavorsDataPack) as FlavorsDataPack).conversionProfileLoaded = false;
					switchToTab(subtab);
					//loads data that might have changed from a different tab
					loadChangableData();
				}
			}


			override protected function createChildren():void {
				if (_ready) {
					super.createChildren();
				}
			}


			override protected function start():void {
				Security.allowDomain('*');
				ExternalInterface.addCallback("saveAndClose", onExternalTabChange);

				systemManager.addEventListener(ResizeEvent.RESIZE, stopEvent, false, 1);
				
				// flashvars and uiconf vars processing
				if (!_flashvars.maxnumcategories) {
					_flashvars.maxnumcategories = DEFAULT_CATEGORIES_NUM;
				}
				saveUiconfVars();
				initModelContext(_flashvars);
				initModel(_flashvars);

				//Bindings 
				BindingUtils.bindSetter(changeWindowState, _model, "windowState");
				BindingUtils.bindSetter(toggleLoading, _model, "loadingFlag");

				//Register Event Listenters
				addEventListener(Event.RESIZE, centerPopups);

				setAlert();

				if (stage) {
					initTrackers();
				}
				else {
					addEventListener(Event.ADDED_TO_STAGE, initTrackers);
				}
				_ready = true;

				FileUploadManager.getInstance().addEventListener(FileUploadEvent.UPLOAD_ERROR, showError);
	
				addEventListener(FlexEvent.CREATION_COMPLETE, initChildren);
				createChildren();

			}

			private function stopEvent(e:Event):void {
				var cl:String = getQualifiedClassName(e);
				if (e.type == "resize" &&  cl == "fl.events::ComponentEvent") {
					// this is a flash event and Flex will not know how to "eat" it,
					// it probably came from KDP.
					e.stopImmediatePropagation();
					e.preventDefault();
				}
			}
			
			/**
			 * create a new audio entry
			 * */
			public function createAudioEntry():void {
				var entry:KalturaMediaEntry = new KalturaMediaEntry();
				entry.name = resourceManager.getString('cms','defaultEntryName');
				entry.mediaType = KalturaMediaType.AUDIO;
				var addMedia:EntriesEvent = new EntriesEvent(EntriesEvent.ADD_ENTRY);
				addMedia.data = entry;
				addMedia.dispatch();
			}
			
			/**
			 * create a new video entry
			 * */
			public function createVideoEntry():void {
				var entry:KalturaMediaEntry = new KalturaMediaEntry();
				entry.name = resourceManager.getString('cms','defaultEntryName');
				entry.mediaType = KalturaMediaType.VIDEO;
				var addMedia:EntriesEvent = new EntriesEvent(EntriesEvent.ADD_ENTRY);
				addMedia.data = entry;
				addMedia.dispatch();
			}
			
			
			/**
			 * create a new livestream entry
			 * */
			public function createLiveEntry():void {
				var cgEvent:WindowEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.ADD_LIVE_STREAM);
				cgEvent.dispatch();
			}
			


			protected function showError(e:FileUploadEvent):void {
				Alert.show(e.error, ResourceManager.getInstance().getString('cms', 'error'));
			}


			/**
			 * entry details data loaded (triggered by command)
			 * */
			public function onRequestedDataLoaded():void {
				// init entry details window
				var popup:TitleWindow = _model.topPopup;

//				if (popup && popup is EntryDetailsWin) {
//					(popup as EntryDetailsWin).init();
//				}
			}


			/**
			 * if there is entryid to start with, open the entry drilldown
			 * loads info required for drill down
			 * */
			protected function handleEntryId():void {
				//get default metadata view if needed
				if (_model.filterModel.enableCustomData) {
					if (!_customDataData.metadataDefaultUiconfXML) {
						var getMetadataUiconf:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.GET_METADATA_UICONF);
						DataTabController.getInstance().dispatch(getMetadataUiconf);
					}
				}
				// if there is entryid to start with, open the entry drilldown.
				if (_model.attic.entryid) {
					// need to set a dummy dispatcher, so we'll know when the entry is loaded.
					_entryIdDispatcher = new EventDispatcher();
					_entryIdDispatcher.addEventListener(KedDataEvent.OPEN_ENTRY, handleKedEvents, false, 0, true);
					(_model.entryDetailsModel.getDataPack(ContextDataPack) as ContextDataPack).dispatcher = _entryIdDispatcher;
					// get the entry
					var kEvent:KedEntryEvent = new KedEntryEvent(KedEntryEvent.GET_ENTRY_AND_DRILLDOWN, null, _model.attic.entryid);
					KedController.getInstance().dispatch(kEvent);
					_model.attic.entryid = null;
				}
			}
			
			
			/**
			 * when opening KMC with a drilldown, need to supply ked with 
			 * a dummy dispatcher because the the drilldown only updates 
			 * this value after it is created. use this.
			 * */
			private var _entryIdDispatcher:IEventDispatcher;

			/**
			 * put things on the attic object.
			 * don't change the object, add attributes.
			 * */
			protected function putInAttic(o:Object):void {
				if (_model.attic == null) {
					_model.attic = new Object();
				}
				o = ObjectHelpers.lowerNoUnderscore(o);
				for (var prop:String in o) {
					_model.attic[prop] = o[prop];
				}
			}



			/**
			 * init the panels in the view after all data is ready
			 * */
			private function initChildren(e:FlexEvent):void {
				removeEventListener(FlexEvent.CREATION_COMPLETE, initChildren);

				handleEntryId();
				
				// roles and permissions 
				var tabsToHide:Array = PermissionManager.getInstance().getRelevantSubTabsToHide(NAME);
				for each (var subtabName:String in tabsToHide) {
					var indexToRemove:int = contentView.getChildIndex(this[subtabName]);
					contentView.removeChildAt(indexToRemove);
					if (indexToRemove < leftBtnsHBox.numChildren)
						leftBtnsHBox.removeChildAt(indexToRemove);
					else
						rightBtnsHBox.removeChildAt(indexToRemove - leftBtnsHBox.numChildren);

				}

				if (_initialTab && _initialTab != "manage") {
//					_model.attic.kmef = kmef;
					// switch tab if asked
					switchToTab(_initialTab);
				}
				else {
					// if initial filter provided
					var kmef:KalturaBaseEntryFilter;
					if (_model.attic.filter) {
						kmef = createFilterFromString(_model.attic.filter);
						_model.attic.filter = null;
						_model.attic.kmef = kmef;
					}
					(contentView.selectedChild as IContentPanel).init(_model.attic.kmef);
					JSGate.writeUrlHash(NAME, contentView.selectedChild.id);
				}
				setModuleReady();

			}


			/**
			 * start the sequence of commands which will end in opening drilldown
			 * window for the given entry.
			 * @param entry		the entry to drill into.
			 * */
			private function requestEntryDrilldown(entry:KalturaBaseEntry):void {
				var cgEvent:CairngormEvent;
				var kEvent:KMvCEvent = new KedEntryEvent(KedEntryEvent.SET_SELECTED_ENTRY, entry);
				KedController.getInstance().dispatch(kEvent);
				if (entry is KalturaPlaylist) {
					//switch manual / rule base
					if ((entry as KalturaPlaylist).playlistType == KalturaPlaylistType.STATIC_LIST) {
						// manual list
						cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.PLAYLIST_MANUAL_WINDOW);
						cgEvent.dispatch();
					}
					if ((entry as KalturaPlaylist).playlistType == KalturaPlaylistType.DYNAMIC) {
						cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.PLAYLIST_RULE_BASED_WINDOW);
						cgEvent.dispatch();
					}
				}
				else {
					cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.ENTRY_DETAILS_WINDOW);
					cgEvent.dispatch();
				}
			}


			/**
			 * set Alert locale for this module
			 * */
			private function setAlert():void {
				Alert.yesLabel = resourceManager.getString('cms', 'yes');
				Alert.noLabel = resourceManager.getString('cms', 'no');
				Alert.okLabel = resourceManager.getString('cms', 'ok');
				Alert.cancelLabel = resourceManager.getString('cms', 'cancel');
			}


			/**
			 * creates a KalturaMediaEntryFilter from encoded data
			 * @param filter	encoded filter data
			 * */
			private function createFilterFromString(filter:String):KalturaBaseEntryFilter {
				var dec:Base64Decoder = new Base64Decoder();
				dec.decode(filter);
				var filterString:String = dec.toByteArray().toString();
				var filterArray:Array = filterString.split("&");

				// distinguish between playlist and entry:
				var kmef:KalturaBaseEntryFilter;
				for (var j:int = 0; j < filterArray.length; j++) {
					if (filterArray[j].indexOf("objectType") == 0) {
						var cls:String = filterArray[j].split("=")[1];
						if (cls == "KalturaPlaylistFilter") {
							kmef = new KalturaPlaylistFilter();
						}
						else {
							kmef = new KalturaMediaEntryFilter();
						}
						break;
					}
				}

				var att:Array;
				for (var i:int = 0; i < filterArray.length; i++) {
					att = filterArray[i].split("=");
					if (att[1]) {
						// KalturaMediaEntryFilter is dynamic, ok to put all values without testing
						kmef[att[0]] = att[1];
					}
				}

				return kmef;
			}


			/**
			 * dispatches events that trigger data loading, for data that can be changed from other
			 * tabs such as "settings"
			 * */
			private function loadChangableData():void {
				var getAllProfilesEvent:AccessControlProfileEvent = new AccessControlProfileEvent(AccessControlProfileEvent.LIST_ACCESS_CONTROLS_PROFILES);
				getAllProfilesEvent.dispatch();
				
				var lmdp:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.LIST);
				DataTabController.getInstance().dispatch(lmdp);
				
				// Should happen soon enough before it's needed - Biton. 
				var listCategoryMetadata:CategoryEvent = new CategoryEvent(CategoryEvent.LIST_METADATA_PROFILES);
				listCategoryMetadata.dispatch();

				if (contentView.selectedChild == manage) {
					manage.loadEntries();
				}
			}


			/**
			 * I have no idea what this function (or this flag) do.
			 * */
			private function onExternalTabChange():void {
				JSGate.onTabChange();
			}


			/**
			 * bring any visible popups to the center of the screen
			 * */
			private function centerPopups(event:Event = null):void {
				for (var i:int = 0; i < _model.popups.length; i++) {
					PopUpManager.centerPopUp(_model.popups[i]);
				}
			}


			/**
			 * initialize analytics trackers (GA needs the stage for debug mode)
			 * */
			private function initTrackers(e:Event = null):void {
				if (willTrigger(Event.ADDED_TO_STAGE)) {
					removeEventListener(Event.ADDED_TO_STAGE, initTrackers);
				}
				_urchinNumber = _flashvars.urchinnumber;
				GoogleAnalyticsTracker.getInstance().setBasePath("KMC/content");
				var ka:KAnalyticsTracker = KAnalyticsTracker.getInstance();

				// intialize local data
				SoManager.getInstance().getLocalData("kmc", _model.context.userId);

				ka.init(_model.context.kc, "content", "4", _model.context.userId);
			}


			/**
			 * saves value of vars passed via uiconf
			 * */
			private function saveUiconfVars():void {
				var confFile:XML = new XML(_uiconf.confFile);

				// context:
				_model.context.moderationUiconf = confFile.uiconf.kdp.moderation.text().toString();
				_model.context.drilldownUiconf = confFile.uiconf.kdp.drilldown.text().toString();
				_model.context.drilldownAdsUiconf = confFile.uiconf.kdp.drilldownAds.text().toString();
				_model.context.captureThumbnailUiconf = confFile.uiconf.kdp.captureThumbnail.text().toString();
				_model.context.kClipAdsUiconf = confFile.uiconf.kclip.ads.text().toString();
				_model.context.panelsConfig = confFile.uiconf.entryDrilldown.panels[0];

				// model:
				_customDataData.metadataDefaultUiconf = confFile.uiconf.metadata.text().toString();
				(_model.entryDetailsModel.getDataPack(CuePointsDataPack)as CuePointsDataPack).cuepointsSamplesUrl = getFullUrl(confFile.cuepoints.text().toString());
				
				// Remove this later? - Biton.
				if (confFile.uiconf.entryDrilldown.mixesTab.text().toString() != '') {
					(_model.entryDetailsModel.getDataPack(ContentDataPack) as ContentDataPack).showMixesTab = (confFile.uiconf.entryDrilldown.mixesTab.text().toString() == "true");
				}
				
				(_model.entryDetailsModel.getDataPack(FlavorsDataPack) as FlavorsDataPack).fileFilters = confFile.filters.filter;

			}
			
			protected function getFullUrl(url:String):String {
				if (url.indexOf('://') == -1) {
					// no protocol, concat from client
					url = _kc.protocol + _kc.domain + url; 
				}
				return url;
			}


			/**
			 * initialize application model according to flashvars data
			 * @param objParam	"lowercased" parameters object
			 * */
			private function initModel(objParam:Object):void {
				_model.app = this as IFlexDisplayObject;

				if (objParam.opencw) {
					_model.bulkUploadModel.openCw = objParam.opencw;
				}

				if (objParam.openplaylist) {
					_model.openPlaylist = objParam.openplaylist;
				}

				if (objParam.openplayer) {
					_model.openPlayer = objParam.openplayer;
				}
				
				_entryData.maxNumCategories = objParam.maxnumcategories;
				
				_model.categoriesModel.client = _kc;
				// Custom data hack
				var listCategoryMetadataProfiles:CategoryEvent = new CategoryEvent(CategoryEvent.LIST_METADATA_PROFILES);
				listCategoryMetadataProfiles.dispatch();
			}


			/**
			 * initialize application context according to flashvars data
			 * @param objParam	"lowercased" parameters object
			 * */
			private function initModelContext(objParam:Object):void {
				// flashvars:
				_model.context.debugMode = objParam.debugmode;
				_model.context.userId = objParam.uid;
				_model.context.subpId = objParam.subpid;
				_model.context.rootUrl = KUtils.hostFromCode(objParam.host);
				_model.context.cdnHost = objParam.cdnhost ? objParam.cdnhost : _model.context.rootUrl;
				_model.context.kc = _kc;
			}


			/**
			 * fix race condition, application added or tab switch from initial flashvar
			 */
			private function switchToTab(tab:String = ""):void {
				var kmef:KalturaBaseEntryFilter;
				if (_model.attic.filter) {
					kmef = createFilterFromString(_model.attic.filter);
					_model.attic.filter = null;
					_model.attic.kmef = kmef;
				}
				//unselect old tab
				setSelectionValueToButton(contentView.selectedIndex, false);
				// get the correct index from the viewstack, so it'll work after removing items as well.
				var selectedIndex:int = getSubtabIndex(tab);
				contentView.selectedIndex = selectedIndex;
				setSelectionValueToButton(contentView.selectedIndex, true);
				// init subtab 
//				(contentView.selectedChild as IContentPanel).init(_model.attic.kmef);
//				JSGate.writeUrlHash(NAME, contentView.selectedChild.id);
			}


			/**
			 * returns the index of a given subtab in the content viewstack
			 * @param name	subtab name
			 * @return index of the given subtab in viewstack, or -1 if not found
			 * */
			private function getSubtabIndex(name:String):int {
				var t:int = contentView.numChildren;
				var tab:UIComponent;
				var res:int = -1;
				for (var i:int = 0; i < t; i++) {
					tab = contentView.getChildAt(i) as UIComponent;
					if (tab.id.toLowerCase() == name) {
						res = i;
						break;
					}
				}
				return res;
			}


			/**
			 * close popup window.
			 * if this was the last opened popup, enable HTML tabs
			 * */
			private function closePopup():void {
				var popup:TitleWindow = _model.topPopup;
				if (popup) {
					popup.removeEventListener(KmcHelpEvent.HELP, onHelp, false);
					PopUpManager.removePopUp(popup);
					_model.popups.pop();
				}
				if (!_model.topPopup) {
					if (popup) {
						// only do this if we actualy closed a popup
						enableHtmlTabs(true);
						if (contentView) {
							contentView.selectedChild.setFocus();
						}
					}
				}
			}


			/**
			 * check after changing <code>_model.windowState</code> if
			 * something has to be refreshed
			 *
			 * we are closing the top window on the list - this is triggered
			 * before removing it, so the popup to be removed is still on the list.
			 * */
			private function refreshDataByPopupType():void {
				if (!_model.popups.length)
					return;

				var top:TitleWindow = _model.topPopup;
				var prev:TitleWindow = _model.prevPopup;

				if (prev is RulePlaylistWindow && top is EntryDetailsWin) {
					// closing entry drilldown opened from rulebased playlist window
					(prev as RulePlaylistWindow).simpleRule.runRule();
				}
				else if (prev is ManualPlaylistWindow && top is EntryDetailsWin) {
					// closing entry drilldown opened from manual playlist window
					(prev as ManualPlaylistWindow).loadEntries();
				}
				else if (top is EntryDetailsWin && _model.refreshEntriesRequired) {
					// closing entry drilldown in "manage"
					manage.loadEntries();
				}
				else if (top is SetSchedulingWin){
					// setting scheduling from "more options" menu
					manage.loadEntries();
				}
			}

			/**
			 * open drill down to replacement entry, with partial tabs list
			 * */
			private function setReplacementDrilldown(edw:EntryDetailsWin):void {
				KMvCModel.addModel();
				var edp:EntryDataPack = KMvCModel.getInstance().getDataPack(EntryDataPack) as EntryDataPack;
				edp.selectedEntry = _entryData.selectedReplacementEntry;
				edp.replacedEntryName = _entryData.selectedEntry.name;
				//
				edp.loadRoughcuts = false;
//				edw.showNextPrevBtns = false;
				edw.visibleTabs = Vector.<String>(["entryAssets"]);
				edw.styleName = "WinTitleStyle2";
				edw.setStyle("modalTransparency", 0);
			}
			
			
			
			/**
			 * handle events dispatched by the drilldown
			 * */
			private function handleKedEvents(e:KedDataEvent):void {
				switch (e.type) {
					
					case KedDataEvent.ENTRY_UPDATED:
						// set refresh list required
						_model.refreshEntriesRequired = true;
						// break; // case falldown
					case KedDataEvent.ENTRY_RELOADED:
						// dispatch a Cairngorm event which will update the new entry in the entries list
						var uev:UpdateEntryEvent = new UpdateEntryEvent(UpdateEntryEvent.UPDATE_ENTRY_IN_LIST);
						uev.data = e.data;
						uev.dispatch();
						break;
					
					case KedDataEvent.CLOSE_WINDOW:
						// close the drilldown
						var cgEvent:CairngormEvent = new WindowEvent(WindowEvent.CLOSE);
						cgEvent.dispatch();
						
						// make sure list is refreshed when drilldown window is closed
						if (_model.refreshEntriesRequired) {
							cgEvent = new KMCSearchEvent(KMCSearchEvent.DO_SEARCH_ENTRIES, _model.listableVo);
							cgEvent.dispatch();
						}
						break;
					
					case KedDataEvent.CATEGORY_CHANGED:
						// list entries
						var searchEvent:KMCSearchEvent = new KMCSearchEvent(KMCSearchEvent.DO_SEARCH_ENTRIES , _model.listableVo  );
						searchEvent.dispatch();
						break;
					
					case KedDataEvent.OPEN_REPLACEMENT:
						var openWindow:WindowEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.REPLACEMENT_ENTRY_DETAILS_WINDOW);
						openWindow.dispatch();
						break;
					
					case KedDataEvent.OPEN_ENTRY:
						requestEntryDrilldown(e.data);
						break;
				}
			}
			

			/**
			 * opens a popup window with entry details
			 * @param state	they type of entry drilldown to show, enumerated in <code>EntryDetailsWindowState</code>
			 * */
			private function openEntryDetails(state:String):EntryDetailsWin {
				var edw:EntryDetailsWin = new EntryDetailsWin();
				edw.styleName = "WinTitleStyle";
				edw.addEventListener(KedDataEvent.ENTRY_RELOADED, handleKedEvents, false, 0, true);
				edw.addEventListener(KedDataEvent.CLOSE_WINDOW, handleKedEvents, false, 0, true);
				edw.addEventListener(KedDataEvent.CATEGORY_CHANGED, handleKedEvents, false, 0, true);
				edw.addEventListener(KedDataEvent.ENTRY_UPDATED, handleKedEvents, false, 0, true);
				edw.addEventListener(KedDataEvent.OPEN_REPLACEMENT, handleKedEvents, false, 0, true);
				edw.addEventListener(KedDataEvent.OPEN_ENTRY, handleKedEvents, false, 0, true);
				edw.isNewEntry = state == EntryDetailsWindowState.NEW_ENTRY;
				//get the selected entry from the server
				if (state != EntryDetailsWindowState.NEW_ENTRY) {
					var getSelectedEntry:KedEntryEvent = new KedEntryEvent(KedEntryEvent.UPDATE_SELECTED_ENTRY_REPLACEMENT_STATUS, null,
						_entryData.selectedEntry.id);
					KedController.getInstance().dispatch(getSelectedEntry);
				}
				if (state == EntryDetailsWindowState.REPLACEMENT_ENTRY) {
					setReplacementDrilldown(edw);
				}
				
				var entryDetailsModel:KMvCModel = KMvCModel.getInstance();
				edw.entryDetailsModel = entryDetailsModel;
				var contextData:ContextDataPack = entryDetailsModel.getDataPack(ContextDataPack) as ContextDataPack;
				contextData.showEmbedCode = _model.showSingleEntryEmbedCode;
				contextData.landingPage = _model.extSynModel.partnerData.landingPage;
				contextData.openPlayerFunc = _model.openPlayer;
				if (state != EntryDetailsWindowState.NORMAL_ENTRY)
					edw.showNextPrevBtns = false;
				else if (_model.listableVo)	// only for normal entries
					edw.itemsAC = _model.listableVo.arrayCollection;
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_ENTRY_DRILLDOWN, GoogleAnalyticsConsts.CONTENT)
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_ENTRY_DRILLDOWN, "content>Entry DrillDown");

				return edw;
			}


			private function onHelp(e:KmcHelpEvent):void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, e.anchor));
			}


			/**
			 * allows download of a single image or opens a download popup window
			 * */
			private function openDownload():DownloadWin {
				var dw:DownloadWin;
				//if the user selected to download a single image, no need to open to pop-up
				if ((_model.selectedEntries) && (_model.selectedEntries.length == 1) && (_model.selectedEntries[0] is KalturaMediaEntry) && ((_model.selectedEntries[0] as KalturaMediaEntry).mediaType == KalturaMediaType.IMAGE)) {
					var urlRequest:URLRequest = new URLRequest(_model.selectedEntries[0].downloadUrl + DOWNLOAD_FINITE);
					navigateToURL(urlRequest);
					this.enabled = true;
				}
				else {
					dw = new DownloadWin();
					dw.entries = _model.selectedEntries;
					dw.flavorParams = _model.filterModel.flavorParams;
				}
				return dw;
			}


			/**
			 * opens a popup window with manual playlist
			 * */
			private function openManualPlaylist():ManualPlaylistWindow {
				var cgEvent:EntriesEvent = new EntriesEvent(EntriesEvent.SET_SELECTED_ENTRIES_FOR_PLAYLIST, new ArrayCollection(_model.selectedEntries));
				cgEvent.dispatch();

				var mpw:ManualPlaylistWindow = new ManualPlaylistWindow();
				mpw.rootUrl = _model.context.rootUrl;
				mpw.filterData = _model.filterModel;
				
				if (_model.playlistModel.onTheFlyPlaylistType == SetPlaylistTypeEvent.MANUAL_PLAYLIST) {
					// this is not an empty or edit existing playlist - this is a
					// new playlist created on the fly from entries screen 
					mpw.onTheFlyEntries = _model.playlistModel.onTheFlyPlaylistEntries;
				}	
				
				mpw.distributionProfilesArray = (_model.entryDetailsModel.getDataPack(DistributionDataPack) as DistributionDataPack).distributionProfileInfo.kalturaDistributionProfilesArray;
				mpw.selectedEntry = _entryData.selectedEntry;
				if (_entryData.selectedEntry && _entryData.selectedEntry.id){
					mpw.context = ManualPlaylistWindowMode.EDIT_PLAYLIST_MODE;
				}
				
				mpw.addEventListener(ManualPlaylistWindowEvent.CLOSE, handleManPlEvents);
				mpw.addEventListener(ManualPlaylistWindowEvent.SHOW_ENTRY_DETAILS, handleManPlEvents);
				mpw.addEventListener(ManualPlaylistWindowEvent.SAVE_NEW_PLAYLIST, handleManPlEvents);
				mpw.addEventListener(ManualPlaylistWindowEvent.SAVE_EXISTING_PLAYLIST, handleManPlEvents);
				mpw.addEventListener(ManualPlaylistWindowEvent.GET_PLAYLIST, handleManPlEvents);
				mpw.addEventListener(ManualPlaylistWindowEvent.LOAD_FILTER_DATA, handleManPlEvents);
				mpw.addEventListener(ManualPlaylistWindowEvent.SEARCH_ENTRIES, handleManPlEvents);
				return mpw;
			}
			
			private function handleChangeEntryOwnerEvents(e:Event):void {
				switch (e.type) {
					case "save":
						// set entry owner for all selected entries
						var tgt:SetOwnerWindow = e.target as SetOwnerWindow;
						var kEvent:EntriesEvent = new EntriesEvent(EntriesEvent.SET_ENTRIES_OWNER, new ArrayCollection(_model.selectedEntries));
						kEvent.data = tgt.selectedUser.id;
						kEvent.dispatch();
						break;
					case CloseEvent.CLOSE:
						// close the popup
						var cgEvent:WindowEvent = new WindowEvent(WindowEvent.CLOSE);
						cgEvent.dispatch();
						break;
				}
			}
			
			private function handleAddCategoriesEvents(e:Event):void {
				switch (e.type) {
					case "apply":
						// add categories to all selected entries
						var tgt:CategoryBrowser = e.target as CategoryBrowser;
						var kEvent:EntriesEvent = new EntriesEvent(EntriesEvent.ADD_CATEGORIES_ENTRIES, new ArrayCollection(_model.selectedEntries));
						kEvent.data = tgt.getCategories();
						kEvent.dispatch();
						break;
					case CloseEvent.CLOSE:
						// close the popup
						var cgEvent:WindowEvent = new WindowEvent(WindowEvent.CLOSE);
						cgEvent.dispatch();
						break;
				}
			}
			
			
			private function handleRemoveCategoriesEvents(e:Event):void {
				switch (e.type) {
//					case "apply": (handled inside the window)
//						break;
					case CloseEvent.CLOSE:
						// close the popup
						var cgEvent:WindowEvent = new WindowEvent(WindowEvent.CLOSE);
						cgEvent.dispatch();
						break;
				}
			}
			
			private function handleMoveCategoriesEvents(e:Event):void {
				switch (e.type) {
					case "apply": 
						// set all categories as children of the selected parent category 
						var tgt:MoveCategoriesWindow = e.target as MoveCategoriesWindow;
						var kEvent:CategoryEvent = new CategoryEvent(CategoryEvent.MOVE_CATEGORIES);
						kEvent.data = [tgt.getCategories(), tgt.getParent()];
						kEvent.dispatch();
						break;
					case CloseEvent.CLOSE:
						// close the popup
						var cgEvent:WindowEvent = new WindowEvent(WindowEvent.CLOSE);
						cgEvent.dispatch();
						break;
				}
			}
			
			
			
			
			private function handleManPlEvents(e:ManualPlaylistWindowEvent) :void {
				var cgEvent:CairngormEvent;
				switch (e.type) {
					case ManualPlaylistWindowEvent.CLOSE:
						var mpw:ManualPlaylistWindow = e.target as ManualPlaylistWindow;
						mpw.removeEventListener(ManualPlaylistWindowEvent.CLOSE, handleManPlEvents);
						mpw.removeEventListener(ManualPlaylistWindowEvent.SHOW_ENTRY_DETAILS, handleManPlEvents);
						mpw.removeEventListener(ManualPlaylistWindowEvent.SAVE_NEW_PLAYLIST, handleManPlEvents);
						mpw.removeEventListener(ManualPlaylistWindowEvent.SAVE_EXISTING_PLAYLIST, handleManPlEvents);
						mpw.removeEventListener(ManualPlaylistWindowEvent.GET_PLAYLIST, handleManPlEvents);
						mpw.removeEventListener(ManualPlaylistWindowEvent.LOAD_FILTER_DATA, handleManPlEvents);
						mpw.removeEventListener(ManualPlaylistWindowEvent.SEARCH_ENTRIES, handleManPlEvents);
						// reset on-the-fly flag 
						cgEvent = new SetPlaylistTypeEvent(SetPlaylistTypeEvent.NONE_PLAYLIST);
						cgEvent.dispatch();
						cgEvent = new WindowEvent(WindowEvent.CLOSE);
						cgEvent.dispatch();
						break;
					
					case ManualPlaylistWindowEvent.SHOW_ENTRY_DETAILS:
						// open entry details window with the selected entry from the playlist
						var entry:KalturaBaseEntry = e.data as KalturaBaseEntry;
						var kEvent:KMvCEvent = new KedEntryEvent(KedEntryEvent.SET_SELECTED_ENTRY, entry, entry.id);
						KedController.getInstance().dispatch(kEvent);
						cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.PLAYLIST_ENTRY_DETAILS_WINDOW);
						cgEvent.dispatch();
						break;
					
					case ManualPlaylistWindowEvent.SAVE_NEW_PLAYLIST:
						var addEntryEvent:KMCEntryEvent = new KMCEntryEvent(KMCEntryEvent.ADD_PLAYLIST, e.data as KalturaPlaylist);
						addEntryEvent.dispatch();
						break;
					
					case ManualPlaylistWindowEvent.SAVE_EXISTING_PLAYLIST:
						var entriesEvent:EntriesEvent = new EntriesEvent(EntriesEvent.UPDATE_PLAYLISTS,
							new ArrayCollection([e.data as KalturaPlaylist]));
						entriesEvent.dispatch();
						break;
					
					case ManualPlaylistWindowEvent.GET_PLAYLIST:
						cgEvent = new KMCEntryEvent(KMCEntryEvent.GET_PLAYLIST, e.data as KalturaPlaylist);
						cgEvent.dispatch();
						break;
					
					case ManualPlaylistWindowEvent.LOAD_FILTER_DATA:
						var fe:LoadEvent = new LoadEvent(LoadEvent.LOAD_FILTER_DATA, e.target as IDataOwner, _model.filterModel);
						KedController.getInstance().dispatch(fe);
						break;
					
					case ManualPlaylistWindowEvent.SEARCH_ENTRIES:
						var searchEvent:SearchEvent = new SearchEvent(SearchEvent.SEARCH_ENTRIES, e.data as ListableVo);
						KedController.getInstance().dispatch(searchEvent);
						break;
				}
			}

			/**
			 * opens a popup window with rule based playlist
			 * */
			private function openRuleBasedPlaylist():RulePlaylistWindow {
				var rpw:RulePlaylistWindow = new RulePlaylistWindow();
				rpw.rulePlaylistData = _model.playlistModel;
				rpw.rootUrl = _model.context.rootUrl;
				if (_entryData.selectedEntry && (_entryData.selectedEntry is KalturaPlaylist)) {
					rpw.editPlaylist = _entryData.selectedEntry as KalturaPlaylist;
				}
				rpw.filterData = _model.filterModel;

				rpw.distributionProfilesArr = (_model.entryDetailsModel.getDataPack(DistributionDataPack) as DistributionDataPack).distributionProfileInfo.kalturaDistributionProfilesArray;
				// assign the current fiter to the new window 
				rpw.onTheFlyFilter = _model.playlistModel.onTheFlyFilter;
				_model.playlistModel.onTheFlyFilter = null;
				return rpw;
			}


			/**
			 * opens or closes needed popup windows according to new state
			 * */
			private function changeWindowState(newState:String):void {
				if (newState == WindowsStates.NONE) {
					refreshDataByPopupType();
					closePopup();
					this.enabled = true;
				}
				else if (newState == WindowsStates.ENTRY_DETAILS_WINDOW_CLOSED_ONE) {
					closePopup();
				}
				else {
					this.enabled = false;
					var currentPopUp:TitleWindow;
					switch (newState) {
						case WindowsStates.REPLACEMENT_ENTRY_DETAILS_WINDOW:
							currentPopUp = openEntryDetails(EntryDetailsWindowState.REPLACEMENT_ENTRY);
							break;
						case WindowsStates.ENTRY_DETAILS_WINDOW_NEW_ENTRY:
							currentPopUp = openEntryDetails(EntryDetailsWindowState.NEW_ENTRY);
							break;
						case WindowsStates.ENTRY_DETAILS_WINDOW:
							currentPopUp = openEntryDetails(EntryDetailsWindowState.NORMAL_ENTRY);
							break;
						case WindowsStates.PLAYLIST_ENTRY_DETAILS_WINDOW:
							currentPopUp = openEntryDetails(EntryDetailsWindowState.PLAYLIST_ENTRY);
							break;
						case WindowsStates.DOWNLOAD_WINDOW:
							currentPopUp = openDownload();
							break;
						case WindowsStates.ADD_TAGS_WINDOW:
							var atw:AddTagsWin = new AddTagsWin();
							atw.selectedEntries = new ArrayCollection(_model.selectedEntries);
							currentPopUp = atw;
							break;
						case WindowsStates.ADD_LIVE_STREAM:
							currentPopUp = new AddStream();
							break;
						case WindowsStates.REMOVE_TAGS_WINDOW:
							currentPopUp = new RemoveTagsWin();
							(currentPopUp as RemoveTagsWin).selectedEntries = new ArrayCollection(_model.selectedEntries);
							break;
						case WindowsStates.PLAYLIST_MANUAL_WINDOW:
							currentPopUp = openManualPlaylist();
							break;
						case WindowsStates.PLAYLIST_RULE_BASED_WINDOW:
							currentPopUp = openRuleBasedPlaylist();
							break;
						case WindowsStates.SETTING_ACCESS_CONTROL_PROFILES_WINDOW:
							currentPopUp = new SetAccessControlProfileWin();
							(currentPopUp as SetAccessControlProfileWin).selectedEntries = new ArrayCollection(_model.selectedEntries);
							(currentPopUp as SetAccessControlProfileWin).filterModel = _model.filterModel;
							(currentPopUp as SetAccessControlProfileWin).entryDetailsModel = KMvCModel.getInstance();
							
							break;
						case WindowsStates.SETTING_SCHEDULING_WINDOW:
							currentPopUp = new SetSchedulingWin();
							(currentPopUp as SetSchedulingWin).selectedEntries = new ArrayCollection(_model.selectedEntries);
							break;
						case WindowsStates.PREVIEW:
							openPreviewEmbed();
							break;
						case WindowsStates.CATEGORY_DETAILS_WINDOW:
							var catDetails:CategoryDetailsWin;
							currentPopUp = catDetails = new CategoryDetailsWin();
							var selectedCat:KalturaCategory = _model.categoriesModel.selectedCategories[0] as KalturaCategory;
							if (selectedCat.name == null){
								_model.categoriesModel.processingNewCategory = true;	//TODO make pretty
								catDetails.isNewCategory = true;
							}
							catDetails.filterModel = _model.filterModel;
							catDetails.categoriesModel = _model.categoriesModel;
							catDetails.addEventListener(KedDataEvent.CLOSE_WINDOW, handleKedEvents, false, 0, true);
							break;
						case WindowsStates.CHANGE_ENTRY_OWNER_WINDOW:
							currentPopUp = new SetOwnerWindow();
							currentPopUp.addEventListener("save", handleChangeEntryOwnerEvents, false, 0, true);
							currentPopUp.addEventListener(CloseEvent.CLOSE, handleChangeEntryOwnerEvents, false, 0, true);
							(currentPopUp as SetOwnerWindow).kClient = _kc;
//							(currentPopUp as SetOwnerWindow).entryData = _entryData;
//							(currentPopUp as SetOwnerWindow).setUserById(_entryData.selectedEntry.userId);
							break;
						case WindowsStates.ADD_CATEGORIES_WINDOW:
							currentPopUp = new CategoryBrowser();
							currentPopUp.addEventListener("apply", handleAddCategoriesEvents, false, 0, true);
							currentPopUp.addEventListener(CloseEvent.CLOSE, handleAddCategoriesEvents, false, 0, true);
							(currentPopUp as CategoryBrowser).filterModel = _model.filterModel;
							(currentPopUp as CategoryBrowser).kClient = _kc;
							break;
						case WindowsStates.REMOVE_CATEGORIES_WINDOW:
							currentPopUp = new RemoveCategoriesWindow();
							currentPopUp.addEventListener("apply", handleRemoveCategoriesEvents, false, 0, true);
							currentPopUp.addEventListener(CloseEvent.CLOSE, handleRemoveCategoriesEvents, false, 0, true);
							(currentPopUp as RemoveCategoriesWindow).model = _model;
							break;
						case WindowsStates.MOVE_CATEGORIES_WINDOW:
							currentPopUp = new MoveCategoriesWindow();
							currentPopUp.addEventListener("apply", handleMoveCategoriesEvents, false, 0, true);
							currentPopUp.addEventListener(CloseEvent.CLOSE, handleMoveCategoriesEvents, false, 0, true);
							(currentPopUp as MoveCategoriesWindow).filterModel = _model.filterModel;
							(currentPopUp as MoveCategoriesWindow).setCategories(_model.categoriesModel.selectedCategories);
							break;
					}

					// add the new window
					if (currentPopUp) {
						addPopup(currentPopUp);
						// if this is a replacement entry drilldown, move it a little
						if (newState == WindowsStates.REPLACEMENT_ENTRY_DETAILS_WINDOW) {
							currentPopUp.x += 20;
							currentPopUp.y += 40;
						}
					}
				}
			}


			/**
			 * adds a popup window to the screen
			 * */
			private function addPopup(currentPopUp:TitleWindow):void {
				currentPopUp.addEventListener(KmcHelpEvent.HELP, onHelp, false, 0, true);
				// remember the new window
				_model.popups.push(currentPopUp);
				if (_model.popups.length == 1) {
					// this is the first popup
					enableHtmlTabs(false);

				}
				PopUpManager.addPopUp(currentPopUp, Application.application as DisplayObject, true);
				currentPopUp.setFocus();
				centerPopups();
			}


			/**
			 * open a preview player with live streaming entry
			 * */
			private function openLivestreamPreview(entry:KalturaBaseEntry):void {
				var lp:KalturaLiveStreamAdminEntry = entry as KalturaLiveStreamAdminEntry;
				var bitrates:Array = new Array();
				var o:Object;
				for each (var br:KalturaLiveStreamBitrate in lp.bitrates) {
					o = new Object();
					o.bitrate = br.bitrate;
					o.width = br.width;
					o.height = br.height;
					bitrates.push(o);
				}

				if (_model.openPlayer) {
					//id, name, description, previewonly, is_playlist, uiconf_id 
					JSGate.doPreviewEmbed(_model.openPlayer, lp.id, lp.name, StringUtil.cutTo512Chars(lp.description), !_model.showSingleEntryEmbedCode, false, _model.attic.previewuiconf, bitrates, [], false);
					_model.attic.previewuiconf = null;
				}

				//First time funnel
				if (!SoManager.getInstance().checkOrFlush(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED)) {
					GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED, GoogleAnalyticsConsts.CONTENT);
				}
			}


			/**
			 * open a preview player with playlist
			 * */
			private function openPlaylistPreview(entry:KalturaBaseEntry):void {
				// open playlist preview
				if (_model.openPlaylist) {
					var pl:KalturaPlaylist = entry as KalturaPlaylist;
					JSGate.doPreviewEmbed(_model.openPlaylist, pl.id, pl.name, StringUtil.cutTo512Chars(pl.description), !_model.showPlaylistEmbedCode, true, _model.attic.previewuiconf, null, [], false);
					_model.attic.previewuiconf = null;
					//first time funnel 
					if (!SoManager.getInstance().checkOrFlush(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYLIST_EMBED)) {
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYLIST_EMBED, GoogleAnalyticsConsts.CONTENT);
					}
				}
			}


			/**
			 * open a preview player with a normal entry
			 * */
			private function openEntryPreview(entry:KalturaBaseEntry):void {
				// open regular entry preview
				if (_model.openPlayer) {
					var cgEvent:KMCEntryEvent = new KMCEntryEvent(KMCEntryEvent.GET_FLAVOR_ASSETS_FOR_PREVIEW, entry);
					cgEvent.dispatch();
				}
				//First time funnel
				if (!SoManager.getInstance().checkOrFlush(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED)) {
					GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED, GoogleAnalyticsConsts.CONTENT);
				}
			}


			/**
			 * Open a preview player. <br>
			 * This method triggers one of the specific openPreview methods.
			 * */
			private function openPreviewEmbed():void {
				if (!initialized)
					return;

				var entry:KalturaBaseEntry = _entryData.selectedEntry;

				if (entry is KalturaLiveStreamAdminEntry) {
					openLivestreamPreview(entry);

				}
				else if (entry is KalturaPlaylist) {
					openPlaylistPreview(entry);
				}
				else {
					openEntryPreview(entry);
				}
				_model.windowState = WindowsStates.NONE;
			}



			/**
			 * shows or hides the loading (busy) cursor
			 * */
			private function toggleLoading(isLoading:Boolean):void {
				if (isLoading) {
					CursorManager.setBusyCursor();
					this.enabled = false;
				}
				else {
					CursorManager.removeBusyCursor();
					this.enabled = true;
				}
			}


			/**
			 * will be called when clicking one of the left tab buttons
			 * */
			private function leftTabClicked(event:Event):void {
				setNewTabSelection(event);
				contentView.selectedIndex = leftBtnsHBox.getChildIndex(event.target as Button);
				trackTabChange(event);
			}


			/**
			 * will be called when clicking one of the right tab buttons
			 * */
			private function rightTabClicked(event:Event):void {
				setNewTabSelection(event);
				contentView.selectedIndex = rightBtnsHBox.getChildIndex(event.target as Button) + leftBtnsHBox.numChildren;
				trackTabChange(event);
			}


			/**
			 * unselects the previous selected tab, and sets the new tab to selected (only the buttons)
			 * */
			private function setNewTabSelection(event:Event):void {
				//unselect old tab
				setSelectionValueToButton(contentView.selectedIndex, false);
				//select new
				(event.target as Button).selected = true;
			}


			/**
			 * Sets the given selection value to the correct button - in leftBtnsHbox or rightBtnsHbox, according to index
			 * */
			private function setSelectionValueToButton(btnIndex:int, value:Boolean):void {
				if (btnIndex < leftBtnsHBox.numChildren)
					(leftBtnsHBox.getChildAt(btnIndex) as Button).selected = value;
				else
					(rightBtnsHBox.getChildAt(btnIndex - leftBtnsHBox.numChildren) as Button).selected = value;
			}


			/**
			 * track tab changes in analytics and URL hash
			 * */
			private function trackTabChange(evt:Event):void {
				var label:String = contentView.selectedChild.id;
				switch (label) {
					case "manage":
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_PAGE_VIEW, "pagingInEntryTable>Manage");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.PAGE_VIEW + GoogleAnalyticsConsts.CONTENT_ENTRIES, GoogleAnalyticsConsts.CONTENT);
						break;
					case "playlists":
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_PAGE_VIEW, "pagingInPlaylistTable>Playlists");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.PAGE_VIEW + GoogleAnalyticsConsts.CONTENT_PLAYLISTS, GoogleAnalyticsConsts.CONTENT);
						break;
					case "moderate":
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_PAGE_VIEW, "pagingInModerationTable>Moderate");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.PAGE_VIEW + GoogleAnalyticsConsts.CONTENT_MODERATION, GoogleAnalyticsConsts.CONTENT)
						break;
					case "syndication":
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_PAGE_VIEW, "pagingInSyndicateTable>Syndicate");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.PAGE_VIEW + GoogleAnalyticsConsts.CONTENT_SYNDICATION, GoogleAnalyticsConsts.CONTENT);
						break;
					case "uploads":
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_PAGE_VIEW, "pagingInBulkUploadTable>Upload");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.PAGE_VIEW + GoogleAnalyticsConsts.CONTENT_BULK_UPLOADS, GoogleAnalyticsConsts.CONTENT);
						break;
					case "dropFolders":
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_PAGE_VIEW, "navigateToDropFoldersPage");
						GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.PAGE_VIEW + GoogleAnalyticsConsts.CONTENT_DROP_FOLDERS, GoogleAnalyticsConsts.CONTENT);
						break;
				}

				// reset data when moving between tabs
				_model.selectedEntries = [];
			}


			private function onHelpClick(event:Event):void {
				var tab:DisplayObject = contentView.selectedChild;
				var anchor:String;
				switch (tab) {
					case manage:  {
						anchor = 'section11';
						break;
					}
					case moderation:  {
						anchor = 'section13';
						break;
					}
					case playlists:  {
						anchor = 'section14';
						break;
					}
					case syndication:  {
						anchor = 'section17';
						break;
					}
					case uploads:  {
						if (uploads.uploadViewStack.selectedIndex == 0) {
							// your uploads
							anchor = 'section16';
						}
						else {
							// bulk log
							anchor = 'bulk_uploads';
						}
						break;
					}
					case dropFolders:
						anchor = 'drop_folders';
						break;

					default:  {
						Alert.show("Help for unknown tab !");
						return;
					}
				}
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, anchor));
			}


			/**
			 * initialize the selected view
			 * */
			protected function initSelectedTab(event:IndexChangedEvent):void {
				// initialize the new panel with filter saved in the attic, if any.
				(contentView.getChildAt(event.newIndex) as IContentPanel).init(_model.attic.kmef);
				JSGate.writeUrlHash(NAME, contentView.selectedChild.id);
			}

			
			/**
			 * refresh bulk uploads list
			 * @internal
			 * triggered from add menu
			 * */
			public function refreshBulk():void {
				if (uploads.bulk) {
					uploads.bulk.loadEntries();
				}
			}
			
			private function getUploadsTabLabel(files:int):String {
				var s:String = resourceManager.getString('cms','uploads'); 
				if (files > 0) {
					s += resourceManager.getString('cms','parantheses',[files]);
				}
				return s; 
			}
		]]>
	</mx:Script>

	<!-- the FrontController, containing Commands specific to this appliation -->
	<control:CMSController/>
	
	<content:GeneralPermissionsSetter id="generalPermissions"/>

	<!--<mx:Button click="button1_clickHandler(event)" />-->

	<mx:VBox id="mainView" width="100%" height="100%" styleName="mainView" verticalScrollPolicy="off">
		<mx:HBox width="100%" styleName="tabsContainer" verticalAlign="middle">
			<mx:HBox id="leftBtnsHBox" styleName="tln">
				<mx:Button id="manageBtn" label="{ResourceManager.getInstance().getString('cms','entriesTitle')}"
						   click="leftTabClicked(event)"
						   styleName="{manageBtn.selected ? 'tlnSelectedTabStyle' : 'tlnUnSelectedTabStyle'}"
						   buttonMode="true" toggle="true" selected="true" height="{SUB_MENU_HEIGHT}"/>
				<mx:Button id="moderationBtn" label="{ResourceManager.getInstance().getString('cms','moderation')}"
						   click="leftTabClicked(event)"
						   styleName="{moderationBtn.selected ? 'tlnSelectedTabStyle' : 'tlnUnSelectedTabStyle'}"
						   buttonMode="true" toggle="true" height="{SUB_MENU_HEIGHT}"/>
				<mx:Button id="playlistsBtn" label="{ResourceManager.getInstance().getString('cms','playlistTitle')}"
						   click="leftTabClicked(event)"
						   styleName="{playlistsBtn.selected ? 'tlnSelectedTabStyle' : 'tlnUnSelectedTabStyle'}"
						   buttonMode="true" toggle="true" height="{SUB_MENU_HEIGHT}"/>
				<mx:Button id="syndicationBtn"
						   label="{ResourceManager.getInstance().getString('cms','externalSyndication')}"
						   click="leftTabClicked(event)"
						   styleName="{syndicationBtn.selected ? 'tlnSelectedTabStyle' : 'tlnUnSelectedTabStyle'}"
						   buttonMode="true" toggle="true" height="{SUB_MENU_HEIGHT}"/>
				<mx:Button id="categoriesBtn"
						   label="{ResourceManager.getInstance().getString('cms','categoriesPageTitle')}"
						   click="leftTabClicked(event)"
						   styleName="{categoriesBtn.selected ? 'tlnSelectedTabStyle' : 'tlnUnSelectedTabStyle'}"
						   buttonMode="true" toggle="true" height="{SUB_MENU_HEIGHT}"/>
			</mx:HBox>
			<mx:Spacer width="100%"/>
			<mx:HBox id="rightBtnsHBox">
				<mx:Button id="uploadsBtn" height="{SUB_MENU_HEIGHT}" 
						   label="{getUploadsTabLabel(_files.length)}"
						   click="rightTabClicked(event)" 
						   styleName="{uploadsBtn.selected ? 'rightTlnSelectedTabStyle' : 'rightTlnUnSelectedTabStyle'}"
						   buttonMode="true" toggle="true" />
				<mx:Button id="dropFoldersBtn" label="{resourceManager.getString('cms','dropFoldersTitle')}" height="{SUB_MENU_HEIGHT}"
						   styleName="{dropFoldersBtn.selected ? 'rightTlnSelectedTabStyle' : 'rightTlnUnSelectedTabStyle'}"
						   buttonMode="true" toggle="true" click="rightTabClicked(event)"/>

				<mx:Button styleName="help" buttonMode="true" click="{onHelpClick(event)}"/>
			</mx:HBox>
		</mx:HBox>
		<mx:ViewStack id="contentView" width="100%" height="100%" styleName="contentViewStack" 
					  change="initSelectedTab(event)" >
			<content:Entries id="manage" height="100%" styleName="pageStyle"
							 entryDetailsModel="{_model.entryDetailsModel}" 
							 filterModel="{_model.filterModel}" showEmbed="{_model.showSingleEntryEmbedCode}"
							 label="{ResourceManager.getInstance().getString('cms','entriesTitle')}"
							 windowState="{_model.windowState}"/>
			<content:Moderation id="moderation" styleName="pageStyle" height="100%" entryDetailsModel="{_model.entryDetailsModel}"
								context="{_model.context}" selectedEntry="{_entryData.selectedEntry}"
								filterModel="{_model.filterModel}" moderationModel="{_model.moderationModel}"
								label="{ResourceManager.getInstance().getString('cms','moderation')}" />
			<playlist:Playlist id="playlists" width="100%" height="100%" styleName="pageStyle"
							   selectedEntry="{_entryData.selectedEntry}"
							   showEmbed="{_model.showPlaylistEmbedCode}"
							   label="{ResourceManager.getInstance().getString('cms','playlistTitle')}"/>
			<content:ExternalSyndication id="syndication" styleName="pageStyle" 
										 flavorParams="{_model.filterModel.flavorParams}"
										 rootUrl="{_model.context.rootUrl}" extSynModel="{_model.extSynModel}"
										 label="{ResourceManager.getInstance().getString('cms','externalSyndication')}"/>
			<content:Categories id="categories" width="100%" height="100%" styleName="pageStyle"
								entryDetailsModel="{_model.entryDetailsModel}" 
								filterModel="{_model.filterModel}" 
								categoriesModel="{_model.categoriesModel}"
								label="{ResourceManager.getInstance().getString('cms','categoriesPageTitle')}"/>

			<content:Uploads id="uploads" width="100%" height="100%" 
							 files="{_files}"
							 styleName="pageStyle" 
							 bulkUploadDataProvider="{_model.bulkUploadModel}" />
			<content:DropFolders id="dropFolders" width="100%" height="100%" styleName="pageStyle"	  
									  dropFolderModel="{_model.dropFolderModel}" />

		</mx:ViewStack>
	</mx:VBox>
</modules:KmcModule>
